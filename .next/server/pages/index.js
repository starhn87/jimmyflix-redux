/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/index";
exports.ids = ["pages/index"];
exports.modules = {

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/link.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/link.js ***!
  \*******************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = __webpack_require__(/*! ../shared/lib/router/router */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/shared/lib/router/router.js\");\n\nvar _router1 = __webpack_require__(/*! ./router */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/router.js\");\n\nvar _useIntersection = __webpack_require__(/*! ./use-intersection */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/use-intersection.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst prefetched = {};\n\nfunction prefetch(router, href, as, options) {\n  if (true) return;\n  if (!(0, _router).isLocalURL(href)) return; // Prefetch the JSON page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n\n  router.prefetch(href, as, options).catch(err => {\n    if (true) {\n      // rethrow to show invalid URL errors\n      throw err;\n    }\n  });\n  const curLocale = options && typeof options.locale !== 'undefined' ? options.locale : router && router.locale; // Join on an invalid URI character\n\n  prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')] = true;\n}\n\nfunction isModifiedEvent(event) {\n  const {\n    target\n  } = event.currentTarget;\n  return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || event.nativeEvent && event.nativeEvent.which === 2;\n}\n\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale) {\n  const {\n    nodeName\n  } = e.currentTarget; // anchors inside an svg have a lowercase nodeName\n\n  const isAnchorNodeName = nodeName.toUpperCase() === 'A';\n\n  if (isAnchorNodeName && (isModifiedEvent(e) || !(0, _router).isLocalURL(href))) {\n    // ignore click for browserâ€™s default behavior\n    return;\n  }\n\n  e.preventDefault(); // replace state instead of push if prop is present\n\n  router[replace ? 'replace' : 'push'](href, as, {\n    shallow,\n    locale,\n    scroll\n  });\n}\n\nfunction Link(props) {\n  if (true) {\n    function createPropError(args) {\n      return new Error(`Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` + ( false ? 0 : ''));\n    } // TypeScript trick for type-guarding:\n\n\n    const requiredPropsGuard = {\n      href: true\n    };\n    const requiredProps = Object.keys(requiredPropsGuard);\n    requiredProps.forEach(key => {\n      if (key === 'href') {\n        if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: props[key] === null ? 'null' : typeof props[key]\n          });\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _ = key;\n      }\n    }); // TypeScript trick for type-guarding:\n\n    const optionalPropsGuard = {\n      as: true,\n      replace: true,\n      scroll: true,\n      shallow: true,\n      passHref: true,\n      prefetch: true,\n      locale: true\n    };\n    const optionalProps = Object.keys(optionalPropsGuard);\n    optionalProps.forEach(key => {\n      const valType = typeof props[key];\n\n      if (key === 'as') {\n        if (props[key] && valType !== 'string' && valType !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: valType\n          });\n        }\n      } else if (key === 'locale') {\n        if (props[key] && valType !== 'string') {\n          throw createPropError({\n            key,\n            expected: '`string`',\n            actual: valType\n          });\n        }\n      } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch') {\n        if (props[key] != null && valType !== 'boolean') {\n          throw createPropError({\n            key,\n            expected: '`boolean`',\n            actual: valType\n          });\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _ = key;\n      }\n    }); // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n\n    const hasWarned = _react.default.useRef(false);\n\n    if (props.prefetch && !hasWarned.current) {\n      hasWarned.current = true;\n      console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated');\n    }\n  }\n\n  const p = props.prefetch !== false;\n  const router = (0, _router1).useRouter();\n\n  const {\n    href,\n    as\n  } = _react.default.useMemo(() => {\n    const [resolvedHref, resolvedAs] = (0, _router).resolveHref(router, props.href, true);\n    return {\n      href: resolvedHref,\n      as: props.as ? (0, _router).resolveHref(router, props.as) : resolvedAs || resolvedHref\n    };\n  }, [router, props.href, props.as]);\n\n  const previousHref = _react.default.useRef(href);\n\n  const previousAs = _react.default.useRef(as);\n\n  let {\n    children,\n    replace,\n    shallow,\n    scroll,\n    locale\n  } = props;\n\n  if (typeof children === 'string') {\n    children = /*#__PURE__*/_react.default.createElement(\"a\", null, children);\n  } // This will return the first child, if multiple are provided it will throw an error\n\n\n  let child;\n\n  if (true) {\n    try {\n      child = _react.default.Children.only(children);\n    } catch (err) {\n      if (!children) {\n        throw new Error(`No children were passed to <Link> with \\`href\\` of \\`${props.href}\\` but one child is required https://nextjs.org/docs/messages/link-no-children`);\n      }\n\n      throw new Error(`Multiple children were passed to <Link> with \\`href\\` of \\`${props.href}\\` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children` + ( false ? 0 : ''));\n    }\n  } else {}\n\n  const childRef = child && typeof child === 'object' && child.ref;\n  const [setIntersectionRef, isVisible, resetVisible] = (0, _useIntersection).useIntersection({\n    rootMargin: '200px'\n  });\n\n  const setRef = _react.default.useCallback(el => {\n    // Before the link getting observed, check if visible state need to be reset\n    if (previousAs.current !== as || previousHref.current !== href) {\n      resetVisible();\n      previousAs.current = as;\n      previousHref.current = href;\n    }\n\n    setIntersectionRef(el);\n\n    if (childRef) {\n      if (typeof childRef === 'function') childRef(el);else if (typeof childRef === 'object') {\n        childRef.current = el;\n      }\n    }\n  }, [as, childRef, href, resetVisible, setIntersectionRef]);\n\n  _react.default.useEffect(() => {\n    const shouldPrefetch = isVisible && p && (0, _router).isLocalURL(href);\n    const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale;\n    const isPrefetched = prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')];\n\n    if (shouldPrefetch && !isPrefetched) {\n      prefetch(router, href, as, {\n        locale: curLocale\n      });\n    }\n  }, [as, href, isVisible, locale, p, router]);\n\n  const childProps = {\n    ref: setRef,\n    onClick: e => {\n      if (true) {\n        if (!e) {\n          throw new Error(`Component rendered inside next/link has to pass click event to \"onClick\" prop.`);\n        }\n      }\n\n      if (child.props && typeof child.props.onClick === 'function') {\n        child.props.onClick(e);\n      }\n\n      if (!e.defaultPrevented) {\n        linkClicked(e, router, href, as, replace, shallow, scroll, locale);\n      }\n    }\n  };\n\n  childProps.onMouseEnter = e => {\n    if (child.props && typeof child.props.onMouseEnter === 'function') {\n      child.props.onMouseEnter(e);\n    }\n\n    if ((0, _router).isLocalURL(href)) {\n      prefetch(router, href, as, {\n        priority: true\n      });\n    }\n  }; // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n  // defined, we specify the current 'href', so that repetition is not needed by the user\n\n\n  if (props.passHref || child.type === 'a' && !('href' in child.props)) {\n    const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale; // we only render domain locales if we are currently on a domain locale\n    // so that locale links are still visitable in development/preview envs\n\n    const localeDomain = router && router.isLocaleDomain && (0, _router).getDomainLocale(as, curLocale, router && router.locales, router && router.domainLocales);\n    childProps.href = localeDomain || (0, _router).addBasePath((0, _router).addLocale(as, curLocale, router && router.defaultLocale));\n  }\n\n  return /*#__PURE__*/_react.default.cloneElement(child, childProps);\n}\n\nvar _default = Link;\nexports[\"default\"] = _default;\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/link.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/normalize-trailing-slash.js":
/*!***************************************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \***************************************************************************************************************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.removePathTrailingSlash = removePathTrailingSlash;\nexports.normalizePathTrailingSlash = void 0;\n\nfunction removePathTrailingSlash(path) {\n  return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;\n}\n\nconst normalizePathTrailingSlash =  false ? 0 : removePathTrailingSlash;\nexports.normalizePathTrailingSlash = normalizePathTrailingSlash;\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L25vcm1hbGl6ZS10cmFpbGluZy1zbGFzaC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0FBQ3pDRyxFQUFBQSxLQUFLLEVBQUU7QUFEa0MsQ0FBN0M7QUFHQUQsK0JBQUEsR0FBa0NFLHVCQUFsQztBQUNBRixrQ0FBQSxHQUFxQyxLQUFLLENBQTFDOztBQUNBLFNBQVNFLHVCQUFULENBQWlDRSxJQUFqQyxFQUF1QztBQUNuQyxTQUFPQSxJQUFJLENBQUNDLFFBQUwsQ0FBYyxHQUFkLEtBQXNCRCxJQUFJLEtBQUssR0FBL0IsR0FBcUNBLElBQUksQ0FBQ0UsS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFDLENBQWYsQ0FBckMsR0FBeURGLElBQWhFO0FBQ0g7O0FBQ0QsTUFBTUQsMEJBQTBCLEdBQUdJLE1BQUEsR0FBcUNILENBQXJDLEdBUS9CRix1QkFSSjtBQVNBRixrQ0FBQSxHQUFxQ0csMEJBQXJDOztBQUVBLElBQUksT0FBT0gsT0FBTyxDQUFDVyxPQUFmLEtBQTJCLFVBQTNCLElBQTBDLE9BQU9YLE9BQU8sQ0FBQ1csT0FBZixLQUEyQixRQUEzQixJQUF1Q1gsT0FBTyxDQUFDVyxPQUFSLEtBQW9CLElBQXpHLEVBQWdIO0FBQzlHYixFQUFBQSxNQUFNLENBQUNjLE1BQVAsQ0FBY1osT0FBTyxDQUFDVyxPQUF0QixFQUErQlgsT0FBL0I7QUFDQWEsRUFBQUEsTUFBTSxDQUFDYixPQUFQLEdBQWlCQSxPQUFPLENBQUNXLE9BQXpCO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qaW1teWZsaXgvLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L25vcm1hbGl6ZS10cmFpbGluZy1zbGFzaC5qcz85MjVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5yZW1vdmVQYXRoVHJhaWxpbmdTbGFzaCA9IHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoO1xuZXhwb3J0cy5ub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCA9IHZvaWQgMDtcbmZ1bmN0aW9uIHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aC5lbmRzV2l0aCgnLycpICYmIHBhdGggIT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmNvbnN0IG5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoID0gcHJvY2Vzcy5lbnYuX19ORVhUX1RSQUlMSU5HX1NMQVNIID8gKHBhdGgpPT57XG4gICAgaWYgKC9cXC5bXi9dK1xcLz8kLy50ZXN0KHBhdGgpKSB7XG4gICAgICAgIHJldHVybiByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChwYXRoKTtcbiAgICB9IGVsc2UgaWYgKHBhdGguZW5kc1dpdGgoJy8nKSkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGF0aCArICcvJztcbiAgICB9XG59IDogcmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2g7XG5leHBvcnRzLm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoID0gbm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2g7XG5cbmlmICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSB7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vcm1hbGl6ZS10cmFpbGluZy1zbGFzaC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZW1vdmVQYXRoVHJhaWxpbmdTbGFzaCIsIm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoIiwicGF0aCIsImVuZHNXaXRoIiwic2xpY2UiLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX1RSQUlMSU5HX1NMQVNIIiwidGVzdCIsImRlZmF1bHQiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/normalize-trailing-slash.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/request-idle-callback.js":
/*!************************************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/request-idle-callback.js ***!
  \************************************************************************************************************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.cancelIdleCallback = exports.requestIdleCallback = void 0;\n\nconst requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function (cb) {\n  let start = Date.now();\n  return setTimeout(function () {\n    cb({\n      didTimeout: false,\n      timeRemaining: function () {\n        return Math.max(0, 50 - (Date.now() - start));\n      }\n    });\n  }, 1);\n};\n\nexports.requestIdleCallback = requestIdleCallback;\n\nconst cancelIdleCallback = typeof self !== 'undefined' && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function (id) {\n  return clearTimeout(id);\n};\n\nexports.cancelIdleCallback = cancelIdleCallback;\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0FBQ3pDRyxFQUFBQSxLQUFLLEVBQUU7QUFEa0MsQ0FBN0M7QUFHQUQsMEJBQUEsR0FBNkJBLDJCQUFBLEdBQThCLEtBQUssQ0FBaEU7O0FBQ0EsTUFBTUcsbUJBQW1CLEdBQUcsT0FBT0MsSUFBUCxLQUFnQixXQUFoQixJQUErQkEsSUFBSSxDQUFDRCxtQkFBcEMsSUFBMkRDLElBQUksQ0FBQ0QsbUJBQUwsQ0FBeUJFLElBQXpCLENBQThCQyxNQUE5QixDQUEzRCxJQUFvRyxVQUFTQyxFQUFULEVBQWE7QUFDekksTUFBSUMsS0FBSyxHQUFHQyxJQUFJLENBQUNDLEdBQUwsRUFBWjtBQUNBLFNBQU9DLFVBQVUsQ0FBQyxZQUFXO0FBQ3pCSixJQUFBQSxFQUFFLENBQUM7QUFDQ0ssTUFBQUEsVUFBVSxFQUFFLEtBRGI7QUFFQ0MsTUFBQUEsYUFBYSxFQUFFLFlBQVc7QUFDdEIsZUFBT0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZLE1BQU1OLElBQUksQ0FBQ0MsR0FBTCxLQUFhRixLQUFuQixDQUFaLENBQVA7QUFDSDtBQUpGLEtBQUQsQ0FBRjtBQU1ILEdBUGdCLEVBT2QsQ0FQYyxDQUFqQjtBQVFILENBVkQ7O0FBV0FSLDJCQUFBLEdBQThCRyxtQkFBOUI7O0FBQ0EsTUFBTUQsa0JBQWtCLEdBQUcsT0FBT0UsSUFBUCxLQUFnQixXQUFoQixJQUErQkEsSUFBSSxDQUFDRixrQkFBcEMsSUFBMERFLElBQUksQ0FBQ0Ysa0JBQUwsQ0FBd0JHLElBQXhCLENBQTZCQyxNQUE3QixDQUExRCxJQUFrRyxVQUFTVSxFQUFULEVBQWE7QUFDdEksU0FBT0MsWUFBWSxDQUFDRCxFQUFELENBQW5CO0FBQ0gsQ0FGRDs7QUFHQWhCLDBCQUFBLEdBQTZCRSxrQkFBN0I7O0FBRUEsSUFBSSxPQUFPRixPQUFPLENBQUNrQixPQUFmLEtBQTJCLFVBQTNCLElBQTBDLE9BQU9sQixPQUFPLENBQUNrQixPQUFmLEtBQTJCLFFBQTNCLElBQXVDbEIsT0FBTyxDQUFDa0IsT0FBUixLQUFvQixJQUF6RyxFQUFnSDtBQUM5R3BCLEVBQUFBLE1BQU0sQ0FBQ3FCLE1BQVAsQ0FBY25CLE9BQU8sQ0FBQ2tCLE9BQXRCLEVBQStCbEIsT0FBL0I7QUFDQW9CLEVBQUFBLE1BQU0sQ0FBQ3BCLE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ2tCLE9BQXpCO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qaW1teWZsaXgvLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcz85NjhmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jYW5jZWxJZGxlQ2FsbGJhY2sgPSBleHBvcnRzLnJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB2b2lkIDA7XG5jb25zdCByZXF1ZXN0SWRsZUNhbGxiYWNrID0gdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjayAmJiBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2suYmluZCh3aW5kb3cpIHx8IGZ1bmN0aW9uKGNiKSB7XG4gICAgbGV0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgY2Ioe1xuICAgICAgICAgICAgZGlkVGltZW91dDogZmFsc2UsXG4gICAgICAgICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgNTAgLSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sIDEpO1xufTtcbmV4cG9ydHMucmVxdWVzdElkbGVDYWxsYmFjayA9IHJlcXVlc3RJZGxlQ2FsbGJhY2s7XG5jb25zdCBjYW5jZWxJZGxlQ2FsbGJhY2sgPSB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2sgJiYgc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2suYmluZCh3aW5kb3cpIHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgcmV0dXJuIGNsZWFyVGltZW91dChpZCk7XG59O1xuZXhwb3J0cy5jYW5jZWxJZGxlQ2FsbGJhY2sgPSBjYW5jZWxJZGxlQ2FsbGJhY2s7XG5cbmlmICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSB7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3QtaWRsZS1jYWxsYmFjay5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwic2VsZiIsImJpbmQiLCJ3aW5kb3ciLCJjYiIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsInNldFRpbWVvdXQiLCJkaWRUaW1lb3V0IiwidGltZVJlbWFpbmluZyIsIk1hdGgiLCJtYXgiLCJpZCIsImNsZWFyVGltZW91dCIsImRlZmF1bHQiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/request-idle-callback.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/route-loader.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/route-loader.js ***!
  \***************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.markAssetError = markAssetError;\nexports.isAssetError = isAssetError;\nexports.getClientBuildManifest = getClientBuildManifest;\nexports.getMiddlewareManifest = getMiddlewareManifest;\nexports.createRouteLoader = createRouteLoader;\n\nvar _getAssetPathFromRoute = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/utils/get-asset-path-from-route */ \"../shared/lib/router/utils/get-asset-path-from-route\"));\n\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/request-idle-callback.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive\n// considers as \"Good\" time-to-interactive. We must assume something went\n// wrong beyond this point, and then fall-back to a full page transition to\n// show the user something of value.\n\n\nconst MS_MAX_IDLE_DELAY = 3800;\n\nfunction withFuture(key, map, generator) {\n  let entry = map.get(key);\n\n  if (entry) {\n    if ('future' in entry) {\n      return entry.future;\n    }\n\n    return Promise.resolve(entry);\n  }\n\n  let resolver;\n  const prom = new Promise(resolve => {\n    resolver = resolve;\n  });\n  map.set(key, entry = {\n    resolve: resolver,\n    future: prom\n  });\n  return generator ? generator() // eslint-disable-next-line no-sequences\n  .then(value => (resolver(value), value)).catch(err => {\n    map.delete(key);\n    throw err;\n  }) : prom;\n}\n\nfunction hasPrefetch(link) {\n  try {\n    link = document.createElement('link');\n    return (// detect IE11 since it supports prefetch but isn't detected\n      // with relList.support\n      !!window.MSInputMethodContext && !!document.documentMode || link.relList.supports('prefetch')\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\nconst canPrefetch = hasPrefetch();\n\nfunction prefetchViaDom(href, as, link) {\n  return new Promise((res, rej) => {\n    const selector = `\n      link[rel=\"prefetch\"][href^=\"${href}\"],\n      link[rel=\"preload\"][href^=\"${href}\"],\n      script[src^=\"${href}\"]`;\n\n    if (document.querySelector(selector)) {\n      return res();\n    }\n\n    link = document.createElement('link'); // The order of property assignment here is intentional:\n\n    if (as) link.as = as;\n    link.rel = `prefetch`;\n    link.crossOrigin = undefined;\n    link.onload = res;\n    link.onerror = rej; // `href` should always be last:\n\n    link.href = href;\n    document.head.appendChild(link);\n  });\n}\n\nconst ASSET_LOAD_ERROR = Symbol('ASSET_LOAD_ERROR');\n\nfunction markAssetError(err) {\n  return Object.defineProperty(err, ASSET_LOAD_ERROR, {});\n}\n\nfunction isAssetError(err) {\n  return err && ASSET_LOAD_ERROR in err;\n}\n\nfunction appendScript(src, script) {\n  return new Promise((resolve, reject) => {\n    script = document.createElement('script'); // The order of property assignment here is intentional.\n    // 1. Setup success/failure hooks in case the browser synchronously\n    //    executes when `src` is set.\n\n    script.onload = resolve;\n\n    script.onerror = () => reject(markAssetError(new Error(`Failed to load script: ${src}`))); // 2. Configure the cross-origin attribute before setting `src` in case the\n    //    browser begins to fetch.\n\n\n    script.crossOrigin = undefined; // 3. Finally, set the source and inject into the DOM in case the child\n    //    must be appended for fetching to start.\n\n    script.src = src;\n    document.body.appendChild(script);\n  });\n} // We wait for pages to be built in dev before we start the route transition\n// timeout to prevent an un-necessary hard navigation in development.\n\n\nlet devBuildPromise; // Resolve a promise that times out after given amount of milliseconds.\n\nfunction resolvePromiseWithTimeout(p, ms, err) {\n  return new Promise((resolve, reject) => {\n    let cancelled = false;\n    p.then(r => {\n      // Resolved, cancel the timeout\n      cancelled = true;\n      resolve(r);\n    }).catch(reject); // We wrap these checks separately for better dead-code elimination in\n    // production bundles.\n\n    if (true) {\n      (devBuildPromise || Promise.resolve()).then(() => {\n        (0, _requestIdleCallback).requestIdleCallback(() => setTimeout(() => {\n          if (!cancelled) {\n            reject(err);\n          }\n        }, ms));\n      });\n    }\n\n    if (false) {}\n  });\n}\n\nfunction getClientBuildManifest() {\n  if (self.__BUILD_MANIFEST) {\n    return Promise.resolve(self.__BUILD_MANIFEST);\n  }\n\n  const onBuildManifest = new Promise(resolve => {\n    // Mandatory because this is not concurrent safe:\n    const cb = self.__BUILD_MANIFEST_CB;\n\n    self.__BUILD_MANIFEST_CB = () => {\n      resolve(self.__BUILD_MANIFEST);\n      cb && cb();\n    };\n  });\n  return resolvePromiseWithTimeout(onBuildManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client build manifest')));\n}\n\nfunction getMiddlewareManifest() {\n  if (self.__MIDDLEWARE_MANIFEST) {\n    return Promise.resolve(self.__MIDDLEWARE_MANIFEST);\n  }\n\n  const onMiddlewareManifest = new Promise(resolve => {\n    const cb = self.__MIDDLEWARE_MANIFEST_CB;\n\n    self.__MIDDLEWARE_MANIFEST_CB = () => {\n      resolve(self.__MIDDLEWARE_MANIFEST);\n      cb && cb();\n    };\n  });\n  return resolvePromiseWithTimeout(onMiddlewareManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client middleware manifest')));\n}\n\nfunction getFilesForRoute(assetPrefix, route) {\n  if (true) {\n    return Promise.resolve({\n      scripts: [assetPrefix + '/_next/static/chunks/pages' + encodeURI((0, _getAssetPathFromRoute).default(route, '.js'))],\n      // Styles are handled by `style-loader` in development:\n      css: []\n    });\n  }\n\n  return getClientBuildManifest().then(manifest => {\n    if (!(route in manifest)) {\n      throw markAssetError(new Error(`Failed to lookup route: ${route}`));\n    }\n\n    const allFiles = manifest[route].map(entry => assetPrefix + '/_next/' + encodeURI(entry));\n    return {\n      scripts: allFiles.filter(v => v.endsWith('.js')),\n      css: allFiles.filter(v => v.endsWith('.css'))\n    };\n  });\n}\n\nfunction createRouteLoader(assetPrefix) {\n  const entrypoints = new Map();\n  const loadedScripts = new Map();\n  const styleSheets = new Map();\n  const routes = new Map();\n\n  function maybeExecuteScript(src) {\n    // With HMR we might need to \"reload\" scripts when they are\n    // disposed and readded. Executing scripts twice has no functional\n    // differences\n    if (false) {} else {\n      return appendScript(src);\n    }\n  }\n\n  function fetchStyleSheet(href) {\n    let prom = styleSheets.get(href);\n\n    if (prom) {\n      return prom;\n    }\n\n    styleSheets.set(href, prom = fetch(href).then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to load stylesheet: ${href}`);\n      }\n\n      return res.text().then(text => ({\n        href: href,\n        content: text\n      }));\n    }).catch(err => {\n      throw markAssetError(err);\n    }));\n    return prom;\n  }\n\n  return {\n    whenEntrypoint(route) {\n      return withFuture(route, entrypoints);\n    },\n\n    onEntrypoint(route, execute) {\n      (execute ? Promise.resolve().then(() => execute()).then(exports => ({\n        component: exports && exports.default || exports,\n        exports: exports\n      }), err => ({\n        error: err\n      })) : Promise.resolve(undefined)).then(input => {\n        const old = entrypoints.get(route);\n\n        if (old && 'resolve' in old) {\n          if (input) {\n            entrypoints.set(route, input);\n            old.resolve(input);\n          }\n        } else {\n          if (input) {\n            entrypoints.set(route, input);\n          } else {\n            entrypoints.delete(route);\n          } // when this entrypoint has been resolved before\n          // the route is outdated and we want to invalidate\n          // this cache entry\n\n\n          routes.delete(route);\n        }\n      });\n    },\n\n    loadRoute(route, prefetch) {\n      return withFuture(route, routes, () => {\n        let devBuildPromiseResolve;\n\n        if (true) {\n          devBuildPromise = new Promise(resolve => {\n            devBuildPromiseResolve = resolve;\n          });\n        }\n\n        return resolvePromiseWithTimeout(getFilesForRoute(assetPrefix, route).then(({\n          scripts,\n          css\n        }) => {\n          return Promise.all([entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)), Promise.all(css.map(fetchStyleSheet))]);\n        }).then(res => {\n          return this.whenEntrypoint(route).then(entrypoint => ({\n            entrypoint,\n            styles: res[1]\n          }));\n        }), MS_MAX_IDLE_DELAY, markAssetError(new Error(`Route did not complete loading: ${route}`))).then(({\n          entrypoint,\n          styles\n        }) => {\n          const res = Object.assign({\n            styles: styles\n          }, entrypoint);\n          return 'error' in entrypoint ? entrypoint : res;\n        }).catch(err => {\n          if (prefetch) {\n            // we don't want to cache errors during prefetch\n            throw err;\n          }\n\n          return {\n            error: err\n          };\n        }).finally(() => {\n          return devBuildPromiseResolve === null || devBuildPromiseResolve === void 0 ? void 0 : devBuildPromiseResolve();\n        });\n      });\n    },\n\n    prefetch(route) {\n      // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118\n      // License: Apache 2.0\n      let cn;\n\n      if (cn = navigator.connection) {\n        // Don't prefetch if using 2G or if Save-Data is enabled.\n        if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();\n      }\n\n      return getFilesForRoute(assetPrefix, route).then(output => Promise.all(canPrefetch ? output.scripts.map(script => prefetchViaDom(script, 'script')) : [])).then(() => {\n        (0, _requestIdleCallback).requestIdleCallback(() => this.loadRoute(route, true).catch(() => {}));\n      }).catch( // swallow prefetch errors\n      () => {});\n    }\n\n  };\n}\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/route-loader.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/router.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/router.js ***!
  \*********************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"Router\", ({\n  enumerable: true,\n  get: function () {\n    return _router.default;\n  }\n}));\nObject.defineProperty(exports, \"withRouter\", ({\n  enumerable: true,\n  get: function () {\n    return _withRouter.default;\n  }\n}));\nexports.useRouter = useRouter;\nexports.createRouter = createRouter;\nexports.makePublicRouterInstance = makePublicRouterInstance;\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/router */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/shared/lib/router/router.js\"));\n\nvar _routerContext = __webpack_require__(/*! ../shared/lib/router-context */ \"../shared/lib/router-context\");\n\nvar _isError = _interopRequireDefault(__webpack_require__(/*! ../lib/is-error */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/is-error.js\"));\n\nvar _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/with-router.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst singletonRouter = {\n  router: null,\n  readyCallbacks: [],\n\n  ready(cb) {\n    if (this.router) return cb();\n\n    if (false) {}\n  }\n\n}; // Create public properties and methods of the router in the singletonRouter\n\nconst urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath', 'locale', 'locales', 'defaultLocale', 'isReady', 'isPreview', 'isLocaleDomain', 'domainLocales'];\nconst routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];\nconst coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it\n\nObject.defineProperty(singletonRouter, 'events', {\n  get() {\n    return _router.default.events;\n  }\n\n});\nurlPropertyFields.forEach(field => {\n  // Here we need to use Object.defineProperty because we need to return\n  // the property assigned to the actual router\n  // The value might get changed as we change routes and this is the\n  // proper way to access it\n  Object.defineProperty(singletonRouter, field, {\n    get() {\n      const router = getRouter();\n      return router[field];\n    }\n\n  });\n});\ncoreMethodFields.forEach(field => {\n  singletonRouter[field] = (...args) => {\n    const router = getRouter();\n    return router[field](...args);\n  };\n});\nrouterEvents.forEach(event => {\n  singletonRouter.ready(() => {\n    _router.default.events.on(event, (...args) => {\n      const eventField = `on${event.charAt(0).toUpperCase()}${event.substring(1)}`;\n      const _singletonRouter = singletonRouter;\n\n      if (_singletonRouter[eventField]) {\n        try {\n          _singletonRouter[eventField](...args);\n        } catch (err) {\n          console.error(`Error when running the Router event: ${eventField}`);\n          console.error((0, _isError).default(err) ? `${err.message}\\n${err.stack}` : err + '');\n        }\n      }\n    });\n  });\n});\n\nfunction getRouter() {\n  if (!singletonRouter.router) {\n    const message = 'No router instance found.\\n' + 'You should only use \"next/router\" on the client side of your app.\\n';\n    throw new Error(message);\n  }\n\n  return singletonRouter.router;\n}\n\nvar _default = singletonRouter;\nexports[\"default\"] = _default;\n\nfunction useRouter() {\n  return _react.default.useContext(_routerContext.RouterContext);\n}\n\nfunction createRouter(...args) {\n  singletonRouter.router = new _router.default(...args);\n  singletonRouter.readyCallbacks.forEach(cb => cb());\n  singletonRouter.readyCallbacks = [];\n  return singletonRouter.router;\n}\n\nfunction makePublicRouterInstance(router) {\n  const scopedRouter = router;\n  const instance = {};\n\n  for (const property of urlPropertyFields) {\n    if (typeof scopedRouter[property] === 'object') {\n      instance[property] = Object.assign(Array.isArray(scopedRouter[property]) ? [] : {}, scopedRouter[property]) // makes sure query is not stateful\n      ;\n      continue;\n    }\n\n    instance[property] = scopedRouter[property];\n  } // Events is a static property on the router, the router doesn't have to be initialized to use it\n\n\n  instance.events = _router.default.events;\n  coreMethodFields.forEach(field => {\n    instance[field] = (...args) => {\n      return scopedRouter[field](...args);\n    };\n  });\n  return instance;\n}\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/router.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/use-intersection.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/use-intersection.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.useIntersection = useIntersection;\n\nvar _react = __webpack_require__(/*! react */ \"react\");\n\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/request-idle-callback.js\");\n\nconst hasIntersectionObserver = typeof IntersectionObserver !== 'undefined';\n\nfunction useIntersection({\n  rootRef,\n  rootMargin,\n  disabled\n}) {\n  const isDisabled = disabled || !hasIntersectionObserver;\n  const unobserve = (0, _react).useRef();\n  const [visible, setVisible] = (0, _react).useState(false);\n  const [root, setRoot] = (0, _react).useState(rootRef ? rootRef.current : null);\n  const setRef = (0, _react).useCallback(el => {\n    if (unobserve.current) {\n      unobserve.current();\n      unobserve.current = undefined;\n    }\n\n    if (isDisabled || visible) return;\n\n    if (el && el.tagName) {\n      unobserve.current = observe(el, isVisible => isVisible && setVisible(isVisible), {\n        root,\n        rootMargin\n      });\n    }\n  }, [isDisabled, root, rootMargin, visible]);\n  const resetVisible = (0, _react).useCallback(() => {\n    setVisible(false);\n  }, []);\n  (0, _react).useEffect(() => {\n    if (!hasIntersectionObserver) {\n      if (!visible) {\n        const idleCallback = (0, _requestIdleCallback).requestIdleCallback(() => setVisible(true));\n        return () => (0, _requestIdleCallback).cancelIdleCallback(idleCallback);\n      }\n    }\n  }, [visible]);\n  (0, _react).useEffect(() => {\n    if (rootRef) setRoot(rootRef.current);\n  }, [rootRef]);\n  return [setRef, visible, resetVisible];\n}\n\nfunction observe(element, callback, options) {\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options);\n  elements.set(element, callback);\n  observer.observe(element);\n  return function unobserve() {\n    elements.delete(element);\n    observer.unobserve(element); // Destroy observer when there's nothing left to watch:\n\n    if (elements.size === 0) {\n      observer.disconnect();\n      observers.delete(id);\n      let index = idList.findIndex(obj => obj.root === id.root && obj.margin === id.margin);\n\n      if (index > -1) {\n        idList.splice(index, 1);\n      }\n    }\n  };\n}\n\nconst observers = new Map();\nconst idList = [];\n\nfunction createObserver(options) {\n  const id = {\n    root: options.root || null,\n    margin: options.rootMargin || ''\n  };\n  let existing = idList.find(obj => obj.root === id.root && obj.margin === id.margin);\n  let instance;\n\n  if (existing) {\n    instance = observers.get(existing);\n  } else {\n    instance = observers.get(id);\n    idList.push(id);\n  }\n\n  if (instance) {\n    return instance;\n  }\n\n  const elements = new Map();\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      const callback = elements.get(entry.target);\n      const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n\n      if (callback && isVisible) {\n        callback(isVisible);\n      }\n    });\n  }, options);\n  observers.set(id, instance = {\n    id,\n    observer,\n    elements\n  });\n  return instance;\n}\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/use-intersection.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/with-router.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/with-router.js ***!
  \**************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = withRouter;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = __webpack_require__(/*! ./router */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/router.js\");\n\nfunction withRouter(ComposedComponent) {\n  function WithRouterWrapper(props) {\n    return /*#__PURE__*/_react.default.createElement(ComposedComponent, Object.assign({\n      router: (0, _router).useRouter()\n    }, props));\n  }\n\n  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps;\n  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;\n\n  if (true) {\n    const name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';\n    WithRouterWrapper.displayName = `withRouter(${name})`;\n  }\n\n  return WithRouterWrapper;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3dpdGgtcm91dGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7QUFDekNHLEVBQUFBLEtBQUssRUFBRTtBQURrQyxDQUE3QztBQUdBRCxrQkFBQSxHQUFrQkcsVUFBbEI7O0FBQ0EsSUFBSUMsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyxvQkFBRCxDQUFSLENBQW5DOztBQUNBLElBQUlDLE9BQU8sR0FBR0QsbUJBQU8sQ0FBQyx1SkFBRCxDQUFyQjs7QUFDQSxTQUFTSCxVQUFULENBQW9CSyxpQkFBcEIsRUFBdUM7QUFDbkMsV0FBU0MsaUJBQVQsQ0FBMkJDLEtBQTNCLEVBQWtDO0FBQzlCLFdBQU8sYUFBY04sTUFBTSxDQUFDRixPQUFQLENBQWVTLGFBQWYsQ0FBNkJILGlCQUE3QixFQUFnRFYsTUFBTSxDQUFDYyxNQUFQLENBQWM7QUFDL0VDLE1BQUFBLE1BQU0sRUFBRSxDQUFDLEdBQUdOLE9BQUosRUFBYU8sU0FBYjtBQUR1RSxLQUFkLEVBRWxFSixLQUZrRSxDQUFoRCxDQUFyQjtBQUdIOztBQUNERCxFQUFBQSxpQkFBaUIsQ0FBQ00sZUFBbEIsR0FBb0NQLGlCQUFpQixDQUFDTyxlQUF0RDtBQUNBTixFQUFBQSxpQkFBaUIsQ0FBQ08sbUJBQWxCLEdBQXdDUixpQkFBaUIsQ0FBQ1EsbUJBQTFEOztBQUNBLFlBQTJDO0FBQ3ZDLFVBQU1DLElBQUksR0FBR1QsaUJBQWlCLENBQUNVLFdBQWxCLElBQWlDVixpQkFBaUIsQ0FBQ1MsSUFBbkQsSUFBMkQsU0FBeEU7QUFDQVIsSUFBQUEsaUJBQWlCLENBQUNTLFdBQWxCLEdBQWlDLGNBQWFELElBQUssR0FBbkQ7QUFDSDs7QUFDRCxTQUFPUixpQkFBUDtBQUNIOztBQUNELFNBQVNKLHNCQUFULENBQWdDYyxHQUFoQyxFQUFxQztBQUNqQyxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFDakNqQixJQUFBQSxPQUFPLEVBQUVpQjtBQUR3QixHQUFyQztBQUdIOztBQUVELElBQUksT0FBT25CLE9BQU8sQ0FBQ0UsT0FBZixLQUEyQixVQUEzQixJQUEwQyxPQUFPRixPQUFPLENBQUNFLE9BQWYsS0FBMkIsUUFBM0IsSUFBdUNGLE9BQU8sQ0FBQ0UsT0FBUixLQUFvQixJQUF6RyxFQUFnSDtBQUM5R0osRUFBQUEsTUFBTSxDQUFDYyxNQUFQLENBQWNaLE9BQU8sQ0FBQ0UsT0FBdEIsRUFBK0JGLE9BQS9CO0FBQ0FxQixFQUFBQSxNQUFNLENBQUNyQixPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qaW1teWZsaXgvLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3dpdGgtcm91dGVyLmpzP2M3YjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB3aXRoUm91dGVyO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfcm91dGVyID0gcmVxdWlyZShcIi4vcm91dGVyXCIpO1xuZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb3NlZENvbXBvbmVudCkge1xuICAgIGZ1bmN0aW9uIFdpdGhSb3V0ZXJXcmFwcGVyKHByb3BzKSB7XG4gICAgICAgIHJldHVybigvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9zZWRDb21wb25lbnQsIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgcm91dGVyOiAoMCwgX3JvdXRlcikudXNlUm91dGVyKClcbiAgICAgICAgfSwgcHJvcHMpKSk7XG4gICAgfVxuICAgIFdpdGhSb3V0ZXJXcmFwcGVyLmdldEluaXRpYWxQcm9wcyA9IENvbXBvc2VkQ29tcG9uZW50LmdldEluaXRpYWxQcm9wcztcbiAgICBXaXRoUm91dGVyV3JhcHBlci5vcmlnR2V0SW5pdGlhbFByb3BzID0gQ29tcG9zZWRDb21wb25lbnQub3JpZ0dldEluaXRpYWxQcm9wcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zdCBuYW1lID0gQ29tcG9zZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9zZWRDb21wb25lbnQubmFtZSB8fCAnVW5rbm93bic7XG4gICAgICAgIFdpdGhSb3V0ZXJXcmFwcGVyLmRpc3BsYXlOYW1lID0gYHdpdGhSb3V0ZXIoJHtuYW1lfSlgO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aFJvdXRlcldyYXBwZXI7XG59XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG59XG5cbmlmICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSB7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGgtcm91dGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJ3aXRoUm91dGVyIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcm91dGVyIiwiQ29tcG9zZWRDb21wb25lbnQiLCJXaXRoUm91dGVyV3JhcHBlciIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsImFzc2lnbiIsInJvdXRlciIsInVzZVJvdXRlciIsImdldEluaXRpYWxQcm9wcyIsIm9yaWdHZXRJbml0aWFsUHJvcHMiLCJuYW1lIiwiZGlzcGxheU5hbWUiLCJvYmoiLCJfX2VzTW9kdWxlIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/with-router.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/shared/lib/router/router.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/shared/lib/router/router.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getDomainLocale = getDomainLocale;\nexports.addLocale = addLocale;\nexports.delLocale = delLocale;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports[\"default\"] = void 0;\n\nvar _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/normalize-trailing-slash.js\");\n\nvar _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/route-loader.js\");\n\nvar _isError = _interopRequireWildcard(__webpack_require__(/*! ../../../lib/is-error */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/is-error.js\"));\n\nvar _denormalizePagePath = __webpack_require__(/*! ../../../server/denormalize-page-path */ \"../../../server/denormalize-page-path\");\n\nvar _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ \"../i18n/normalize-locale-path\");\n\nvar _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ \"../mitt\"));\n\nvar _utils = __webpack_require__(/*! ../utils */ \"../utils\");\n\nvar _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ \"./utils/is-dynamic\");\n\nvar _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ \"./utils/parse-relative-url\");\n\nvar _querystring = __webpack_require__(/*! ./utils/querystring */ \"./utils/querystring\");\n\nvar _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ \"./utils/resolve-rewrites\"));\n\nvar _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ \"./utils/route-matcher\");\n\nvar _routeRegex = __webpack_require__(/*! ./utils/route-regex */ \"./utils/route-regex\");\n\nvar _getMiddlewareRegex = __webpack_require__(/*! ./utils/get-middleware-regex */ \"./utils/get-middleware-regex\");\n\nvar _formatUrl = __webpack_require__(/*! ./utils/format-url */ \"./utils/format-url\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nlet detectDomainLocale;\n\nif (false) {}\n\nconst basePath =  false || '';\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\n\nfunction addPathPrefix(path, prefix) {\n  if (!path.startsWith('/') || !prefix) {\n    return path;\n  }\n\n  const pathname = pathNoQueryHash(path);\n  return (0, _normalizeTrailingSlash).normalizePathTrailingSlash(`${prefix}${pathname}`) + path.slice(pathname.length);\n}\n\nfunction hasPathPrefix(path, prefix) {\n  path = pathNoQueryHash(path);\n  return path === prefix || path.startsWith(prefix + '/');\n}\n\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n  if (false) {} else {\n    return false;\n  }\n}\n\nfunction addLocale(path, locale, defaultLocale) {\n  if (false) {}\n\n  return path;\n}\n\nfunction delLocale(path, locale) {\n  if (false) {}\n\n  return path;\n}\n\nfunction pathNoQueryHash(path) {\n  const queryIndex = path.indexOf('?');\n  const hashIndex = path.indexOf('#');\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);\n  }\n\n  return path;\n}\n\nfunction hasBasePath(path) {\n  return hasPathPrefix(path, basePath);\n}\n\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath);\n}\n\nfunction delBasePath(path) {\n  path = path.slice(basePath.length);\n  if (!path.startsWith('/')) path = `/${path}`;\n  return path;\n}\n\nfunction isLocalURL(url) {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#') || url.startsWith('?')) return true;\n\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = (0, _utils).getLocationOrigin();\n    const resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction interpolateAs(route, asPathname, query) {\n  let interpolatedRoute = '';\n  const dynamicRegex = (0, _routeRegex).getRouteRegex(route);\n  const dynamicGroups = dynamicRegex.groups;\n  const dynamicMatches = // Try to match the dynamic route against the asPath\n  (asPathname !== route ? (0, _routeMatcher).getRouteMatcher(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href\n  // TODO: should this take priority; also need to change in the router.\n  query;\n  interpolatedRoute = route;\n  const params = Object.keys(dynamicGroups);\n\n  if (!params.every(param => {\n    let value = dynamicMatches[param] || '';\n    const {\n      repeat,\n      optional\n    } = dynamicGroups[param]; // support single-level catch-all\n    // TODO: more robust handling for user-error (passing `/`)\n\n    let replaced = `[${repeat ? '...' : ''}${param}]`;\n\n    if (optional) {\n      replaced = `${!value ? '/' : ''}[${replaced}]`;\n    }\n\n    if (repeat && !Array.isArray(value)) value = [value];\n    return (optional || param in dynamicMatches) && (interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just\n    // path delimiter escaped since they are being inserted\n    // into the URL and we expect URL encoded segments\n    // when parsing dynamic route params\n    segment => encodeURIComponent(segment)).join('/') : encodeURIComponent(value)) || '/');\n  })) {\n    interpolatedRoute = '' // did not satisfy all requirements\n    ; // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n\n  return {\n    params,\n    result: interpolatedRoute\n  };\n}\n\nfunction omitParmsFromQuery(query, params) {\n  const filteredQuery = {};\n  Object.keys(query).forEach(key => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key];\n    }\n  });\n  return filteredQuery;\n}\n\nfunction resolveHref(router, href, resolveAs) {\n  // we use a dummy base url for relative urls\n  let base;\n  let urlAsString = typeof href === 'string' ? href : (0, _formatUrl).formatWithValidation(href); // repeated slashes and backslashes in the URL are considered\n  // invalid and will never match a Next.js page/file\n\n  const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//);\n  const urlAsStringNoProto = urlProtoMatch ? urlAsString.slice(urlProtoMatch[0].length) : urlAsString;\n  const urlParts = urlAsStringNoProto.split('?');\n\n  if ((urlParts[0] || '').match(/(\\/\\/|\\\\)/)) {\n    console.error(`Invalid href passed to next/router: ${urlAsString}, repeated forward-slashes (//) or backslashes \\\\ are not valid in the href`);\n    const normalizedUrl = (0, _utils).normalizeRepeatedSlashes(urlAsStringNoProto);\n    urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl;\n  } // Return because it cannot be routed by the Next.js router\n\n\n  if (!isLocalURL(urlAsString)) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n\n  try {\n    base = new URL(urlAsString.startsWith('#') ? router.asPath : router.pathname, 'http://n');\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n');\n  }\n\n  try {\n    const finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash).normalizePathTrailingSlash(finalUrl.pathname);\n    let interpolatedAs = '';\n\n    if ((0, _isDynamic).isDynamicRoute(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n      const query = (0, _querystring).searchParamsToUrlQuery(finalUrl.searchParams);\n      const {\n        result,\n        params\n      } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);\n\n      if (result) {\n        interpolatedAs = (0, _formatUrl).formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params)\n        });\n      }\n    } // if the origin didn't change, it means we received a relative href\n\n\n    const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;\n  } catch (_1) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n}\n\nfunction stripOrigin(url) {\n  const origin = (0, _utils).getLocationOrigin();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = resolveHref(router, url, true);\n  const origin = (0, _utils).getLocationOrigin();\n  const hrefHadOrigin = resolvedHref.startsWith(origin);\n  const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);\n  const preparedAs = as ? stripOrigin(resolveHref(router, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(pathname, pages) {\n  const cleanPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _denormalizePagePath).denormalizePagePath(pathname));\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(page => {\n      if ((0, _isDynamic).isDynamicRoute(page) && (0, _routeRegex).getRouteRegex(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n\n  return (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n}\n\nconst manualScrollRestoration =  false && 0;\nconst SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');\n\nfunction fetchRetry(url, attempts, opts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(res => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1, opts);\n      }\n\n      if (res.status === 404) {\n        return res.json().then(data => {\n          if (data.notFound) {\n            return {\n              notFound: SSG_DATA_NOT_FOUND\n            };\n          }\n\n          throw new Error(`Failed to load static props`);\n        });\n      }\n\n      throw new Error(`Failed to load static props`);\n    }\n\n    return opts.text ? res.text() : res.json();\n  });\n}\n\nfunction fetchNextData(dataHref, isServerRender, text, inflightCache, persistCache) {\n  const {\n    href: cacheKey\n  } = new URL(dataHref, window.location.href);\n\n  if (inflightCache[cacheKey] !== undefined) {\n    return inflightCache[cacheKey];\n  }\n\n  return inflightCache[cacheKey] = fetchRetry(dataHref, isServerRender ? 3 : 1, {\n    text\n  }).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      (0, _routeLoader).markAssetError(err);\n    }\n\n    throw err;\n  }).then(data => {\n    if (!persistCache || true) {\n      delete inflightCache[cacheKey];\n    }\n\n    return data;\n  }).catch(err => {\n    delete inflightCache[cacheKey];\n    throw err;\n  });\n}\n\nclass Router {\n  constructor(pathname1, query1, as1, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription,\n    isFallback,\n    locale,\n    locales,\n    defaultLocale,\n    domainLocales,\n    isPreview,\n    isRsc\n  }) {\n    // Static Data Cache\n    this.sdc = {}; // In-flight Server Data Requests, for deduping\n\n    this.sdr = {}; // In-flight middleware preflight requests\n\n    this.sde = {};\n    this._idx = 0;\n\n    this.onPopState = e => {\n      const state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', (0, _formatUrl).formatWithValidation({\n          pathname: addBasePath(pathname),\n          query\n        }), (0, _utils).getURL());\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      }\n\n      let forcedScroll;\n      const {\n        url,\n        as,\n        options,\n        idx\n      } = state;\n\n      if (false) {}\n\n      this._idx = idx;\n      const {\n        pathname\n      } = (0, _parseRelativeUrl).parseRelativeUrl(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n      if (this.isSsr && as === addBasePath(this.asPath) && pathname === addBasePath(this.pathname)) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n\n      this.change('replaceState', url, as, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname1); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname1 !== '/_error') {\n      this.components[route] = {\n        Component,\n        initial: true,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n        __N_RSC: !!isRsc\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: []\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    const autoExportDynamic = (0, _isDynamic).isDynamicRoute(pathname1) && self.__NEXT_DATA__.autoExport;\n\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isLocaleDomain = false;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !false);\n\n    if (false) {}\n\n    this.state = {\n      route,\n      pathname: pathname1,\n      query: query1,\n      asPath: autoExportDynamic ? pathname1 : as1,\n      isPreview: !!isPreview,\n      locale:  false ? 0 : undefined,\n      isFallback\n    };\n\n    if (false) {}\n  }\n\n  reload() {\n    window.location.reload();\n  }\n  /**\n  * Go back in history\n  */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n  * Performs a `pushState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  push(url, as, options = {}) {\n    if (false) {}\n\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('pushState', url, as, options);\n  }\n  /**\n  * Performs a `replaceState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  replace(url, as, options = {}) {\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('replaceState', url, as, options);\n  }\n\n  async change(method, url, as, options, forcedScroll) {\n    if (!isLocalURL(url)) {\n      window.location.href = url;\n      return false;\n    }\n\n    const shouldResolveHref = options._h || options._shouldResolveHref || pathNoQueryHash(url) === pathNoQueryHash(as);\n\n    const nextState = _objectSpread({}, this.state); // for static pages with query params in the URL we delay\n    // marking the router ready until after the query is updated\n\n\n    if (options._h) {\n      this.isReady = true;\n    }\n\n    const prevLocale = nextState.locale;\n\n    if (false) { var ref; }\n\n    if (!options._h) {\n      this.isSsr = false;\n    } // marking route changes as a navigation start entry\n\n\n    if (_utils.ST) {\n      performance.mark('routeChange');\n    }\n\n    const {\n      shallow = false,\n      scroll = true\n    } = options;\n    const routeProps = {\n      shallow\n    };\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute, routeProps);\n    }\n\n    as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));\n    const cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, nextState.locale);\n    this._inFlightRoute = as;\n    let localeChange = prevLocale !== nextState.locale; // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n\n    if (!options._h && this.onlyAHashChange(cleanedAs) && !localeChange) {\n      nextState.asPath = cleanedAs;\n      Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n      this.changeState(method, url, as, _objectSpread(_objectSpread({}, options), {}, {\n        scroll: false\n      }));\n\n      if (scroll) {\n        this.scrollToHash(cleanedAs);\n      }\n\n      this.set(nextState, this.components[nextState.route], null);\n      Router.events.emit('hashChangeComplete', as, routeProps);\n      return true;\n    }\n\n    let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n    let {\n      pathname,\n      query\n    } = parsed; // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n\n    let pages, rewrites;\n\n    try {\n      [pages, {\n        __rewrites: rewrites\n      }] = await Promise.all([this.pageLoader.getPageList(), (0, _routeLoader).getClientBuildManifest(), this.pageLoader.getMiddlewareList()]);\n    } catch (err) {\n      // If we fail to resolve the page list or client-build manifest, we must\n      // do a server-side transition:\n      window.location.href = as;\n      return false;\n    } // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n\n\n    if (!this.urlIsNew(cleanedAs) && !localeChange) {\n      method = 'replaceState';\n    } // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n\n\n    let resolvedAs = as; // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n\n    pathname = pathname ? (0, _normalizeTrailingSlash).removePathTrailingSlash(delBasePath(pathname)) : pathname;\n\n    if (shouldResolveHref && pathname !== '/_error') {\n      options._shouldResolveHref = true;\n\n      if (false) {} else {\n        parsed.pathname = resolveDynamicRoute(pathname, pages);\n\n        if (parsed.pathname !== pathname) {\n          pathname = parsed.pathname;\n          parsed.pathname = addBasePath(pathname);\n          url = (0, _formatUrl).formatWithValidation(parsed);\n        }\n      }\n    }\n\n    if (!isLocalURL(as)) {\n      if (true) {\n        throw new Error(`Invalid href: \"${url}\" and as: \"${as}\", received relative href and external as` + `\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`);\n      }\n\n      window.location.href = as;\n      return false;\n    }\n\n    resolvedAs = delLocale(delBasePath(resolvedAs), nextState.locale);\n    /**\n    * If the route update was triggered for client-side hydration and\n    * the rendered route is not dynamic do not check the preflight\n    * request as it is not necessary.\n    */\n\n    if ((!options.shallow || options._h === 1) && (options._h !== 1 || (0, _isDynamic).isDynamicRoute((0, _normalizeTrailingSlash).removePathTrailingSlash(pathname)))) {\n      const effect = await this._preflightRequest({\n        as,\n        cache: false,\n        pages,\n        pathname,\n        query,\n        locale: nextState.locale,\n        isPreview: nextState.isPreview\n      });\n\n      if (effect.type === 'rewrite') {\n        query = _objectSpread(_objectSpread({}, query), effect.parsedAs.query);\n        resolvedAs = effect.asPath;\n        pathname = effect.resolvedHref;\n        parsed.pathname = effect.resolvedHref;\n        url = (0, _formatUrl).formatWithValidation(parsed);\n      } else if (effect.type === 'redirect' && effect.newAs) {\n        return this.change(method, effect.newUrl, effect.newAs, options);\n      } else if (effect.type === 'redirect' && effect.destination) {\n        window.location.href = effect.destination;\n        return new Promise(() => {});\n      } else if (effect.type === 'refresh' && as !== window.location.pathname) {\n        window.location.href = as;\n        return new Promise(() => {});\n      }\n    }\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n\n    if ((0, _isDynamic).isDynamicRoute(route)) {\n      const parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(resolvedAs);\n      const asPathname = parsedAs.pathname;\n      const routeRegex = (0, _routeRegex).getRouteRegex(route);\n      const routeMatch = (0, _routeMatcher).getRouteMatcher(routeRegex)(asPathname);\n      const shouldInterpolate = route === asPathname;\n      const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};\n\n      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n\n        if (missingParams.length > 0) {\n          if (true) {\n            console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \\`as\\` and \\`href\\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n          }\n\n          throw new Error((shouldInterpolate ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) + `Read more: https://nextjs.org/docs/messages/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);\n        }\n      } else if (shouldInterpolate) {\n        as = (0, _formatUrl).formatWithValidation(Object.assign({}, parsedAs, {\n          pathname: interpolatedAs.result,\n          query: omitParmsFromQuery(query, interpolatedAs.params)\n        }));\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch);\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as, routeProps);\n\n    try {\n      var ref1, ref2;\n      let routeInfo = await this.getRouteInfo(route, pathname, query, as, resolvedAs, routeProps, nextState.locale, nextState.isPreview);\n      let {\n        error,\n        props,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo; // handle redirect on client-transition\n\n      if ((__N_SSG || __N_SSP) && props) {\n        if (props.pageProps && props.pageProps.__N_REDIRECT) {\n          const destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n          // client-navigation if it is falling back to hard navigation if\n          // it's not\n\n          if (destination.startsWith('/') && props.pageProps.__N_REDIRECT_BASE_PATH !== false) {\n            const parsedHref = (0, _parseRelativeUrl).parseRelativeUrl(destination);\n            parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n            const {\n              url: newUrl,\n              as: newAs\n            } = prepareUrlAs(this, destination, destination);\n            return this.change(method, newUrl, newAs, options);\n          }\n\n          window.location.href = destination;\n          return new Promise(() => {});\n        }\n\n        nextState.isPreview = !!props.__N_PREVIEW; // handle SSG data 404\n\n        if (props.notFound === SSG_DATA_NOT_FOUND) {\n          let notFoundRoute;\n\n          try {\n            await this.fetchComponent('/404');\n            notFoundRoute = '/404';\n          } catch (_) {\n            notFoundRoute = '/_error';\n          }\n\n          routeInfo = await this.getRouteInfo(notFoundRoute, notFoundRoute, query, as, resolvedAs, {\n            shallow: false\n          }, nextState.locale, nextState.isPreview);\n        }\n      }\n\n      Router.events.emit('beforeHistoryChange', as, routeProps);\n      this.changeState(method, url, as, options);\n\n      if (options._h && pathname === '/_error' && ((ref1 = self.__NEXT_DATA__.props) === null || ref1 === void 0 ? void 0 : (ref2 = ref1.pageProps) === null || ref2 === void 0 ? void 0 : ref2.statusCode) === 500 && (props === null || props === void 0 ? void 0 : props.pageProps)) {\n        // ensure statusCode is still correct for static 500 page\n        // when updating query information\n        props.pageProps.statusCode = 500;\n      } // shallow routing is only allowed for same page URL changes.\n\n\n      const isValidShallowRoute = options.shallow && nextState.route === route;\n\n      var _scroll;\n\n      const shouldScroll = (_scroll = options.scroll) !== null && _scroll !== void 0 ? _scroll : !isValidShallowRoute;\n      const resetScroll = shouldScroll ? {\n        x: 0,\n        y: 0\n      } : null;\n      await this.set(_objectSpread(_objectSpread({}, nextState), {}, {\n        route,\n        pathname,\n        query,\n        asPath: cleanedAs,\n        isFallback: false\n      }), routeInfo, forcedScroll !== null && forcedScroll !== void 0 ? forcedScroll : resetScroll).catch(e => {\n        if (e.cancelled) error = error || e;else throw e;\n      });\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs, routeProps);\n        throw error;\n      }\n\n      if (false) {}\n\n      Router.events.emit('routeChangeComplete', as, routeProps);\n      return true;\n    } catch (err1) {\n      if ((0, _isError).default(err1) && err1.cancelled) {\n        return false;\n      }\n\n      throw err1;\n    }\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || (0, _utils).getURL() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true,\n        idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1\n      }, // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n\n  async handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err;\n    }\n\n    if ((0, _routeLoader).isAssetError(err) || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n      // So, doing a hard reload is the proper way to deal with this.\n\n      window.location.href = as; // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n\n      throw buildCancellationError();\n    }\n\n    try {\n      let Component;\n      let styleSheets;\n      let props;\n\n      if (typeof Component === 'undefined' || typeof styleSheets === 'undefined') {\n        ({\n          page: Component,\n          styleSheets\n        } = await this.fetchComponent('/_error'));\n      }\n\n      const routeInfo = {\n        props,\n        Component,\n        styleSheets,\n        err,\n        error: err\n      };\n\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component, {\n            err,\n            pathname,\n            query\n          });\n        } catch (gipErr) {\n          console.error('Error in error page `getInitialProps`: ', gipErr);\n          routeInfo.props = {};\n        }\n      }\n\n      return routeInfo;\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError((0, _isError).default(routeInfoErr) ? routeInfoErr : new Error(routeInfoErr + ''), pathname, query, as, routeProps, true);\n    }\n  }\n\n  async getRouteInfo(route, pathname, query, as, resolvedAs, routeProps, locale, isPreview) {\n    try {\n      const existingRouteInfo = this.components[route];\n\n      if (routeProps.shallow && existingRouteInfo && this.route === route) {\n        return existingRouteInfo;\n      }\n\n      let cachedRouteInfo = undefined; // can only use non-initial route info\n      // cannot reuse route info in development since it can change after HMR\n\n      if (false) {}\n\n      const routeInfo = cachedRouteInfo || (await this.fetchComponent(route).then(res => ({\n        Component: res.page,\n        styleSheets: res.styleSheets,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP,\n        __N_RSC: !!res.mod.__next_rsc__\n      })));\n      const {\n        Component,\n        __N_SSG,\n        __N_SSP,\n        __N_RSC\n      } = routeInfo;\n\n      if (true) {\n        const {\n          isValidElementType\n        } = __webpack_require__(/*! next/dist/compiled/react-is */ \"next/dist/compiled/react-is\");\n\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n\n      let dataHref; // For server components, non-SSR pages will have statically optimized\n      // flight data in a production build.\n      // So only development and SSR pages will always have the real-time\n      // generated and streamed flight data.\n\n      const useStreamedFlightData = ( true) && __N_RSC;\n\n      if (__N_SSG || __N_SSP || __N_RSC) {\n        dataHref = this.pageLoader.getDataHref({\n          href: (0, _formatUrl).formatWithValidation({\n            pathname,\n            query\n          }),\n          asPath: resolvedAs,\n          ssg: __N_SSG,\n          flight: useStreamedFlightData,\n          locale\n        });\n      }\n\n      const props = await this._getData(() => (__N_SSG || __N_SSP || __N_RSC) && !useStreamedFlightData ? fetchNextData(dataHref, this.isSsr, false, __N_SSG ? this.sdc : this.sdr, !!__N_SSG && !isPreview) : this.getInitialProps(Component, // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as,\n        locale,\n        locales: this.locales,\n        defaultLocale: this.defaultLocale\n      }));\n\n      if (__N_RSC) {\n        if (useStreamedFlightData) {\n          const {\n            data\n          } = await this._getData(() => this._getFlightData(dataHref));\n          props.pageProps = Object.assign(props.pageProps, {\n            __flight__: data\n          });\n        } else {\n          const {\n            __flight__\n          } = props;\n          props.pageProps = Object.assign({}, props.pageProps, {\n            __flight__\n          });\n        }\n      }\n\n      routeInfo.props = props;\n      this.components[route] = routeInfo;\n      return routeInfo;\n    } catch (err) {\n      return this.handleRouteInfoError((0, _isError).getProperError(err), pathname, query, as, routeProps);\n    }\n  }\n\n  set(state, data, resetScroll) {\n    this.state = state;\n    return this.sub(data, this.components['/_app'].Component, resetScroll);\n  }\n  /**\n  * Callback to execute before replacing router state\n  * @param cb callback to be executed\n  */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash = ''] = as.split('#'); // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n\n    if (hash === '' || hash === 'top') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n  * Prefetch page code, you may wait for the data during page rendering.\n  * This feature only works in production!\n  * @param url the href of prefetched page\n  * @param asPath the as path of the prefetched page\n  */\n\n\n  async prefetch(url, asPath = url, options = {}) {\n    let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n    let {\n      pathname,\n      query\n    } = parsed;\n\n    if (false) {}\n\n    const pages = await this.pageLoader.getPageList();\n    let resolvedAs = asPath;\n\n    if (false) {} else {\n      parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n\n      if (parsed.pathname !== pathname) {\n        pathname = parsed.pathname;\n        parsed.pathname = pathname;\n        url = (0, _formatUrl).formatWithValidation(parsed);\n      }\n    } // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n\n    if (true) {\n      return;\n    }\n\n    const effects = await this._preflightRequest({\n      as: addBasePath(asPath),\n      cache: true,\n      pages,\n      pathname,\n      query,\n      locale: this.locale,\n      isPreview: this.isPreview\n    });\n\n    if (effects.type === 'rewrite') {\n      parsed.pathname = effects.resolvedHref;\n      pathname = effects.resolvedHref;\n      query = _objectSpread(_objectSpread({}, query), effects.parsedAs.query);\n      resolvedAs = effects.asPath;\n      url = (0, _formatUrl).formatWithValidation(parsed);\n    }\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n    await Promise.all([this.pageLoader._isSsg(route).then(isSsg => {\n      return isSsg ? fetchNextData(this.pageLoader.getDataHref({\n        href: url,\n        asPath: resolvedAs,\n        ssg: true,\n        locale: typeof options.locale !== 'undefined' ? options.locale : this.locale\n      }), false, false, this.sdc, true) : false;\n    }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n  }\n\n  async fetchComponent(route) {\n    let cancelled = false;\n\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n\n    const handleCancelled = () => {\n      if (cancelled) {\n        const error = new Error(`Abort fetching component for route: \"${route}\"`);\n        error.cancelled = true;\n        throw error;\n      }\n\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n    };\n\n    try {\n      const componentResult = await this.pageLoader.loadPage(route);\n      handleCancelled();\n      return componentResult;\n    } catch (err) {\n      handleCancelled();\n      throw err;\n    }\n  }\n\n  _getData(fn) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n\n      if (cancelled) {\n        const err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n\n      return data;\n    });\n  }\n\n  _getFlightData(dataHref) {\n    // Do not cache RSC flight response since it's not a static resource\n    return fetchNextData(dataHref, true, true, this.sdc, false).then(serialized => {\n      return {\n        data: serialized\n      };\n    });\n  }\n\n  async _preflightRequest(options) {\n    const asPathname = pathNoQueryHash(options.as);\n    const cleanedAs = delLocale(hasBasePath(asPathname) ? delBasePath(asPathname) : asPathname, options.locale);\n    const fns = await this.pageLoader.getMiddlewareList();\n    const requiresPreflight = fns.some(([middleware, isSSR]) => {\n      return (0, _routeMatcher).getRouteMatcher((0, _getMiddlewareRegex).getMiddlewareRegex(middleware, !isSSR))(cleanedAs);\n    });\n\n    if (!requiresPreflight) {\n      return {\n        type: 'next'\n      };\n    }\n\n    const preflightHref = addLocale(options.as, options.locale);\n    let preflight;\n\n    try {\n      preflight = await this._getPreflightData({\n        preflightHref,\n        shouldCache: options.cache,\n        isPreview: options.isPreview\n      });\n    } catch (err) {\n      // If preflight request fails, we need to do a hard-navigation.\n      return {\n        type: 'redirect',\n        destination: options.as\n      };\n    }\n\n    if (preflight.rewrite) {\n      // for external rewrites we need to do a hard navigation\n      // to the resource\n      if (!preflight.rewrite.startsWith('/')) {\n        return {\n          type: 'redirect',\n          destination: options.as\n        };\n      }\n\n      const parsed = (0, _parseRelativeUrl).parseRelativeUrl((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(preflight.rewrite) ? delBasePath(preflight.rewrite) : preflight.rewrite, this.locales).pathname);\n      const fsPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash(parsed.pathname);\n      let matchedPage;\n      let resolvedHref;\n\n      if (options.pages.includes(fsPathname)) {\n        matchedPage = true;\n        resolvedHref = fsPathname;\n      } else {\n        resolvedHref = resolveDynamicRoute(fsPathname, options.pages);\n\n        if (resolvedHref !== parsed.pathname && options.pages.includes(resolvedHref)) {\n          matchedPage = true;\n        }\n      }\n\n      return {\n        type: 'rewrite',\n        asPath: parsed.pathname,\n        parsedAs: parsed,\n        matchedPage,\n        resolvedHref\n      };\n    }\n\n    if (preflight.redirect) {\n      if (preflight.redirect.startsWith('/')) {\n        const cleanRedirect = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(preflight.redirect) ? delBasePath(preflight.redirect) : preflight.redirect, this.locales).pathname);\n        const {\n          url: newUrl,\n          as: newAs\n        } = prepareUrlAs(this, cleanRedirect, cleanRedirect);\n        return {\n          type: 'redirect',\n          newUrl,\n          newAs\n        };\n      }\n\n      return {\n        type: 'redirect',\n        destination: preflight.redirect\n      };\n    } // For SSR requests, they will be handled like normal pages.\n\n\n    if (preflight.refresh && !preflight.ssr) {\n      return {\n        type: 'refresh'\n      };\n    }\n\n    return {\n      type: 'next'\n    };\n  }\n\n  _getPreflightData(params) {\n    const {\n      preflightHref,\n      shouldCache = false,\n      isPreview\n    } = params;\n    const {\n      href: cacheKey\n    } = new URL(preflightHref, window.location.href);\n\n    if (false) {}\n\n    return fetch(preflightHref, {\n      method: 'HEAD',\n      credentials: 'same-origin',\n      headers: {\n        'x-middleware-preflight': '1'\n      }\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to preflight request`);\n      }\n\n      return {\n        cache: res.headers.get('x-middleware-cache'),\n        redirect: res.headers.get('Location'),\n        refresh: res.headers.has('x-middleware-refresh'),\n        rewrite: res.headers.get('x-middleware-rewrite'),\n        ssr: !!res.headers.get('x-middleware-ssr')\n      };\n    }).then(data => {\n      if (shouldCache && data.cache !== 'no-cache') {\n        this.sde[cacheKey] = data;\n      }\n\n      return data;\n    }).catch(err => {\n      delete this.sde[cacheKey];\n      throw err;\n    });\n  }\n\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n\n    const AppTree = this._wrapApp(App);\n\n    ctx.AppTree = AppTree;\n    return (0, _utils).loadGetInitialProps(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n\n  abortComponentLoad(as, routeProps) {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);\n      this.clc();\n      this.clc = null;\n    }\n  }\n\n  get route() {\n    return this.state.route;\n  }\n\n  get pathname() {\n    return this.state.pathname;\n  }\n\n  get query() {\n    return this.state.query;\n  }\n\n  get asPath() {\n    return this.state.asPath;\n  }\n\n  get locale() {\n    return this.state.locale;\n  }\n\n  get isFallback() {\n    return this.state.isFallback;\n  }\n\n  get isPreview() {\n    return this.state.isPreview;\n  }\n\n}\n\nexports[\"default\"] = Router;\nRouter.events = (0, _mitt).default();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvcm91dGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOzs7Ozs7OztBQUNiQSw4Q0FBNkM7QUFDekNHLEVBQUFBLEtBQUssRUFBRTtBQURrQyxDQUE3QztBQUdBRCx1QkFBQSxHQUEwQkUsZUFBMUI7QUFDQUYsaUJBQUEsR0FBb0JHLFNBQXBCO0FBQ0FILGlCQUFBLEdBQW9CSSxTQUFwQjtBQUNBSixtQkFBQSxHQUFzQkssV0FBdEI7QUFDQUwsbUJBQUEsR0FBc0JNLFdBQXRCO0FBQ0FOLG1CQUFBLEdBQXNCTyxXQUF0QjtBQUNBUCxrQkFBQSxHQUFxQlEsVUFBckI7QUFDQVIscUJBQUEsR0FBd0JTLGFBQXhCO0FBQ0FULG1CQUFBLEdBQXNCVSxXQUF0QjtBQUNBVixrQkFBQSxHQUFrQixLQUFLLENBQXZCOztBQUNBLElBQUlZLHVCQUF1QixHQUFHQyxtQkFBTyxDQUFDLHlNQUFELENBQXJDOztBQUNBLElBQUlDLFlBQVksR0FBR0QsbUJBQU8sQ0FBQyxpTEFBRCxDQUExQjs7QUFDQSxJQUFJRSxRQUFRLEdBQUdDLHVCQUF1QixDQUFDSCxtQkFBTyxDQUFDLG1LQUFELENBQVIsQ0FBdEM7O0FBQ0EsSUFBSUksb0JBQW9CLEdBQUdKLG1CQUFPLENBQUMsb0ZBQUQsQ0FBbEM7O0FBQ0EsSUFBSUssb0JBQW9CLEdBQUdMLG1CQUFPLENBQUMsb0VBQUQsQ0FBbEM7O0FBQ0EsSUFBSU0sS0FBSyxHQUFHQyxzQkFBc0IsQ0FBQ1AsbUJBQU8sQ0FBQyx3QkFBRCxDQUFSLENBQWxDOztBQUNBLElBQUlRLE1BQU0sR0FBR1IsbUJBQU8sQ0FBQywwQkFBRCxDQUFwQjs7QUFDQSxJQUFJUyxVQUFVLEdBQUdULG1CQUFPLENBQUMsOENBQUQs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QU0sQ0FBQ2lELE1BQVAsR0FBZ0IsQ0FBQyxHQUFHM04sS0FBSixFQUFXUixPQUFYLEVBQWhCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamltbXlmbGl4Ly4vLnlhcm4vX192aXJ0dWFsX18vbmV4dC12aXJ0dWFsLThiNjBmNTQzYTYvMC9jYWNoZS9uZXh0LW5wbS0xMi4xLjUtYWQxMjI5MTMwMC1hNzBlNzBmNzg2LnppcC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3JvdXRlci5qcz85NDBiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXREb21haW5Mb2NhbGUgPSBnZXREb21haW5Mb2NhbGU7XG5leHBvcnRzLmFkZExvY2FsZSA9IGFkZExvY2FsZTtcbmV4cG9ydHMuZGVsTG9jYWxlID0gZGVsTG9jYWxlO1xuZXhwb3J0cy5oYXNCYXNlUGF0aCA9IGhhc0Jhc2VQYXRoO1xuZXhwb3J0cy5hZGRCYXNlUGF0aCA9IGFkZEJhc2VQYXRoO1xuZXhwb3J0cy5kZWxCYXNlUGF0aCA9IGRlbEJhc2VQYXRoO1xuZXhwb3J0cy5pc0xvY2FsVVJMID0gaXNMb2NhbFVSTDtcbmV4cG9ydHMuaW50ZXJwb2xhdGVBcyA9IGludGVycG9sYXRlQXM7XG5leHBvcnRzLnJlc29sdmVIcmVmID0gcmVzb2x2ZUhyZWY7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2ggPSByZXF1aXJlKFwiLi4vLi4vLi4vY2xpZW50L25vcm1hbGl6ZS10cmFpbGluZy1zbGFzaFwiKTtcbnZhciBfcm91dGVMb2FkZXIgPSByZXF1aXJlKFwiLi4vLi4vLi4vY2xpZW50L3JvdXRlLWxvYWRlclwiKTtcbnZhciBfaXNFcnJvciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuLi8uLi8uLi9saWIvaXMtZXJyb3JcIikpO1xudmFyIF9kZW5vcm1hbGl6ZVBhZ2VQYXRoID0gcmVxdWlyZShcIi4uLy4uLy4uL3NlcnZlci9kZW5vcm1hbGl6ZS1wYWdlLXBhdGhcIik7XG52YXIgX25vcm1hbGl6ZUxvY2FsZVBhdGggPSByZXF1aXJlKFwiLi4vaTE4bi9ub3JtYWxpemUtbG9jYWxlLXBhdGhcIik7XG52YXIgX21pdHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9taXR0XCIpKTtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG52YXIgX2lzRHluYW1pYyA9IHJlcXVpcmUoXCIuL3V0aWxzL2lzLWR5bmFtaWNcIik7XG52YXIgX3BhcnNlUmVsYXRpdmVVcmwgPSByZXF1aXJlKFwiLi91dGlscy9wYXJzZS1yZWxhdGl2ZS11cmxcIik7XG52YXIgX3F1ZXJ5c3RyaW5nID0gcmVxdWlyZShcIi4vdXRpbHMvcXVlcnlzdHJpbmdcIik7XG52YXIgX3Jlc29sdmVSZXdyaXRlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvcmVzb2x2ZS1yZXdyaXRlc1wiKSk7XG52YXIgX3JvdXRlTWF0Y2hlciA9IHJlcXVpcmUoXCIuL3V0aWxzL3JvdXRlLW1hdGNoZXJcIik7XG52YXIgX3JvdXRlUmVnZXggPSByZXF1aXJlKFwiLi91dGlscy9yb3V0ZS1yZWdleFwiKTtcbnZhciBfZ2V0TWlkZGxld2FyZVJlZ2V4ID0gcmVxdWlyZShcIi4vdXRpbHMvZ2V0LW1pZGRsZXdhcmUtcmVnZXhcIik7XG52YXIgX2Zvcm1hdFVybCA9IHJlcXVpcmUoXCIuL3V0aWxzL2Zvcm1hdC11cmxcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG59XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHtcbiAgICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5ld09iaiA9IHt9O1xuICAgICAgICBpZiAob2JqICE9IG51bGwpIHtcbiAgICAgICAgICAgIGZvcih2YXIga2V5IGluIG9iail7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7XG4gICAgICAgIHJldHVybiBuZXdPYmo7XG4gICAgfVxufVxubGV0IGRldGVjdERvbWFpbkxvY2FsZTtcbmlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgZGV0ZWN0RG9tYWluTG9jYWxlID0gcmVxdWlyZSgnLi4vaTE4bi9kZXRlY3QtZG9tYWluLWxvY2FsZScpLmRldGVjdERvbWFpbkxvY2FsZTtcbn1cbmNvbnN0IGJhc2VQYXRoID0gcHJvY2Vzcy5lbnYuX19ORVhUX1JPVVRFUl9CQVNFUEFUSCB8fCAnJztcbmZ1bmN0aW9uIGJ1aWxkQ2FuY2VsbGF0aW9uRXJyb3IoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IEVycm9yKCdSb3V0ZSBDYW5jZWxsZWQnKSwge1xuICAgICAgICBjYW5jZWxsZWQ6IHRydWVcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGFkZFBhdGhQcmVmaXgocGF0aCwgcHJlZml4KSB7XG4gICAgaWYgKCFwYXRoLnN0YXJ0c1dpdGgoJy8nKSB8fCAhcHJlZml4KSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBjb25zdCBwYXRobmFtZSA9IHBhdGhOb1F1ZXJ5SGFzaChwYXRoKTtcbiAgICByZXR1cm4gKDAsIF9ub3JtYWxpemVUcmFpbGluZ1NsYXNoKS5ub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaChgJHtwcmVmaXh9JHtwYXRobmFtZX1gKSArIHBhdGguc2xpY2UocGF0aG5hbWUubGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIGhhc1BhdGhQcmVmaXgocGF0aCwgcHJlZml4KSB7XG4gICAgcGF0aCA9IHBhdGhOb1F1ZXJ5SGFzaChwYXRoKTtcbiAgICByZXR1cm4gcGF0aCA9PT0gcHJlZml4IHx8IHBhdGguc3RhcnRzV2l0aChwcmVmaXggKyAnLycpO1xufVxuZnVuY3Rpb24gZ2V0RG9tYWluTG9jYWxlKHBhdGgsIGxvY2FsZSwgbG9jYWxlcywgZG9tYWluTG9jYWxlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgIGxvY2FsZSA9IGxvY2FsZSB8fCAoMCwgX25vcm1hbGl6ZUxvY2FsZVBhdGgpLm5vcm1hbGl6ZUxvY2FsZVBhdGgocGF0aCwgbG9jYWxlcykuZGV0ZWN0ZWRMb2NhbGU7XG4gICAgICAgIGNvbnN0IGRldGVjdGVkRG9tYWluID0gZGV0ZWN0RG9tYWluTG9jYWxlKGRvbWFpbkxvY2FsZXMsIHVuZGVmaW5lZCwgbG9jYWxlKTtcbiAgICAgICAgaWYgKGRldGVjdGVkRG9tYWluKSB7XG4gICAgICAgICAgICByZXR1cm4gYGh0dHAke2RldGVjdGVkRG9tYWluLmh0dHAgPyAnJyA6ICdzJ306Ly8ke2RldGVjdGVkRG9tYWluLmRvbWFpbn0ke2Jhc2VQYXRoIHx8ICcnfSR7bG9jYWxlID09PSBkZXRlY3RlZERvbWFpbi5kZWZhdWx0TG9jYWxlID8gJycgOiBgLyR7bG9jYWxlfWB9JHtwYXRofWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBhZGRMb2NhbGUocGF0aCwgbG9jYWxlLCBkZWZhdWx0TG9jYWxlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgaWYgKGxvY2FsZSAmJiBsb2NhbGUgIT09IGRlZmF1bHRMb2NhbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhuYW1lID0gcGF0aE5vUXVlcnlIYXNoKHBhdGgpO1xuICAgICAgICAgICAgY29uc3QgcGF0aExvd2VyID0gcGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsZUxvd2VyID0gbG9jYWxlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAoIWhhc1BhdGhQcmVmaXgocGF0aExvd2VyLCAnLycgKyBsb2NhbGVMb3dlcikgJiYgIWhhc1BhdGhQcmVmaXgocGF0aExvd2VyLCAnL2FwaScpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkZFBhdGhQcmVmaXgocGF0aCwgJy8nICsgbG9jYWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbn1cbmZ1bmN0aW9uIGRlbExvY2FsZShwYXRoLCBsb2NhbGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICBjb25zdCBwYXRobmFtZSA9IHBhdGhOb1F1ZXJ5SGFzaChwYXRoKTtcbiAgICAgICAgY29uc3QgcGF0aExvd2VyID0gcGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgbG9jYWxlTG93ZXIgPSBsb2NhbGUgJiYgbG9jYWxlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiBsb2NhbGUgJiYgKHBhdGhMb3dlci5zdGFydHNXaXRoKCcvJyArIGxvY2FsZUxvd2VyICsgJy8nKSB8fCBwYXRoTG93ZXIgPT09ICcvJyArIGxvY2FsZUxvd2VyKSA/IChwYXRobmFtZS5sZW5ndGggPT09IGxvY2FsZS5sZW5ndGggKyAxID8gJy8nIDogJycpICsgcGF0aC5zbGljZShsb2NhbGUubGVuZ3RoICsgMSkgOiBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbn1cbmZ1bmN0aW9uIHBhdGhOb1F1ZXJ5SGFzaChwYXRoKSB7XG4gICAgY29uc3QgcXVlcnlJbmRleCA9IHBhdGguaW5kZXhPZignPycpO1xuICAgIGNvbnN0IGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZignIycpO1xuICAgIGlmIChxdWVyeUluZGV4ID4gLTEgfHwgaGFzaEluZGV4ID4gLTEpIHtcbiAgICAgICAgcGF0aCA9IHBhdGguc3Vic3RyaW5nKDAsIHF1ZXJ5SW5kZXggPiAtMSA/IHF1ZXJ5SW5kZXggOiBoYXNoSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VQYXRoKHBhdGgpIHtcbiAgICByZXR1cm4gaGFzUGF0aFByZWZpeChwYXRoLCBiYXNlUGF0aCk7XG59XG5mdW5jdGlvbiBhZGRCYXNlUGF0aChwYXRoKSB7XG4gICAgLy8gd2Ugb25seSBhZGQgdGhlIGJhc2VwYXRoIG9uIHJlbGF0aXZlIHVybHNcbiAgICByZXR1cm4gYWRkUGF0aFByZWZpeChwYXRoLCBiYXNlUGF0aCk7XG59XG5mdW5jdGlvbiBkZWxCYXNlUGF0aChwYXRoKSB7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoYmFzZVBhdGgubGVuZ3RoKTtcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aCgnLycpKSBwYXRoID0gYC8ke3BhdGh9YDtcbiAgICByZXR1cm4gcGF0aDtcbn1cbmZ1bmN0aW9uIGlzTG9jYWxVUkwodXJsKSB7XG4gICAgLy8gcHJldmVudCBhIGh5ZHJhdGlvbiBtaXNtYXRjaCBvbiBocmVmIGZvciB1cmwgd2l0aCBhbmNob3IgcmVmc1xuICAgIGlmICh1cmwuc3RhcnRzV2l0aCgnLycpIHx8IHVybC5zdGFydHNXaXRoKCcjJykgfHwgdXJsLnN0YXJ0c1dpdGgoJz8nKSkgcmV0dXJuIHRydWU7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gYWJzb2x1dGUgdXJscyBjYW4gYmUgbG9jYWwgaWYgdGhleSBhcmUgb24gdGhlIHNhbWUgb3JpZ2luXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uT3JpZ2luID0gKDAsIF91dGlscykuZ2V0TG9jYXRpb25PcmlnaW4oKTtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSBuZXcgVVJMKHVybCwgbG9jYXRpb25PcmlnaW4pO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZWQub3JpZ2luID09PSBsb2NhdGlvbk9yaWdpbiAmJiBoYXNCYXNlUGF0aChyZXNvbHZlZC5wYXRobmFtZSk7XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gaW50ZXJwb2xhdGVBcyhyb3V0ZSwgYXNQYXRobmFtZSwgcXVlcnkpIHtcbiAgICBsZXQgaW50ZXJwb2xhdGVkUm91dGUgPSAnJztcbiAgICBjb25zdCBkeW5hbWljUmVnZXggPSAoMCwgX3JvdXRlUmVnZXgpLmdldFJvdXRlUmVnZXgocm91dGUpO1xuICAgIGNvbnN0IGR5bmFtaWNHcm91cHMgPSBkeW5hbWljUmVnZXguZ3JvdXBzO1xuICAgIGNvbnN0IGR5bmFtaWNNYXRjaGVzID0gLy8gVHJ5IHRvIG1hdGNoIHRoZSBkeW5hbWljIHJvdXRlIGFnYWluc3QgdGhlIGFzUGF0aFxuICAgIChhc1BhdGhuYW1lICE9PSByb3V0ZSA/ICgwLCBfcm91dGVNYXRjaGVyKS5nZXRSb3V0ZU1hdGNoZXIoZHluYW1pY1JlZ2V4KShhc1BhdGhuYW1lKSA6ICcnKSB8fCAvLyBGYWxsIGJhY2sgdG8gcmVhZGluZyB0aGUgdmFsdWVzIGZyb20gdGhlIGhyZWZcbiAgICAvLyBUT0RPOiBzaG91bGQgdGhpcyB0YWtlIHByaW9yaXR5OyBhbHNvIG5lZWQgdG8gY2hhbmdlIGluIHRoZSByb3V0ZXIuXG4gICAgcXVlcnk7XG4gICAgaW50ZXJwb2xhdGVkUm91dGUgPSByb3V0ZTtcbiAgICBjb25zdCBwYXJhbXMgPSBPYmplY3Qua2V5cyhkeW5hbWljR3JvdXBzKTtcbiAgICBpZiAoIXBhcmFtcy5ldmVyeSgocGFyYW0pPT57XG4gICAgICAgIGxldCB2YWx1ZSA9IGR5bmFtaWNNYXRjaGVzW3BhcmFtXSB8fCAnJztcbiAgICAgICAgY29uc3QgeyByZXBlYXQgLCBvcHRpb25hbCAgfSA9IGR5bmFtaWNHcm91cHNbcGFyYW1dO1xuICAgICAgICAvLyBzdXBwb3J0IHNpbmdsZS1sZXZlbCBjYXRjaC1hbGxcbiAgICAgICAgLy8gVE9ETzogbW9yZSByb2J1c3QgaGFuZGxpbmcgZm9yIHVzZXItZXJyb3IgKHBhc3NpbmcgYC9gKVxuICAgICAgICBsZXQgcmVwbGFjZWQgPSBgWyR7cmVwZWF0ID8gJy4uLicgOiAnJ30ke3BhcmFtfV1gO1xuICAgICAgICBpZiAob3B0aW9uYWwpIHtcbiAgICAgICAgICAgIHJlcGxhY2VkID0gYCR7IXZhbHVlID8gJy8nIDogJyd9WyR7cmVwbGFjZWR9XWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcGVhdCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHZhbHVlID0gW1xuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIChvcHRpb25hbCB8fCBwYXJhbSBpbiBkeW5hbWljTWF0Y2hlcykgJiYgLy8gSW50ZXJwb2xhdGUgZ3JvdXAgaW50byBkYXRhIFVSTCBpZiBwcmVzZW50XG4gICAgICAgIChpbnRlcnBvbGF0ZWRSb3V0ZSA9IGludGVycG9sYXRlZFJvdXRlLnJlcGxhY2UocmVwbGFjZWQsIHJlcGVhdCA/IHZhbHVlLm1hcCgvLyB0aGVzZSB2YWx1ZXMgc2hvdWxkIGJlIGZ1bGx5IGVuY29kZWQgaW5zdGVhZCBvZiBqdXN0XG4gICAgICAgIC8vIHBhdGggZGVsaW1pdGVyIGVzY2FwZWQgc2luY2UgdGhleSBhcmUgYmVpbmcgaW5zZXJ0ZWRcbiAgICAgICAgLy8gaW50byB0aGUgVVJMIGFuZCB3ZSBleHBlY3QgVVJMIGVuY29kZWQgc2VnbWVudHNcbiAgICAgICAgLy8gd2hlbiBwYXJzaW5nIGR5bmFtaWMgcm91dGUgcGFyYW1zXG4gICAgICAgIChzZWdtZW50KT0+ZW5jb2RlVVJJQ29tcG9uZW50KHNlZ21lbnQpXG4gICAgICAgICkuam9pbignLycpIDogZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSkgfHwgJy8nKTtcbiAgICB9KSkge1xuICAgICAgICBpbnRlcnBvbGF0ZWRSb3V0ZSA9ICcnIC8vIGRpZCBub3Qgc2F0aXNmeSBhbGwgcmVxdWlyZW1lbnRzXG4gICAgICAgIDtcbiAgICAvLyBuLmIuIFdlIGlnbm9yZSB0aGlzIGVycm9yIGJlY2F1c2Ugd2UgaGFuZGxlIHdhcm5pbmcgZm9yIHRoaXMgY2FzZSBpblxuICAgIC8vIGRldmVsb3BtZW50IGluIHRoZSBgPExpbms+YCBjb21wb25lbnQgZGlyZWN0bHkuXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgcmVzdWx0OiBpbnRlcnBvbGF0ZWRSb3V0ZVxuICAgIH07XG59XG5mdW5jdGlvbiBvbWl0UGFybXNGcm9tUXVlcnkocXVlcnksIHBhcmFtcykge1xuICAgIGNvbnN0IGZpbHRlcmVkUXVlcnkgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhxdWVyeSkuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICBpZiAoIXBhcmFtcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZFF1ZXJ5W2tleV0gPSBxdWVyeVtrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZpbHRlcmVkUXVlcnk7XG59XG5mdW5jdGlvbiByZXNvbHZlSHJlZihyb3V0ZXIsIGhyZWYsIHJlc29sdmVBcykge1xuICAgIC8vIHdlIHVzZSBhIGR1bW15IGJhc2UgdXJsIGZvciByZWxhdGl2ZSB1cmxzXG4gICAgbGV0IGJhc2U7XG4gICAgbGV0IHVybEFzU3RyaW5nID0gdHlwZW9mIGhyZWYgPT09ICdzdHJpbmcnID8gaHJlZiA6ICgwLCBfZm9ybWF0VXJsKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihocmVmKTtcbiAgICAvLyByZXBlYXRlZCBzbGFzaGVzIGFuZCBiYWNrc2xhc2hlcyBpbiB0aGUgVVJMIGFyZSBjb25zaWRlcmVkXG4gICAgLy8gaW52YWxpZCBhbmQgd2lsbCBuZXZlciBtYXRjaCBhIE5leHQuanMgcGFnZS9maWxlXG4gICAgY29uc3QgdXJsUHJvdG9NYXRjaCA9IHVybEFzU3RyaW5nLm1hdGNoKC9eW2EtekEtWl17MSx9OlxcL1xcLy8pO1xuICAgIGNvbnN0IHVybEFzU3RyaW5nTm9Qcm90byA9IHVybFByb3RvTWF0Y2ggPyB1cmxBc1N0cmluZy5zbGljZSh1cmxQcm90b01hdGNoWzBdLmxlbmd0aCkgOiB1cmxBc1N0cmluZztcbiAgICBjb25zdCB1cmxQYXJ0cyA9IHVybEFzU3RyaW5nTm9Qcm90by5zcGxpdCgnPycpO1xuICAgIGlmICgodXJsUGFydHNbMF0gfHwgJycpLm1hdGNoKC8oXFwvXFwvfFxcXFwpLykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgSW52YWxpZCBocmVmIHBhc3NlZCB0byBuZXh0L3JvdXRlcjogJHt1cmxBc1N0cmluZ30sIHJlcGVhdGVkIGZvcndhcmQtc2xhc2hlcyAoLy8pIG9yIGJhY2tzbGFzaGVzIFxcXFwgYXJlIG5vdCB2YWxpZCBpbiB0aGUgaHJlZmApO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkVXJsID0gKDAsIF91dGlscykubm9ybWFsaXplUmVwZWF0ZWRTbGFzaGVzKHVybEFzU3RyaW5nTm9Qcm90byk7XG4gICAgICAgIHVybEFzU3RyaW5nID0gKHVybFByb3RvTWF0Y2ggPyB1cmxQcm90b01hdGNoWzBdIDogJycpICsgbm9ybWFsaXplZFVybDtcbiAgICB9XG4gICAgLy8gUmV0dXJuIGJlY2F1c2UgaXQgY2Fubm90IGJlIHJvdXRlZCBieSB0aGUgTmV4dC5qcyByb3V0ZXJcbiAgICBpZiAoIWlzTG9jYWxVUkwodXJsQXNTdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlQXMgPyBbXG4gICAgICAgICAgICB1cmxBc1N0cmluZ1xuICAgICAgICBdIDogdXJsQXNTdHJpbmc7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGJhc2UgPSBuZXcgVVJMKHVybEFzU3RyaW5nLnN0YXJ0c1dpdGgoJyMnKSA/IHJvdXRlci5hc1BhdGggOiByb3V0ZXIucGF0aG5hbWUsICdodHRwOi8vbicpO1xuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgLy8gZmFsbGJhY2sgdG8gLyBmb3IgaW52YWxpZCBhc1BhdGggdmFsdWVzIGUuZy4gLy9cbiAgICAgICAgYmFzZSA9IG5ldyBVUkwoJy8nLCAnaHR0cDovL24nKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZmluYWxVcmwgPSBuZXcgVVJMKHVybEFzU3RyaW5nLCBiYXNlKTtcbiAgICAgICAgZmluYWxVcmwucGF0aG5hbWUgPSAoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoKGZpbmFsVXJsLnBhdGhuYW1lKTtcbiAgICAgICAgbGV0IGludGVycG9sYXRlZEFzID0gJyc7XG4gICAgICAgIGlmICgoMCwgX2lzRHluYW1pYykuaXNEeW5hbWljUm91dGUoZmluYWxVcmwucGF0aG5hbWUpICYmIGZpbmFsVXJsLnNlYXJjaFBhcmFtcyAmJiByZXNvbHZlQXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gKDAsIF9xdWVyeXN0cmluZykuc2VhcmNoUGFyYW1zVG9VcmxRdWVyeShmaW5hbFVybC5zZWFyY2hQYXJhbXMpO1xuICAgICAgICAgICAgY29uc3QgeyByZXN1bHQgLCBwYXJhbXMgIH0gPSBpbnRlcnBvbGF0ZUFzKGZpbmFsVXJsLnBhdGhuYW1lLCBmaW5hbFVybC5wYXRobmFtZSwgcXVlcnkpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGludGVycG9sYXRlZEFzID0gKDAsIF9mb3JtYXRVcmwpLmZvcm1hdFdpdGhWYWxpZGF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgaGFzaDogZmluYWxVcmwuaGFzaCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IG9taXRQYXJtc0Zyb21RdWVyeShxdWVyeSwgcGFyYW1zKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHRoZSBvcmlnaW4gZGlkbid0IGNoYW5nZSwgaXQgbWVhbnMgd2UgcmVjZWl2ZWQgYSByZWxhdGl2ZSBocmVmXG4gICAgICAgIGNvbnN0IHJlc29sdmVkSHJlZiA9IGZpbmFsVXJsLm9yaWdpbiA9PT0gYmFzZS5vcmlnaW4gPyBmaW5hbFVybC5ocmVmLnNsaWNlKGZpbmFsVXJsLm9yaWdpbi5sZW5ndGgpIDogZmluYWxVcmwuaHJlZjtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVBcyA/IFtcbiAgICAgICAgICAgIHJlc29sdmVkSHJlZixcbiAgICAgICAgICAgIGludGVycG9sYXRlZEFzIHx8IHJlc29sdmVkSHJlZlxuICAgICAgICBdIDogcmVzb2x2ZWRIcmVmO1xuICAgIH0gY2F0Y2ggKF8xKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlQXMgPyBbXG4gICAgICAgICAgICB1cmxBc1N0cmluZ1xuICAgICAgICBdIDogdXJsQXNTdHJpbmc7XG4gICAgfVxufVxuZnVuY3Rpb24gc3RyaXBPcmlnaW4odXJsKSB7XG4gICAgY29uc3Qgb3JpZ2luID0gKDAsIF91dGlscykuZ2V0TG9jYXRpb25PcmlnaW4oKTtcbiAgICByZXR1cm4gdXJsLnN0YXJ0c1dpdGgob3JpZ2luKSA/IHVybC5zdWJzdHJpbmcob3JpZ2luLmxlbmd0aCkgOiB1cmw7XG59XG5mdW5jdGlvbiBwcmVwYXJlVXJsQXMocm91dGVyLCB1cmwsIGFzKSB7XG4gICAgLy8gSWYgdXJsIGFuZCBhcyBwcm92aWRlZCBhcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24sXG4gICAgLy8gd2UnbGwgZm9ybWF0IHRoZW0gaW50byB0aGUgc3RyaW5nIHZlcnNpb24gaGVyZS5cbiAgICBsZXQgW3Jlc29sdmVkSHJlZiwgcmVzb2x2ZWRBc10gPSByZXNvbHZlSHJlZihyb3V0ZXIsIHVybCwgdHJ1ZSk7XG4gICAgY29uc3Qgb3JpZ2luID0gKDAsIF91dGlscykuZ2V0TG9jYXRpb25PcmlnaW4oKTtcbiAgICBjb25zdCBocmVmSGFkT3JpZ2luID0gcmVzb2x2ZWRIcmVmLnN0YXJ0c1dpdGgob3JpZ2luKTtcbiAgICBjb25zdCBhc0hhZE9yaWdpbiA9IHJlc29sdmVkQXMgJiYgcmVzb2x2ZWRBcy5zdGFydHNXaXRoKG9yaWdpbik7XG4gICAgcmVzb2x2ZWRIcmVmID0gc3RyaXBPcmlnaW4ocmVzb2x2ZWRIcmVmKTtcbiAgICByZXNvbHZlZEFzID0gcmVzb2x2ZWRBcyA/IHN0cmlwT3JpZ2luKHJlc29sdmVkQXMpIDogcmVzb2x2ZWRBcztcbiAgICBjb25zdCBwcmVwYXJlZFVybCA9IGhyZWZIYWRPcmlnaW4gPyByZXNvbHZlZEhyZWYgOiBhZGRCYXNlUGF0aChyZXNvbHZlZEhyZWYpO1xuICAgIGNvbnN0IHByZXBhcmVkQXMgPSBhcyA/IHN0cmlwT3JpZ2luKHJlc29sdmVIcmVmKHJvdXRlciwgYXMpKSA6IHJlc29sdmVkQXMgfHwgcmVzb2x2ZWRIcmVmO1xuICAgIHJldHVybiB7XG4gICAgICAgIHVybDogcHJlcGFyZWRVcmwsXG4gICAgICAgIGFzOiBhc0hhZE9yaWdpbiA/IHByZXBhcmVkQXMgOiBhZGRCYXNlUGF0aChwcmVwYXJlZEFzKVxuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlRHluYW1pY1JvdXRlKHBhdGhuYW1lLCBwYWdlcykge1xuICAgIGNvbnN0IGNsZWFuUGF0aG5hbWUgPSAoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKCgwLCBfZGVub3JtYWxpemVQYWdlUGF0aCkuZGVub3JtYWxpemVQYWdlUGF0aChwYXRobmFtZSkpO1xuICAgIGlmIChjbGVhblBhdGhuYW1lID09PSAnLzQwNCcgfHwgY2xlYW5QYXRobmFtZSA9PT0gJy9fZXJyb3InKSB7XG4gICAgICAgIHJldHVybiBwYXRobmFtZTtcbiAgICB9XG4gICAgLy8gaGFuZGxlIHJlc29sdmluZyBocmVmIGZvciBkeW5hbWljIHJvdXRlc1xuICAgIGlmICghcGFnZXMuaW5jbHVkZXMoY2xlYW5QYXRobmFtZSkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuICAgICAgICBwYWdlcy5zb21lKChwYWdlKT0+e1xuICAgICAgICAgICAgaWYgKCgwLCBfaXNEeW5hbWljKS5pc0R5bmFtaWNSb3V0ZShwYWdlKSAmJiAoMCwgX3JvdXRlUmVnZXgpLmdldFJvdXRlUmVnZXgocGFnZSkucmUudGVzdChjbGVhblBhdGhuYW1lKSkge1xuICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gcGFnZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGhuYW1lKTtcbn1cbmNvbnN0IG1hbnVhbFNjcm9sbFJlc3RvcmF0aW9uID0gcHJvY2Vzcy5lbnYuX19ORVhUX1NDUk9MTF9SRVNUT1JBVElPTiAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAnc2Nyb2xsUmVzdG9yYXRpb24nIGluIHdpbmRvdy5oaXN0b3J5ICYmICEhZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IHYgPSAnX19uZXh0JztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlcXVlbmNlc1xuICAgICAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSh2LCB2KSwgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSh2KSwgdHJ1ZTtcbiAgICB9IGNhdGNoIChuKSB7fVxufSgpO1xuY29uc3QgU1NHX0RBVEFfTk9UX0ZPVU5EID0gU3ltYm9sKCdTU0dfREFUQV9OT1RfRk9VTkQnKTtcbmZ1bmN0aW9uIGZldGNoUmV0cnkodXJsLCBhdHRlbXB0cywgb3B0cykge1xuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgICAgLy8gQ29va2llcyBhcmUgcmVxdWlyZWQgdG8gYmUgcHJlc2VudCBmb3IgTmV4dC5qcycgU1NHIFwiUHJldmlldyBNb2RlXCIuXG4gICAgICAgIC8vIENvb2tpZXMgbWF5IGFsc28gYmUgcmVxdWlyZWQgZm9yIGBnZXRTZXJ2ZXJTaWRlUHJvcHNgLlxuICAgICAgICAvL1xuICAgICAgICAvLyA+IGBmZXRjaGAgd29u4oCZdCBzZW5kIGNvb2tpZXMsIHVubGVzcyB5b3Ugc2V0IHRoZSBjcmVkZW50aWFscyBpbml0XG4gICAgICAgIC8vID4gb3B0aW9uLlxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmV0Y2hfQVBJL1VzaW5nX0ZldGNoXG4gICAgICAgIC8vXG4gICAgICAgIC8vID4gRm9yIG1heGltdW0gYnJvd3NlciBjb21wYXRpYmlsaXR5IHdoZW4gaXQgY29tZXMgdG8gc2VuZGluZyAmXG4gICAgICAgIC8vID4gcmVjZWl2aW5nIGNvb2tpZXMsIGFsd2F5cyBzdXBwbHkgdGhlIGBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJ2BcbiAgICAgICAgLy8gPiBvcHRpb24gaW5zdGVhZCBvZiByZWx5aW5nIG9uIHRoZSBkZWZhdWx0LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2l0aHViL2ZldGNoI2NhdmVhdHNcbiAgICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbidcbiAgICB9KS50aGVuKChyZXMpPT57XG4gICAgICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgICAgICBpZiAoYXR0ZW1wdHMgPiAxICYmIHJlcy5zdGF0dXMgPj0gNTAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoUmV0cnkodXJsLCBhdHRlbXB0cyAtIDEsIG9wdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpLnRoZW4oKGRhdGEpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLm5vdEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEZvdW5kOiBTU0dfREFUQV9OT1RfRk9VTkRcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gbG9hZCBzdGF0aWMgcHJvcHNgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGxvYWQgc3RhdGljIHByb3BzYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdHMudGV4dCA/IHJlcy50ZXh0KCkgOiByZXMuanNvbigpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZmV0Y2hOZXh0RGF0YShkYXRhSHJlZiwgaXNTZXJ2ZXJSZW5kZXIsIHRleHQsIGluZmxpZ2h0Q2FjaGUsIHBlcnNpc3RDYWNoZSkge1xuICAgIGNvbnN0IHsgaHJlZjogY2FjaGVLZXkgIH0gPSBuZXcgVVJMKGRhdGFIcmVmLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgaWYgKGluZmxpZ2h0Q2FjaGVbY2FjaGVLZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGluZmxpZ2h0Q2FjaGVbY2FjaGVLZXldO1xuICAgIH1cbiAgICByZXR1cm4gaW5mbGlnaHRDYWNoZVtjYWNoZUtleV0gPSBmZXRjaFJldHJ5KGRhdGFIcmVmLCBpc1NlcnZlclJlbmRlciA/IDMgOiAxLCB7XG4gICAgICAgIHRleHRcbiAgICB9KS5jYXRjaCgoZXJyKT0+e1xuICAgICAgICAvLyBXZSBzaG91bGQgb25seSB0cmlnZ2VyIGEgc2VydmVyLXNpZGUgdHJhbnNpdGlvbiBpZiB0aGlzIHdhcyBjYXVzZWRcbiAgICAgICAgLy8gb24gYSBjbGllbnQtc2lkZSB0cmFuc2l0aW9uLiBPdGhlcndpc2UsIHdlJ2QgZ2V0IGludG8gYW4gaW5maW5pdGVcbiAgICAgICAgLy8gbG9vcC5cbiAgICAgICAgaWYgKCFpc1NlcnZlclJlbmRlcikge1xuICAgICAgICAgICAgKDAsIF9yb3V0ZUxvYWRlcikubWFya0Fzc2V0RXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgfSkudGhlbigoZGF0YSk9PntcbiAgICAgICAgaWYgKCFwZXJzaXN0Q2FjaGUgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgZGVsZXRlIGluZmxpZ2h0Q2FjaGVbY2FjaGVLZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlcnIpPT57XG4gICAgICAgIGRlbGV0ZSBpbmZsaWdodENhY2hlW2NhY2hlS2V5XTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIH0pO1xufVxuY2xhc3MgUm91dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihwYXRobmFtZTEsIHF1ZXJ5MSwgYXMxLCB7IGluaXRpYWxQcm9wcyAsIHBhZ2VMb2FkZXIgLCBBcHAgLCB3cmFwQXBwICwgQ29tcG9uZW50ICwgZXJyICwgc3Vic2NyaXB0aW9uICwgaXNGYWxsYmFjayAsIGxvY2FsZSAsIGxvY2FsZXMgLCBkZWZhdWx0TG9jYWxlICwgZG9tYWluTG9jYWxlcyAsIGlzUHJldmlldyAsIGlzUnNjICB9KXtcbiAgICAgICAgLy8gU3RhdGljIERhdGEgQ2FjaGVcbiAgICAgICAgdGhpcy5zZGMgPSB7fTtcbiAgICAgICAgLy8gSW4tZmxpZ2h0IFNlcnZlciBEYXRhIFJlcXVlc3RzLCBmb3IgZGVkdXBpbmdcbiAgICAgICAgdGhpcy5zZHIgPSB7fTtcbiAgICAgICAgLy8gSW4tZmxpZ2h0IG1pZGRsZXdhcmUgcHJlZmxpZ2h0IHJlcXVlc3RzXG4gICAgICAgIHRoaXMuc2RlID0ge307XG4gICAgICAgIHRoaXMuX2lkeCA9IDA7XG4gICAgICAgIHRoaXMub25Qb3BTdGF0ZSA9IChlKT0+e1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBlLnN0YXRlO1xuICAgICAgICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGdldCBzdGF0ZSBhcyB1bmRlZmluZWQgZm9yIHR3byByZWFzb25zLlxuICAgICAgICAgICAgICAgIC8vICAxLiBXaXRoIG9sZGVyIHNhZmFyaSAoPCA4KSBhbmQgb2xkZXIgY2hyb21lICg8IDM0KVxuICAgICAgICAgICAgICAgIC8vICAyLiBXaGVuIHRoZSBVUkwgY2hhbmdlZCB3aXRoICNcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIEluIHRoZSBib3RoIGNhc2VzLCB3ZSBkb24ndCBuZWVkIHRvIHByb2NlZWQgYW5kIGNoYW5nZSB0aGUgcm91dGUuXG4gICAgICAgICAgICAgICAgLy8gKGFzIGl0J3MgYWxyZWFkeSBjaGFuZ2VkKVxuICAgICAgICAgICAgICAgIC8vIEJ1dCB3ZSBjYW4gc2ltcGx5IHJlcGxhY2UgdGhlIHN0YXRlIHdpdGggdGhlIG5ldyBjaGFuZ2VzLlxuICAgICAgICAgICAgICAgIC8vIEFjdHVhbGx5LCBmb3IgKDEpIHdlIGRvbid0IG5lZWQgdG8gbm90aGluZy4gQnV0IGl0J3MgaGFyZCB0byBkZXRlY3QgdGhhdCBldmVudC5cbiAgICAgICAgICAgICAgICAvLyBTbywgZG9pbmcgdGhlIGZvbGxvd2luZyBmb3IgKDEpIGRvZXMgbm8gaGFybS5cbiAgICAgICAgICAgICAgICBjb25zdCB7IHBhdGhuYW1lICwgcXVlcnkgIH0gPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUoJ3JlcGxhY2VTdGF0ZScsICgwLCBfZm9ybWF0VXJsKS5mb3JtYXRXaXRoVmFsaWRhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBhZGRCYXNlUGF0aChwYXRobmFtZSksXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICAgICAgfSksICgwLCBfdXRpbHMpLmdldFVSTCgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0YXRlLl9fTikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBmb3JjZWRTY3JvbGw7XG4gICAgICAgICAgICBjb25zdCB7IHVybCAsIGFzICwgb3B0aW9ucyAsIGlkeCAgfSA9IHN0YXRlO1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9TQ1JPTExfUkVTVE9SQVRJT04pIHtcbiAgICAgICAgICAgICAgICBpZiAobWFudWFsU2Nyb2xsUmVzdG9yYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lkeCAhPT0gaWR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTbmFwc2hvdCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnX19uZXh0X3Njcm9sbF8nICsgdGhpcy5faWR4LCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHNlbGYucGFnZVhPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHNlbGYucGFnZVlPZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzdG9yZSBvbGQgc2Nyb2xsIHBvc2l0aW9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2ID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnX19uZXh0X3Njcm9sbF8nICsgaWR4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZWRTY3JvbGwgPSBKU09OLnBhcnNlKHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlZFNjcm9sbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pZHggPSBpZHg7XG4gICAgICAgICAgICBjb25zdCB7IHBhdGhuYW1lICB9ID0gKDAsIF9wYXJzZVJlbGF0aXZlVXJsKS5wYXJzZVJlbGF0aXZlVXJsKHVybCk7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZG9uJ3QgcmUtcmVuZGVyIG9uIGluaXRpYWwgbG9hZCxcbiAgICAgICAgICAgIC8vIGNhbiBiZSBjYXVzZWQgYnkgbmF2aWdhdGluZyBiYWNrIGZyb20gYW4gZXh0ZXJuYWwgc2l0ZVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTc3IgJiYgYXMgPT09IGFkZEJhc2VQYXRoKHRoaXMuYXNQYXRoKSAmJiBwYXRobmFtZSA9PT0gYWRkQmFzZVBhdGgodGhpcy5wYXRobmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB0aGUgZG93bnN0cmVhbSBhcHBsaWNhdGlvbiByZXR1cm5zIGZhbHN5LCByZXR1cm4uXG4gICAgICAgICAgICAvLyBUaGV5IHdpbGwgdGhlbiBiZSByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgdGhlIGV2ZW50LlxuICAgICAgICAgICAgaWYgKHRoaXMuX2JwcyAmJiAhdGhpcy5fYnBzKHN0YXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2hhbmdlKCdyZXBsYWNlU3RhdGUnLCB1cmwsIGFzLCBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgc2hhbGxvdzogb3B0aW9ucy5zaGFsbG93ICYmIHRoaXMuX3NoYWxsb3csXG4gICAgICAgICAgICAgICAgbG9jYWxlOiBvcHRpb25zLmxvY2FsZSB8fCB0aGlzLmRlZmF1bHRMb2NhbGVcbiAgICAgICAgICAgIH0pLCBmb3JjZWRTY3JvbGwpO1xuICAgICAgICB9O1xuICAgICAgICAvLyByZXByZXNlbnRzIHRoZSBjdXJyZW50IGNvbXBvbmVudCBrZXlcbiAgICAgICAgY29uc3Qgcm91dGUgPSAoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGhuYW1lMSk7XG4gICAgICAgIC8vIHNldCB1cCB0aGUgY29tcG9uZW50IGNhY2hlIChieSByb3V0ZSBrZXlzKVxuICAgICAgICB0aGlzLmNvbXBvbmVudHMgPSB7fTtcbiAgICAgICAgLy8gV2Ugc2hvdWxkIG5vdCBrZWVwIHRoZSBjYWNoZSwgaWYgdGhlcmUncyBhbiBlcnJvclxuICAgICAgICAvLyBPdGhlcndpc2UsIHRoaXMgY2F1c2UgaXNzdWVzIHdoZW4gd2hlbiBnb2luZyBiYWNrIGFuZFxuICAgICAgICAvLyBjb21lIGFnYWluIHRvIHRoZSBlcnJvcmVkIHBhZ2UuXG4gICAgICAgIGlmIChwYXRobmFtZTEgIT09ICcvX2Vycm9yJykge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzW3JvdXRlXSA9IHtcbiAgICAgICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgaW5pdGlhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm9wczogaW5pdGlhbFByb3BzLFxuICAgICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAgICBfX05fU1NHOiBpbml0aWFsUHJvcHMgJiYgaW5pdGlhbFByb3BzLl9fTl9TU0csXG4gICAgICAgICAgICAgICAgX19OX1NTUDogaW5pdGlhbFByb3BzICYmIGluaXRpYWxQcm9wcy5fX05fU1NQLFxuICAgICAgICAgICAgICAgIF9fTl9SU0M6ICEhaXNSc2NcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21wb25lbnRzWycvX2FwcCddID0ge1xuICAgICAgICAgICAgQ29tcG9uZW50OiBBcHAsXG4gICAgICAgICAgICBzdHlsZVNoZWV0czogW11cbiAgICAgICAgfTtcbiAgICAgICAgLy8gQmFja3dhcmRzIGNvbXBhdCBmb3IgUm91dGVyLnJvdXRlci5ldmVudHNcbiAgICAgICAgLy8gVE9ETzogU2hvdWxkIGJlIHJlbW92ZSB0aGUgZm9sbG93aW5nIG1ham9yIHZlcnNpb24gYXMgaXQgd2FzIG5ldmVyIGRvY3VtZW50ZWRcbiAgICAgICAgdGhpcy5ldmVudHMgPSBSb3V0ZXIuZXZlbnRzO1xuICAgICAgICB0aGlzLnBhZ2VMb2FkZXIgPSBwYWdlTG9hZGVyO1xuICAgICAgICAvLyBpZiBhdXRvIHByZXJlbmRlcmVkIGFuZCBkeW5hbWljIHJvdXRlIHdhaXQgdG8gdXBkYXRlIGFzUGF0aFxuICAgICAgICAvLyB1bnRpbCBhZnRlciBtb3VudCB0byBwcmV2ZW50IGh5ZHJhdGlvbiBtaXNtYXRjaFxuICAgICAgICBjb25zdCBhdXRvRXhwb3J0RHluYW1pYyA9ICgwLCBfaXNEeW5hbWljKS5pc0R5bmFtaWNSb3V0ZShwYXRobmFtZTEpICYmIHNlbGYuX19ORVhUX0RBVEFfXy5hdXRvRXhwb3J0O1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgICAgIHRoaXMuc3ViID0gc3Vic2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmNsYyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3dyYXBBcHAgPSB3cmFwQXBwO1xuICAgICAgICAvLyBtYWtlIHN1cmUgdG8gaWdub3JlIGV4dHJhIHBvcFN0YXRlIGluIHNhZmFyaSBvbiBuYXZpZ2F0aW5nXG4gICAgICAgIC8vIGJhY2sgZnJvbSBleHRlcm5hbCBzaXRlXG4gICAgICAgIHRoaXMuaXNTc3IgPSB0cnVlO1xuICAgICAgICB0aGlzLmlzTG9jYWxlRG9tYWluID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNSZWFkeSA9ICEhKHNlbGYuX19ORVhUX0RBVEFfXy5nc3NwIHx8IHNlbGYuX19ORVhUX0RBVEFfXy5naXAgfHwgc2VsZi5fX05FWFRfREFUQV9fLmFwcEdpcCAmJiAhc2VsZi5fX05FWFRfREFUQV9fLmdzcCB8fCAhYXV0b0V4cG9ydER5bmFtaWMgJiYgIXNlbGYubG9jYXRpb24uc2VhcmNoICYmICFwcm9jZXNzLmVudi5fX05FWFRfSEFTX1JFV1JJVEVTKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgIHRoaXMubG9jYWxlcyA9IGxvY2FsZXM7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBkZWZhdWx0TG9jYWxlO1xuICAgICAgICAgICAgdGhpcy5kb21haW5Mb2NhbGVzID0gZG9tYWluTG9jYWxlcztcbiAgICAgICAgICAgIHRoaXMuaXNMb2NhbGVEb21haW4gPSAhIWRldGVjdERvbWFpbkxvY2FsZShkb21haW5Mb2NhbGVzLCBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgcm91dGUsXG4gICAgICAgICAgICBwYXRobmFtZTogcGF0aG5hbWUxLFxuICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5MSxcbiAgICAgICAgICAgIGFzUGF0aDogYXV0b0V4cG9ydER5bmFtaWMgPyBwYXRobmFtZTEgOiBhczEsXG4gICAgICAgICAgICBpc1ByZXZpZXc6ICEhaXNQcmV2aWV3LFxuICAgICAgICAgICAgbG9jYWxlOiBwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUID8gbG9jYWxlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaXNGYWxsYmFja1xuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBcImFzXCIgZG9lc24ndCBzdGFydCB3aXRoIGRvdWJsZSBzbGFzaGVzIG9yIGVsc2UgaXQgY2FuXG4gICAgICAgICAgICAvLyB0aHJvdyBhbiBlcnJvciBhcyBpdCdzIGNvbnNpZGVyZWQgaW52YWxpZFxuICAgICAgICAgICAgaWYgKCFhczEuc3RhcnRzV2l0aCgnLy8nKSkge1xuICAgICAgICAgICAgICAgIC8vIGluIG9yZGVyIGZvciBgZS5zdGF0ZWAgdG8gd29yayBvbiB0aGUgYG9ucG9wc3RhdGVgIGV2ZW50XG4gICAgICAgICAgICAgICAgLy8gd2UgaGF2ZSB0byByZWdpc3RlciB0aGUgaW5pdGlhbCByb3V0ZSB1cG9uIGluaXRpYWxpemF0aW9uXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBvcHRpb25zLl9zaG91bGRSZXNvbHZlSHJlZiA9IGFzMSAhPT0gcGF0aG5hbWUxO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUoJ3JlcGxhY2VTdGF0ZScsICgwLCBfZm9ybWF0VXJsKS5mb3JtYXRXaXRoVmFsaWRhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBhZGRCYXNlUGF0aChwYXRobmFtZTEpLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkxXG4gICAgICAgICAgICAgICAgfSksICgwLCBfdXRpbHMpLmdldFVSTCgpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHRoaXMub25Qb3BTdGF0ZSk7XG4gICAgICAgICAgICAvLyBlbmFibGUgY3VzdG9tIHNjcm9sbCByZXN0b3JhdGlvbiBoYW5kbGluZyB3aGVuIGF2YWlsYWJsZVxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGZhbGxiYWNrIHRvIGJyb3dzZXIncyBkZWZhdWx0IGhhbmRsaW5nXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX1NDUk9MTF9SRVNUT1JBVElPTikge1xuICAgICAgICAgICAgICAgIGlmIChtYW51YWxTY3JvbGxSZXN0b3JhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9ICdtYW51YWwnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZWxvYWQoKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIEdvIGJhY2sgaW4gaGlzdG9yeVxuICAgKi8gYmFjaygpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICAgIH1cbiAgICAvKipcbiAgICogUGVyZm9ybXMgYSBgcHVzaFN0YXRlYCB3aXRoIGFyZ3VtZW50c1xuICAgKiBAcGFyYW0gdXJsIG9mIHRoZSByb3V0ZVxuICAgKiBAcGFyYW0gYXMgbWFza3MgYHVybGAgZm9yIHRoZSBicm93c2VyXG4gICAqIEBwYXJhbSBvcHRpb25zIG9iamVjdCB5b3UgY2FuIGRlZmluZSBgc2hhbGxvd2AgYW5kIG90aGVyIG9wdGlvbnNcbiAgICovIHB1c2godXJsLCBhcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfU0NST0xMX1JFU1RPUkFUSU9OKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgaW4gdGhlIGZ1dHVyZSB3aGVuIHdlIHVwZGF0ZSBoaXN0b3J5IGJlZm9yZSByb3V0ZSBjaGFuZ2VcbiAgICAgICAgICAgIC8vIGlzIGNvbXBsZXRlLCBhcyB0aGUgcG9wc3RhdGUgZXZlbnQgc2hvdWxkIGhhbmRsZSB0aGlzIGNhcHR1cmUuXG4gICAgICAgICAgICBpZiAobWFudWFsU2Nyb2xsUmVzdG9yYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTbmFwc2hvdCBzY3JvbGwgcG9zaXRpb24gcmlnaHQgYmVmb3JlIG5hdmlnYXRpbmcgdG8gYSBuZXcgcGFnZTpcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnX19uZXh0X3Njcm9sbF8nICsgdGhpcy5faWR4LCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBzZWxmLnBhZ2VYT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogc2VsZi5wYWdlWU9mZnNldFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAoeyB1cmwgLCBhcyAgfSA9IHByZXBhcmVVcmxBcyh0aGlzLCB1cmwsIGFzKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5nZSgncHVzaFN0YXRlJywgdXJsLCBhcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBQZXJmb3JtcyBhIGByZXBsYWNlU3RhdGVgIHdpdGggYXJndW1lbnRzXG4gICAqIEBwYXJhbSB1cmwgb2YgdGhlIHJvdXRlXG4gICAqIEBwYXJhbSBhcyBtYXNrcyBgdXJsYCBmb3IgdGhlIGJyb3dzZXJcbiAgICogQHBhcmFtIG9wdGlvbnMgb2JqZWN0IHlvdSBjYW4gZGVmaW5lIGBzaGFsbG93YCBhbmQgb3RoZXIgb3B0aW9uc1xuICAgKi8gcmVwbGFjZSh1cmwsIGFzLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgKHsgdXJsICwgYXMgIH0gPSBwcmVwYXJlVXJsQXModGhpcywgdXJsLCBhcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFuZ2UoJ3JlcGxhY2VTdGF0ZScsIHVybCwgYXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBjaGFuZ2UobWV0aG9kLCB1cmwsIGFzLCBvcHRpb25zLCBmb3JjZWRTY3JvbGwpIHtcbiAgICAgICAgaWYgKCFpc0xvY2FsVVJMKHVybCkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNob3VsZFJlc29sdmVIcmVmID0gb3B0aW9ucy5faCB8fCBvcHRpb25zLl9zaG91bGRSZXNvbHZlSHJlZiB8fCBwYXRoTm9RdWVyeUhhc2godXJsKSA9PT0gcGF0aE5vUXVlcnlIYXNoKGFzKTtcbiAgICAgICAgY29uc3QgbmV4dFN0YXRlID0ge1xuICAgICAgICAgICAgLi4udGhpcy5zdGF0ZVxuICAgICAgICB9O1xuICAgICAgICAvLyBmb3Igc3RhdGljIHBhZ2VzIHdpdGggcXVlcnkgcGFyYW1zIGluIHRoZSBVUkwgd2UgZGVsYXlcbiAgICAgICAgLy8gbWFya2luZyB0aGUgcm91dGVyIHJlYWR5IHVudGlsIGFmdGVyIHRoZSBxdWVyeSBpcyB1cGRhdGVkXG4gICAgICAgIGlmIChvcHRpb25zLl9oKSB7XG4gICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXZMb2NhbGUgPSBuZXh0U3RhdGUubG9jYWxlO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICAgICAgbmV4dFN0YXRlLmxvY2FsZSA9IG9wdGlvbnMubG9jYWxlID09PSBmYWxzZSA/IHRoaXMuZGVmYXVsdExvY2FsZSA6IG9wdGlvbnMubG9jYWxlIHx8IG5leHRTdGF0ZS5sb2NhbGU7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubG9jYWxlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubG9jYWxlID0gbmV4dFN0YXRlLmxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFzID0gKDAsIF9wYXJzZVJlbGF0aXZlVXJsKS5wYXJzZVJlbGF0aXZlVXJsKGhhc0Jhc2VQYXRoKGFzKSA/IGRlbEJhc2VQYXRoKGFzKSA6IGFzKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsZVBhdGhSZXN1bHQgPSAoMCwgX25vcm1hbGl6ZUxvY2FsZVBhdGgpLm5vcm1hbGl6ZUxvY2FsZVBhdGgocGFyc2VkQXMucGF0aG5hbWUsIHRoaXMubG9jYWxlcyk7XG4gICAgICAgICAgICBpZiAobG9jYWxlUGF0aFJlc3VsdC5kZXRlY3RlZExvY2FsZSkge1xuICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5sb2NhbGUgPSBsb2NhbGVQYXRoUmVzdWx0LmRldGVjdGVkTG9jYWxlO1xuICAgICAgICAgICAgICAgIHBhcnNlZEFzLnBhdGhuYW1lID0gYWRkQmFzZVBhdGgocGFyc2VkQXMucGF0aG5hbWUpO1xuICAgICAgICAgICAgICAgIGFzID0gKDAsIF9mb3JtYXRVcmwpLmZvcm1hdFdpdGhWYWxpZGF0aW9uKHBhcnNlZEFzKTtcbiAgICAgICAgICAgICAgICB1cmwgPSBhZGRCYXNlUGF0aCgoMCwgX25vcm1hbGl6ZUxvY2FsZVBhdGgpLm5vcm1hbGl6ZUxvY2FsZVBhdGgoaGFzQmFzZVBhdGgodXJsKSA/IGRlbEJhc2VQYXRoKHVybCkgOiB1cmwsIHRoaXMubG9jYWxlcykucGF0aG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRpZE5hdmlnYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHdyYXAgdGhpcyBpbiB0aGUgZW52IGNoZWNrIGFnYWluIHNpbmNlIHJlZ2VuZXJhdG9yIHJ1bnRpbWVcbiAgICAgICAgICAgIC8vIG1vdmVzIHRoaXMgb24gaXRzIG93biBkdWUgdG8gdGhlIHJldHVyblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVmO1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBsb2NhbGUgaXNuJ3QgY29uZmlndXJlZCBoYXJkIG5hdmlnYXRlIHRvIHNob3cgNDA0IHBhZ2VcbiAgICAgICAgICAgICAgICBpZiAoISgocmVmID0gdGhpcy5sb2NhbGVzKSA9PT0gbnVsbCB8fCByZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZi5pbmNsdWRlcyhuZXh0U3RhdGUubG9jYWxlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkQXMucGF0aG5hbWUgPSBhZGRMb2NhbGUocGFyc2VkQXMucGF0aG5hbWUsIG5leHRTdGF0ZS5sb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICgwLCBfZm9ybWF0VXJsKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihwYXJzZWRBcyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2FzIHByZXZpb3VzbHkgYSByZXR1cm4gYnV0IHdhcyByZW1vdmVkIGluIGZhdm9yXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIGJldHRlciBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2l0aCByZWdlbmVyYXRvciBydW50aW1lXG4gICAgICAgICAgICAgICAgICAgIGRpZE5hdmlnYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkZXRlY3RlZERvbWFpbiA9IGRldGVjdERvbWFpbkxvY2FsZSh0aGlzLmRvbWFpbkxvY2FsZXMsIHVuZGVmaW5lZCwgbmV4dFN0YXRlLmxvY2FsZSk7XG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHdyYXAgdGhpcyBpbiB0aGUgZW52IGNoZWNrIGFnYWluIHNpbmNlIHJlZ2VuZXJhdG9yIHJ1bnRpbWVcbiAgICAgICAgICAgIC8vIG1vdmVzIHRoaXMgb24gaXRzIG93biBkdWUgdG8gdGhlIHJldHVyblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBhcmUgbmF2aWdhdGluZyB0byBhIGRvbWFpbiBsb2NhbGUgZW5zdXJlIHdlIHJlZGlyZWN0IHRvIHRoZVxuICAgICAgICAgICAgICAgIC8vIGNvcnJlY3QgZG9tYWluXG4gICAgICAgICAgICAgICAgaWYgKCFkaWROYXZpZ2F0ZSAmJiBkZXRlY3RlZERvbWFpbiAmJiB0aGlzLmlzTG9jYWxlRG9tYWluICYmIHNlbGYubG9jYXRpb24uaG9zdG5hbWUgIT09IGRldGVjdGVkRG9tYWluLmRvbWFpbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhc05vQmFzZVBhdGggPSBkZWxCYXNlUGF0aChhcyk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYGh0dHAke2RldGVjdGVkRG9tYWluLmh0dHAgPyAnJyA6ICdzJ306Ly8ke2RldGVjdGVkRG9tYWluLmRvbWFpbn0ke2FkZEJhc2VQYXRoKGAke25leHRTdGF0ZS5sb2NhbGUgPT09IGRldGVjdGVkRG9tYWluLmRlZmF1bHRMb2NhbGUgPyAnJyA6IGAvJHtuZXh0U3RhdGUubG9jYWxlfWB9JHthc05vQmFzZVBhdGggPT09ICcvJyA/ICcnIDogYXNOb0Jhc2VQYXRofWAgfHwgJy8nKX1gO1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHdhcyBwcmV2aW91c2x5IGEgcmV0dXJuIGJ1dCB3YXMgcmVtb3ZlZCBpbiBmYXZvclxuICAgICAgICAgICAgICAgICAgICAvLyBvZiBiZXR0ZXIgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdpdGggcmVnZW5lcmF0b3IgcnVudGltZVxuICAgICAgICAgICAgICAgICAgICBkaWROYXZpZ2F0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpZE5hdmlnYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgpPT57fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25zLl9oKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3NyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWFya2luZyByb3V0ZSBjaGFuZ2VzIGFzIGEgbmF2aWdhdGlvbiBzdGFydCBlbnRyeVxuICAgICAgICBpZiAoX3V0aWxzLlNUKSB7XG4gICAgICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKCdyb3V0ZUNoYW5nZScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgc2hhbGxvdyA9ZmFsc2UgLCBzY3JvbGwgPXRydWUgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCByb3V0ZVByb3BzID0ge1xuICAgICAgICAgICAgc2hhbGxvd1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5faW5GbGlnaHRSb3V0ZSkge1xuICAgICAgICAgICAgdGhpcy5hYm9ydENvbXBvbmVudExvYWQodGhpcy5faW5GbGlnaHRSb3V0ZSwgcm91dGVQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgYXMgPSBhZGRCYXNlUGF0aChhZGRMb2NhbGUoaGFzQmFzZVBhdGgoYXMpID8gZGVsQmFzZVBhdGgoYXMpIDogYXMsIG9wdGlvbnMubG9jYWxlLCB0aGlzLmRlZmF1bHRMb2NhbGUpKTtcbiAgICAgICAgY29uc3QgY2xlYW5lZEFzID0gZGVsTG9jYWxlKGhhc0Jhc2VQYXRoKGFzKSA/IGRlbEJhc2VQYXRoKGFzKSA6IGFzLCBuZXh0U3RhdGUubG9jYWxlKTtcbiAgICAgICAgdGhpcy5faW5GbGlnaHRSb3V0ZSA9IGFzO1xuICAgICAgICBsZXQgbG9jYWxlQ2hhbmdlID0gcHJldkxvY2FsZSAhPT0gbmV4dFN0YXRlLmxvY2FsZTtcbiAgICAgICAgLy8gSWYgdGhlIHVybCBjaGFuZ2UgaXMgb25seSByZWxhdGVkIHRvIGEgaGFzaCBjaGFuZ2VcbiAgICAgICAgLy8gV2Ugc2hvdWxkIG5vdCBwcm9jZWVkLiBXZSBzaG91bGQgb25seSBjaGFuZ2UgdGhlIHN0YXRlLlxuICAgICAgICAvLyBXQVJOSU5HOiBgX2hgIGlzIGFuIGludGVybmFsIG9wdGlvbiBmb3IgaGFuZGluZyBOZXh0LmpzIGNsaWVudC1zaWRlXG4gICAgICAgIC8vIGh5ZHJhdGlvbi4gWW91ciBhcHAgc2hvdWxkIF9uZXZlcl8gdXNlIHRoaXMgcHJvcGVydHkuIEl0IG1heSBjaGFuZ2UgYXRcbiAgICAgICAgLy8gYW55IHRpbWUgd2l0aG91dCBub3RpY2UuXG4gICAgICAgIGlmICghb3B0aW9ucy5faCAmJiB0aGlzLm9ubHlBSGFzaENoYW5nZShjbGVhbmVkQXMpICYmICFsb2NhbGVDaGFuZ2UpIHtcbiAgICAgICAgICAgIG5leHRTdGF0ZS5hc1BhdGggPSBjbGVhbmVkQXM7XG4gICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoJ2hhc2hDaGFuZ2VTdGFydCcsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgIC8vIFRPRE86IGRvIHdlIG5lZWQgdGhlIHJlc29sdmVkIGhyZWYgd2hlbiBvbmx5IGEgaGFzaCBjaGFuZ2U/XG4gICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKG1ldGhvZCwgdXJsLCBhcywge1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgc2Nyb2xsOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUb0hhc2goY2xlYW5lZEFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0KG5leHRTdGF0ZSwgdGhpcy5jb21wb25lbnRzW25leHRTdGF0ZS5yb3V0ZV0sIG51bGwpO1xuICAgICAgICAgICAgUm91dGVyLmV2ZW50cy5lbWl0KCdoYXNoQ2hhbmdlQ29tcGxldGUnLCBhcywgcm91dGVQcm9wcyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFyc2VkID0gKDAsIF9wYXJzZVJlbGF0aXZlVXJsKS5wYXJzZVJlbGF0aXZlVXJsKHVybCk7XG4gICAgICAgIGxldCB7IHBhdGhuYW1lICwgcXVlcnkgIH0gPSBwYXJzZWQ7XG4gICAgICAgIC8vIFRoZSBidWlsZCBtYW5pZmVzdCBuZWVkcyB0byBiZSBsb2FkZWQgYmVmb3JlIGF1dG8tc3RhdGljIGR5bmFtaWMgcGFnZXNcbiAgICAgICAgLy8gZ2V0IHRoZWlyIHF1ZXJ5IHBhcmFtZXRlcnMgdG8gYWxsb3cgZW5zdXJpbmcgdGhleSBjYW4gYmUgcGFyc2VkIHByb3Blcmx5XG4gICAgICAgIC8vIHdoZW4gcmV3cml0dGVuIHRvXG4gICAgICAgIGxldCBwYWdlcywgcmV3cml0ZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBbcGFnZXMsIHsgX19yZXdyaXRlczogcmV3cml0ZXMgIH1dID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIHRoaXMucGFnZUxvYWRlci5nZXRQYWdlTGlzdCgpLFxuICAgICAgICAgICAgICAgICgwLCBfcm91dGVMb2FkZXIpLmdldENsaWVudEJ1aWxkTWFuaWZlc3QoKSxcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VMb2FkZXIuZ2V0TWlkZGxld2FyZUxpc3QoKSwgXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBmYWlsIHRvIHJlc29sdmUgdGhlIHBhZ2UgbGlzdCBvciBjbGllbnQtYnVpbGQgbWFuaWZlc3QsIHdlIG11c3RcbiAgICAgICAgICAgIC8vIGRvIGEgc2VydmVyLXNpZGUgdHJhbnNpdGlvbjpcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYXM7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYXNrZWQgdG8gY2hhbmdlIHRoZSBjdXJyZW50IFVSTCB3ZSBzaG91bGQgcmVsb2FkIHRoZSBjdXJyZW50IHBhZ2VcbiAgICAgICAgLy8gKG5vdCBsb2NhdGlvbi5yZWxvYWQoKSBidXQgcmVsb2FkIGdldEluaXRpYWxQcm9wcyBhbmQgb3RoZXIgTmV4dC5qcyBzdHVmZnMpXG4gICAgICAgIC8vIFdlIGFsc28gbmVlZCB0byBzZXQgdGhlIG1ldGhvZCA9IHJlcGxhY2VTdGF0ZSBhbHdheXNcbiAgICAgICAgLy8gYXMgdGhpcyBzaG91bGQgbm90IGdvIGludG8gdGhlIGhpc3RvcnkgKFRoYXQncyBob3cgYnJvd3NlcnMgd29yaylcbiAgICAgICAgLy8gV2Ugc2hvdWxkIGNvbXBhcmUgdGhlIG5ldyBhc1BhdGggdG8gdGhlIGN1cnJlbnQgYXNQYXRoLCBub3QgdGhlIHVybFxuICAgICAgICBpZiAoIXRoaXMudXJsSXNOZXcoY2xlYW5lZEFzKSAmJiAhbG9jYWxlQ2hhbmdlKSB7XG4gICAgICAgICAgICBtZXRob2QgPSAncmVwbGFjZVN0YXRlJztcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHJlc29sdmUgdGhlIGFzIHZhbHVlIHVzaW5nIHJld3JpdGVzIGZvciBkeW5hbWljIFNTR1xuICAgICAgICAvLyBwYWdlcyB0byBhbGxvdyBidWlsZGluZyB0aGUgZGF0YSBVUkwgY29ycmVjdGx5XG4gICAgICAgIGxldCByZXNvbHZlZEFzID0gYXM7XG4gICAgICAgIC8vIHVybCBhbmQgYXMgc2hvdWxkIGFsd2F5cyBiZSBwcmVmaXhlZCB3aXRoIGJhc2VQYXRoIGJ5IHRoaXNcbiAgICAgICAgLy8gcG9pbnQgYnkgZWl0aGVyIG5leHQvbGluayBvciByb3V0ZXIucHVzaC9yZXBsYWNlIHNvIHN0cmlwIHRoZVxuICAgICAgICAvLyBiYXNlUGF0aCBmcm9tIHRoZSBwYXRobmFtZSB0byBtYXRjaCB0aGUgcGFnZXMgZGlyIDEtdG8tMVxuICAgICAgICBwYXRobmFtZSA9IHBhdGhuYW1lID8gKDAsIF9ub3JtYWxpemVUcmFpbGluZ1NsYXNoKS5yZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChkZWxCYXNlUGF0aChwYXRobmFtZSkpIDogcGF0aG5hbWU7XG4gICAgICAgIGlmIChzaG91bGRSZXNvbHZlSHJlZiAmJiBwYXRobmFtZSAhPT0gJy9fZXJyb3InKSB7XG4gICAgICAgICAgICBvcHRpb25zLl9zaG91bGRSZXNvbHZlSHJlZiA9IHRydWU7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0hBU19SRVdSSVRFUyAmJiBhcy5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXdyaXRlc1Jlc3VsdCA9ICgwLCBfcmVzb2x2ZVJld3JpdGVzKS5kZWZhdWx0KGFkZEJhc2VQYXRoKGFkZExvY2FsZShjbGVhbmVkQXMsIG5leHRTdGF0ZS5sb2NhbGUpKSwgcGFnZXMsIHJld3JpdGVzLCBxdWVyeSwgKHApPT5yZXNvbHZlRHluYW1pY1JvdXRlKHAsIHBhZ2VzKVxuICAgICAgICAgICAgICAgICwgdGhpcy5sb2NhbGVzKTtcbiAgICAgICAgICAgICAgICBpZiAocmV3cml0ZXNSZXN1bHQuZXh0ZXJuYWxEZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSBhcztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmVkQXMgPSByZXdyaXRlc1Jlc3VsdC5hc1BhdGg7XG4gICAgICAgICAgICAgICAgaWYgKHJld3JpdGVzUmVzdWx0Lm1hdGNoZWRQYWdlICYmIHJld3JpdGVzUmVzdWx0LnJlc29sdmVkSHJlZikge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGRpcmVjdGx5IG1hdGNoZXMgYSBwYWdlIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBocmVmIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIGFsbG93IHRoZSBjb3JyZWN0IHBhZ2UgY2h1bmsgdG8gYmUgbG9hZGVkXG4gICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gcmV3cml0ZXNSZXN1bHQucmVzb2x2ZWRIcmVmO1xuICAgICAgICAgICAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSBhZGRCYXNlUGF0aChwYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHVybCA9ICgwLCBfZm9ybWF0VXJsKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihwYXJzZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkLnBhdGhuYW1lID0gcmVzb2x2ZUR5bmFtaWNSb3V0ZShwYXRobmFtZSwgcGFnZXMpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQucGF0aG5hbWUgIT09IHBhdGhuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gcGFyc2VkLnBhdGhuYW1lO1xuICAgICAgICAgICAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSBhZGRCYXNlUGF0aChwYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHVybCA9ICgwLCBfZm9ybWF0VXJsKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihwYXJzZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzTG9jYWxVUkwoYXMpKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBocmVmOiBcIiR7dXJsfVwiIGFuZCBhczogXCIke2FzfVwiLCByZWNlaXZlZCByZWxhdGl2ZSBocmVmIGFuZCBleHRlcm5hbCBhc2AgKyBgXFxuU2VlIG1vcmUgaW5mbzogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvaW52YWxpZC1yZWxhdGl2ZS11cmwtZXh0ZXJuYWwtYXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYXM7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZWRBcyA9IGRlbExvY2FsZShkZWxCYXNlUGF0aChyZXNvbHZlZEFzKSwgbmV4dFN0YXRlLmxvY2FsZSk7XG4gICAgICAgIC8qKlxuICAgICAqIElmIHRoZSByb3V0ZSB1cGRhdGUgd2FzIHRyaWdnZXJlZCBmb3IgY2xpZW50LXNpZGUgaHlkcmF0aW9uIGFuZFxuICAgICAqIHRoZSByZW5kZXJlZCByb3V0ZSBpcyBub3QgZHluYW1pYyBkbyBub3QgY2hlY2sgdGhlIHByZWZsaWdodFxuICAgICAqIHJlcXVlc3QgYXMgaXQgaXMgbm90IG5lY2Vzc2FyeS5cbiAgICAgKi8gaWYgKCghb3B0aW9ucy5zaGFsbG93IHx8IG9wdGlvbnMuX2ggPT09IDEpICYmIChvcHRpb25zLl9oICE9PSAxIHx8ICgwLCBfaXNEeW5hbWljKS5pc0R5bmFtaWNSb3V0ZSgoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGhuYW1lKSkpKSB7XG4gICAgICAgICAgICBjb25zdCBlZmZlY3QgPSBhd2FpdCB0aGlzLl9wcmVmbGlnaHRSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICBhcyxcbiAgICAgICAgICAgICAgICBjYWNoZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyxcbiAgICAgICAgICAgICAgICBwYWdlcyxcbiAgICAgICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgICAgICBsb2NhbGU6IG5leHRTdGF0ZS5sb2NhbGUsXG4gICAgICAgICAgICAgICAgaXNQcmV2aWV3OiBuZXh0U3RhdGUuaXNQcmV2aWV3XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChlZmZlY3QudHlwZSA9PT0gJ3Jld3JpdGUnKSB7XG4gICAgICAgICAgICAgICAgcXVlcnkgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAuLi5lZmZlY3QucGFyc2VkQXMucXVlcnlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlc29sdmVkQXMgPSBlZmZlY3QuYXNQYXRoO1xuICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gZWZmZWN0LnJlc29sdmVkSHJlZjtcbiAgICAgICAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSBlZmZlY3QucmVzb2x2ZWRIcmVmO1xuICAgICAgICAgICAgICAgIHVybCA9ICgwLCBfZm9ybWF0VXJsKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihwYXJzZWQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlZmZlY3QudHlwZSA9PT0gJ3JlZGlyZWN0JyAmJiBlZmZlY3QubmV3QXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFuZ2UobWV0aG9kLCBlZmZlY3QubmV3VXJsLCBlZmZlY3QubmV3QXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlZmZlY3QudHlwZSA9PT0gJ3JlZGlyZWN0JyAmJiBlZmZlY3QuZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGVmZmVjdC5kZXN0aW5hdGlvbjtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCk9Pnt9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWZmZWN0LnR5cGUgPT09ICdyZWZyZXNoJyAmJiBhcyAhPT0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBhcztcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCk9Pnt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3V0ZSA9ICgwLCBfbm9ybWFsaXplVHJhaWxpbmdTbGFzaCkucmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2gocGF0aG5hbWUpO1xuICAgICAgICBpZiAoKDAsIF9pc0R5bmFtaWMpLmlzRHluYW1pY1JvdXRlKHJvdXRlKSkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkQXMgPSAoMCwgX3BhcnNlUmVsYXRpdmVVcmwpLnBhcnNlUmVsYXRpdmVVcmwocmVzb2x2ZWRBcyk7XG4gICAgICAgICAgICBjb25zdCBhc1BhdGhuYW1lID0gcGFyc2VkQXMucGF0aG5hbWU7XG4gICAgICAgICAgICBjb25zdCByb3V0ZVJlZ2V4ID0gKDAsIF9yb3V0ZVJlZ2V4KS5nZXRSb3V0ZVJlZ2V4KHJvdXRlKTtcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlTWF0Y2ggPSAoMCwgX3JvdXRlTWF0Y2hlcikuZ2V0Um91dGVNYXRjaGVyKHJvdXRlUmVnZXgpKGFzUGF0aG5hbWUpO1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkSW50ZXJwb2xhdGUgPSByb3V0ZSA9PT0gYXNQYXRobmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRlZEFzID0gc2hvdWxkSW50ZXJwb2xhdGUgPyBpbnRlcnBvbGF0ZUFzKHJvdXRlLCBhc1BhdGhuYW1lLCBxdWVyeSkgOiB7fTtcbiAgICAgICAgICAgIGlmICghcm91dGVNYXRjaCB8fCBzaG91bGRJbnRlcnBvbGF0ZSAmJiAhaW50ZXJwb2xhdGVkQXMucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWlzc2luZ1BhcmFtcyA9IE9iamVjdC5rZXlzKHJvdXRlUmVnZXguZ3JvdXBzKS5maWx0ZXIoKHBhcmFtKT0+IXF1ZXJ5W3BhcmFtXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKG1pc3NpbmdQYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGAke3Nob3VsZEludGVycG9sYXRlID8gYEludGVycG9sYXRpbmcgaHJlZmAgOiBgTWlzbWF0Y2hpbmcgXFxgYXNcXGAgYW5kIFxcYGhyZWZcXGBgfSBmYWlsZWQgdG8gbWFudWFsbHkgcHJvdmlkZSBgICsgYHRoZSBwYXJhbXM6ICR7bWlzc2luZ1BhcmFtcy5qb2luKCcsICcpfSBpbiB0aGUgXFxgaHJlZlxcYCdzIFxcYHF1ZXJ5XFxgYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKChzaG91bGRJbnRlcnBvbGF0ZSA/IGBUaGUgcHJvdmlkZWQgXFxgaHJlZlxcYCAoJHt1cmx9KSB2YWx1ZSBpcyBtaXNzaW5nIHF1ZXJ5IHZhbHVlcyAoJHttaXNzaW5nUGFyYW1zLmpvaW4oJywgJyl9KSB0byBiZSBpbnRlcnBvbGF0ZWQgcHJvcGVybHkuIGAgOiBgVGhlIHByb3ZpZGVkIFxcYGFzXFxgIHZhbHVlICgke2FzUGF0aG5hbWV9KSBpcyBpbmNvbXBhdGlibGUgd2l0aCB0aGUgXFxgaHJlZlxcYCB2YWx1ZSAoJHtyb3V0ZX0pLiBgKSArIGBSZWFkIG1vcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzLyR7c2hvdWxkSW50ZXJwb2xhdGUgPyAnaHJlZi1pbnRlcnBvbGF0aW9uLWZhaWxlZCcgOiAnaW5jb21wYXRpYmxlLWhyZWYtYXMnfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hvdWxkSW50ZXJwb2xhdGUpIHtcbiAgICAgICAgICAgICAgICBhcyA9ICgwLCBfZm9ybWF0VXJsKS5mb3JtYXRXaXRoVmFsaWRhdGlvbihPYmplY3QuYXNzaWduKHt9LCBwYXJzZWRBcywge1xuICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogaW50ZXJwb2xhdGVkQXMucmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogb21pdFBhcm1zRnJvbVF1ZXJ5KHF1ZXJ5LCBpbnRlcnBvbGF0ZWRBcy5wYXJhbXMpXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBNZXJnZSBwYXJhbXMgaW50byBgcXVlcnlgLCBvdmVyd3JpdGluZyBhbnkgc3BlY2lmaWVkIGluIHNlYXJjaFxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocXVlcnksIHJvdXRlTWF0Y2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFJvdXRlci5ldmVudHMuZW1pdCgncm91dGVDaGFuZ2VTdGFydCcsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZWYxLCByZWYyO1xuICAgICAgICAgICAgbGV0IHJvdXRlSW5mbyA9IGF3YWl0IHRoaXMuZ2V0Um91dGVJbmZvKHJvdXRlLCBwYXRobmFtZSwgcXVlcnksIGFzLCByZXNvbHZlZEFzLCByb3V0ZVByb3BzLCBuZXh0U3RhdGUubG9jYWxlLCBuZXh0U3RhdGUuaXNQcmV2aWV3KTtcbiAgICAgICAgICAgIGxldCB7IGVycm9yICwgcHJvcHMgLCBfX05fU1NHICwgX19OX1NTUCAgfSA9IHJvdXRlSW5mbztcbiAgICAgICAgICAgIC8vIGhhbmRsZSByZWRpcmVjdCBvbiBjbGllbnQtdHJhbnNpdGlvblxuICAgICAgICAgICAgaWYgKChfX05fU1NHIHx8IF9fTl9TU1ApICYmIHByb3BzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLnBhZ2VQcm9wcyAmJiBwcm9wcy5wYWdlUHJvcHMuX19OX1JFRElSRUNUKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gcHJvcHMucGFnZVByb3BzLl9fTl9SRURJUkVDVDtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgZGVzdGluYXRpb24gaXMgaW50ZXJuYWwgKHJlc29sdmVzIHRvIGEgcGFnZSkgYW5kIGF0dGVtcHRcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xpZW50LW5hdmlnYXRpb24gaWYgaXQgaXMgZmFsbGluZyBiYWNrIHRvIGhhcmQgbmF2aWdhdGlvbiBpZlxuICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIG5vdFxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdGluYXRpb24uc3RhcnRzV2l0aCgnLycpICYmIHByb3BzLnBhZ2VQcm9wcy5fX05fUkVESVJFQ1RfQkFTRV9QQVRIICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkSHJlZiA9ICgwLCBfcGFyc2VSZWxhdGl2ZVVybCkucGFyc2VSZWxhdGl2ZVVybChkZXN0aW5hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWRIcmVmLnBhdGhuYW1lID0gcmVzb2x2ZUR5bmFtaWNSb3V0ZShwYXJzZWRIcmVmLnBhdGhuYW1lLCBwYWdlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHVybDogbmV3VXJsICwgYXM6IG5ld0FzICB9ID0gcHJlcGFyZVVybEFzKHRoaXMsIGRlc3RpbmF0aW9uLCBkZXN0aW5hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFuZ2UobWV0aG9kLCBuZXdVcmwsIG5ld0FzLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCk9Pnt9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dFN0YXRlLmlzUHJldmlldyA9ICEhcHJvcHMuX19OX1BSRVZJRVc7XG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIFNTRyBkYXRhIDQwNFxuICAgICAgICAgICAgICAgIGlmIChwcm9wcy5ub3RGb3VuZCA9PT0gU1NHX0RBVEFfTk9UX0ZPVU5EKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBub3RGb3VuZFJvdXRlO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5mZXRjaENvbXBvbmVudCgnLzQwNCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90Rm91bmRSb3V0ZSA9ICcvNDA0JztcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90Rm91bmRSb3V0ZSA9ICcvX2Vycm9yJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByb3V0ZUluZm8gPSBhd2FpdCB0aGlzLmdldFJvdXRlSW5mbyhub3RGb3VuZFJvdXRlLCBub3RGb3VuZFJvdXRlLCBxdWVyeSwgYXMsIHJlc29sdmVkQXMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWxsb3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sIG5leHRTdGF0ZS5sb2NhbGUsIG5leHRTdGF0ZS5pc1ByZXZpZXcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFJvdXRlci5ldmVudHMuZW1pdCgnYmVmb3JlSGlzdG9yeUNoYW5nZScsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUobWV0aG9kLCB1cmwsIGFzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLl9oICYmIHBhdGhuYW1lID09PSAnL19lcnJvcicgJiYgKChyZWYxID0gc2VsZi5fX05FWFRfREFUQV9fLnByb3BzKSA9PT0gbnVsbCB8fCByZWYxID09PSB2b2lkIDAgPyB2b2lkIDAgOiAocmVmMiA9IHJlZjEucGFnZVByb3BzKSA9PT0gbnVsbCB8fCByZWYyID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWYyLnN0YXR1c0NvZGUpID09PSA1MDAgJiYgKHByb3BzID09PSBudWxsIHx8IHByb3BzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm9wcy5wYWdlUHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgLy8gZW5zdXJlIHN0YXR1c0NvZGUgaXMgc3RpbGwgY29ycmVjdCBmb3Igc3RhdGljIDUwMCBwYWdlXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB1cGRhdGluZyBxdWVyeSBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICAgIHByb3BzLnBhZ2VQcm9wcy5zdGF0dXNDb2RlID0gNTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc2hhbGxvdyByb3V0aW5nIGlzIG9ubHkgYWxsb3dlZCBmb3Igc2FtZSBwYWdlIFVSTCBjaGFuZ2VzLlxuICAgICAgICAgICAgY29uc3QgaXNWYWxpZFNoYWxsb3dSb3V0ZSA9IG9wdGlvbnMuc2hhbGxvdyAmJiBuZXh0U3RhdGUucm91dGUgPT09IHJvdXRlO1xuICAgICAgICAgICAgdmFyIF9zY3JvbGw7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRTY3JvbGwgPSAoX3Njcm9sbCA9IG9wdGlvbnMuc2Nyb2xsKSAhPT0gbnVsbCAmJiBfc2Nyb2xsICE9PSB2b2lkIDAgPyBfc2Nyb2xsIDogIWlzVmFsaWRTaGFsbG93Um91dGU7XG4gICAgICAgICAgICBjb25zdCByZXNldFNjcm9sbCA9IHNob3VsZFNjcm9sbCA/IHtcbiAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICAgIH0gOiBudWxsO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXQoe1xuICAgICAgICAgICAgICAgIC4uLm5leHRTdGF0ZSxcbiAgICAgICAgICAgICAgICByb3V0ZSxcbiAgICAgICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgICAgICBhc1BhdGg6IGNsZWFuZWRBcyxcbiAgICAgICAgICAgICAgICBpc0ZhbGxiYWNrOiBmYWxzZVxuICAgICAgICAgICAgfSwgcm91dGVJbmZvLCBmb3JjZWRTY3JvbGwgIT09IG51bGwgJiYgZm9yY2VkU2Nyb2xsICE9PSB2b2lkIDAgPyBmb3JjZWRTY3JvbGwgOiByZXNldFNjcm9sbCkuY2F0Y2goKGUpPT57XG4gICAgICAgICAgICAgICAgaWYgKGUuY2FuY2VsbGVkKSBlcnJvciA9IGVycm9yIHx8IGU7XG4gICAgICAgICAgICAgICAgZWxzZSB0aHJvdyBlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoJ3JvdXRlQ2hhbmdlRXJyb3InLCBlcnJvciwgY2xlYW5lZEFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRTdGF0ZS5sb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcgPSBuZXh0U3RhdGUubG9jYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFJvdXRlci5ldmVudHMuZW1pdCgncm91dGVDaGFuZ2VDb21wbGV0ZScsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChlcnIxKSB7XG4gICAgICAgICAgICBpZiAoKDAsIF9pc0Vycm9yKS5kZWZhdWx0KGVycjEpICYmIGVycjEuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGFuZ2VTdGF0ZShtZXRob2QsIHVybCwgYXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuaGlzdG9yeSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBXYXJuaW5nOiB3aW5kb3cuaGlzdG9yeSBpcyBub3QgYXZhaWxhYmxlLmApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93Lmhpc3RvcnlbbWV0aG9kXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBXYXJuaW5nOiB3aW5kb3cuaGlzdG9yeS4ke21ldGhvZH0gaXMgbm90IGF2YWlsYWJsZWApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0aG9kICE9PSAncHVzaFN0YXRlJyB8fCAoMCwgX3V0aWxzKS5nZXRVUkwoKSAhPT0gYXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3NoYWxsb3cgPSBvcHRpb25zLnNoYWxsb3c7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeVttZXRob2RdKHtcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgYXMsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBfX046IHRydWUsXG4gICAgICAgICAgICAgICAgaWR4OiB0aGlzLl9pZHggPSBtZXRob2QgIT09ICdwdXNoU3RhdGUnID8gdGhpcy5faWR4IDogdGhpcy5faWR4ICsgMVxuICAgICAgICAgICAgfSwgLy8gTW9zdCBicm93c2VycyBjdXJyZW50bHkgaWdub3JlcyB0aGlzIHBhcmFtZXRlciwgYWx0aG91Z2ggdGhleSBtYXkgdXNlIGl0IGluIHRoZSBmdXR1cmUuXG4gICAgICAgICAgICAvLyBQYXNzaW5nIHRoZSBlbXB0eSBzdHJpbmcgaGVyZSBzaG91bGQgYmUgc2FmZSBhZ2FpbnN0IGZ1dHVyZSBjaGFuZ2VzIHRvIHRoZSBtZXRob2QuXG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSGlzdG9yeS9yZXBsYWNlU3RhdGVcbiAgICAgICAgICAgICcnLCBhcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgaGFuZGxlUm91dGVJbmZvRXJyb3IoZXJyLCBwYXRobmFtZSwgcXVlcnksIGFzLCByb3V0ZVByb3BzLCBsb2FkRXJyb3JGYWlsKSB7XG4gICAgICAgIGlmIChlcnIuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAvLyBidWJibGUgdXAgY2FuY2VsbGF0aW9uIGVycm9yc1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgX3JvdXRlTG9hZGVyKS5pc0Fzc2V0RXJyb3IoZXJyKSB8fCBsb2FkRXJyb3JGYWlsKSB7XG4gICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoJ3JvdXRlQ2hhbmdlRXJyb3InLCBlcnIsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgIC8vIElmIHdlIGNhbid0IGxvYWQgdGhlIHBhZ2UgaXQgY291bGQgYmUgb25lIG9mIGZvbGxvd2luZyByZWFzb25zXG4gICAgICAgICAgICAvLyAgMS4gUGFnZSBkb2Vzbid0IGV4aXN0c1xuICAgICAgICAgICAgLy8gIDIuIFBhZ2UgZG9lcyBleGlzdCBpbiBhIGRpZmZlcmVudCB6b25lXG4gICAgICAgICAgICAvLyAgMy4gSW50ZXJuYWwgZXJyb3Igd2hpbGUgbG9hZGluZyB0aGUgcGFnZVxuICAgICAgICAgICAgLy8gU28sIGRvaW5nIGEgaGFyZCByZWxvYWQgaXMgdGhlIHByb3BlciB3YXkgdG8gZGVhbCB3aXRoIHRoaXMuXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGFzO1xuICAgICAgICAgICAgLy8gQ2hhbmdpbmcgdGhlIFVSTCBkb2Vzbid0IGJsb2NrIGV4ZWN1dGluZyB0aGUgY3VycmVudCBjb2RlIHBhdGguXG4gICAgICAgICAgICAvLyBTbyBsZXQncyB0aHJvdyBhIGNhbmNlbGxhdGlvbiBlcnJvciBzdG9wIHRoZSByb3V0aW5nIGxvZ2ljLlxuICAgICAgICAgICAgdGhyb3cgYnVpbGRDYW5jZWxsYXRpb25FcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgQ29tcG9uZW50O1xuICAgICAgICAgICAgbGV0IHN0eWxlU2hlZXRzO1xuICAgICAgICAgICAgbGV0IHByb3BzO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBDb21wb25lbnQgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBzdHlsZVNoZWV0cyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAoeyBwYWdlOiBDb21wb25lbnQgLCBzdHlsZVNoZWV0cyAgfSA9IGF3YWl0IHRoaXMuZmV0Y2hDb21wb25lbnQoJy9fZXJyb3InKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByb3V0ZUluZm8gPSB7XG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgIHN0eWxlU2hlZXRzLFxuICAgICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCFyb3V0ZUluZm8ucHJvcHMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByb3V0ZUluZm8ucHJvcHMgPSBhd2FpdCB0aGlzLmdldEluaXRpYWxQcm9wcyhDb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZ2lwRXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGVycm9yIHBhZ2UgYGdldEluaXRpYWxQcm9wc2A6ICcsIGdpcEVycik7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlSW5mby5wcm9wcyA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByb3V0ZUluZm87XG4gICAgICAgIH0gY2F0Y2ggKHJvdXRlSW5mb0Vycikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlUm91dGVJbmZvRXJyb3IoKDAsIF9pc0Vycm9yKS5kZWZhdWx0KHJvdXRlSW5mb0VycikgPyByb3V0ZUluZm9FcnIgOiBuZXcgRXJyb3Iocm91dGVJbmZvRXJyICsgJycpLCBwYXRobmFtZSwgcXVlcnksIGFzLCByb3V0ZVByb3BzLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXRSb3V0ZUluZm8ocm91dGUsIHBhdGhuYW1lLCBxdWVyeSwgYXMsIHJlc29sdmVkQXMsIHJvdXRlUHJvcHMsIGxvY2FsZSwgaXNQcmV2aWV3KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ1JvdXRlSW5mbyA9IHRoaXMuY29tcG9uZW50c1tyb3V0ZV07XG4gICAgICAgICAgICBpZiAocm91dGVQcm9wcy5zaGFsbG93ICYmIGV4aXN0aW5nUm91dGVJbmZvICYmIHRoaXMucm91dGUgPT09IHJvdXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nUm91dGVJbmZvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNhY2hlZFJvdXRlSW5mbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIC8vIGNhbiBvbmx5IHVzZSBub24taW5pdGlhbCByb3V0ZSBpbmZvXG4gICAgICAgICAgICAvLyBjYW5ub3QgcmV1c2Ugcm91dGUgaW5mbyBpbiBkZXZlbG9wbWVudCBzaW5jZSBpdCBjYW4gY2hhbmdlIGFmdGVyIEhNUlxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnICYmIGV4aXN0aW5nUm91dGVJbmZvICYmICEoJ2luaXRpYWwnIGluIGV4aXN0aW5nUm91dGVJbmZvKSkge1xuICAgICAgICAgICAgICAgIGNhY2hlZFJvdXRlSW5mbyA9IGV4aXN0aW5nUm91dGVJbmZvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgcm91dGVJbmZvID0gY2FjaGVkUm91dGVJbmZvIHx8IGF3YWl0IHRoaXMuZmV0Y2hDb21wb25lbnQocm91dGUpLnRoZW4oKHJlcyk9Pih7XG4gICAgICAgICAgICAgICAgICAgIENvbXBvbmVudDogcmVzLnBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlU2hlZXRzOiByZXMuc3R5bGVTaGVldHMsXG4gICAgICAgICAgICAgICAgICAgIF9fTl9TU0c6IHJlcy5tb2QuX19OX1NTRyxcbiAgICAgICAgICAgICAgICAgICAgX19OX1NTUDogcmVzLm1vZC5fX05fU1NQLFxuICAgICAgICAgICAgICAgICAgICBfX05fUlNDOiAhIXJlcy5tb2QuX19uZXh0X3JzY19fXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCB7IENvbXBvbmVudCAsIF9fTl9TU0cgLCBfX05fU1NQICwgX19OX1JTQyAgfSA9IHJvdXRlSW5mbztcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBpc1ZhbGlkRWxlbWVudFR5cGUgIH0gPSByZXF1aXJlKCduZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QtaXMnKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWRFbGVtZW50VHlwZShDb21wb25lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGRlZmF1bHQgZXhwb3J0IGlzIG5vdCBhIFJlYWN0IENvbXBvbmVudCBpbiBwYWdlOiBcIiR7cGF0aG5hbWV9XCJgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZGF0YUhyZWY7XG4gICAgICAgICAgICAvLyBGb3Igc2VydmVyIGNvbXBvbmVudHMsIG5vbi1TU1IgcGFnZXMgd2lsbCBoYXZlIHN0YXRpY2FsbHkgb3B0aW1pemVkXG4gICAgICAgICAgICAvLyBmbGlnaHQgZGF0YSBpbiBhIHByb2R1Y3Rpb24gYnVpbGQuXG4gICAgICAgICAgICAvLyBTbyBvbmx5IGRldmVsb3BtZW50IGFuZCBTU1IgcGFnZXMgd2lsbCBhbHdheXMgaGF2ZSB0aGUgcmVhbC10aW1lXG4gICAgICAgICAgICAvLyBnZW5lcmF0ZWQgYW5kIHN0cmVhbWVkIGZsaWdodCBkYXRhLlxuICAgICAgICAgICAgY29uc3QgdXNlU3RyZWFtZWRGbGlnaHREYXRhID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgfHwgX19OX1NTUCkgJiYgX19OX1JTQztcbiAgICAgICAgICAgIGlmIChfX05fU1NHIHx8IF9fTl9TU1AgfHwgX19OX1JTQykge1xuICAgICAgICAgICAgICAgIGRhdGFIcmVmID0gdGhpcy5wYWdlTG9hZGVyLmdldERhdGFIcmVmKHtcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogKDAsIF9mb3JtYXRVcmwpLmZvcm1hdFdpdGhWYWxpZGF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGFzUGF0aDogcmVzb2x2ZWRBcyxcbiAgICAgICAgICAgICAgICAgICAgc3NnOiBfX05fU1NHLFxuICAgICAgICAgICAgICAgICAgICBmbGlnaHQ6IHVzZVN0cmVhbWVkRmxpZ2h0RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IGF3YWl0IHRoaXMuX2dldERhdGEoKCk9PihfX05fU1NHIHx8IF9fTl9TU1AgfHwgX19OX1JTQykgJiYgIXVzZVN0cmVhbWVkRmxpZ2h0RGF0YSA/IGZldGNoTmV4dERhdGEoZGF0YUhyZWYsIHRoaXMuaXNTc3IsIGZhbHNlLCBfX05fU1NHID8gdGhpcy5zZGMgOiB0aGlzLnNkciwgISFfX05fU1NHICYmICFpc1ByZXZpZXcpIDogdGhpcy5nZXRJbml0aWFsUHJvcHMoQ29tcG9uZW50LCAvLyB3ZSBwcm92aWRlIEFwcFRyZWUgbGF0ZXIgc28gdGhpcyBuZWVkcyB0byBiZSBgYW55YFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICBhc1BhdGg6IGFzLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZXM6IHRoaXMubG9jYWxlcyxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdExvY2FsZTogdGhpcy5kZWZhdWx0TG9jYWxlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoX19OX1JTQykge1xuICAgICAgICAgICAgICAgIGlmICh1c2VTdHJlYW1lZEZsaWdodERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhICB9ID0gYXdhaXQgdGhpcy5fZ2V0RGF0YSgoKT0+dGhpcy5fZ2V0RmxpZ2h0RGF0YShkYXRhSHJlZilcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMucGFnZVByb3BzID0gT2JqZWN0LmFzc2lnbihwcm9wcy5wYWdlUHJvcHMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fZmxpZ2h0X186IGRhdGFcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBfX2ZsaWdodF9fICB9ID0gcHJvcHM7XG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnBhZ2VQcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIHByb3BzLnBhZ2VQcm9wcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgX19mbGlnaHRfX1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3V0ZUluZm8ucHJvcHMgPSBwcm9wcztcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50c1tyb3V0ZV0gPSByb3V0ZUluZm87XG4gICAgICAgICAgICByZXR1cm4gcm91dGVJbmZvO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVJvdXRlSW5mb0Vycm9yKCgwLCBfaXNFcnJvcikuZ2V0UHJvcGVyRXJyb3IoZXJyKSwgcGF0aG5hbWUsIHF1ZXJ5LCBhcywgcm91dGVQcm9wcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0KHN0YXRlLCBkYXRhLCByZXNldFNjcm9sbCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHJldHVybiB0aGlzLnN1YihkYXRhLCB0aGlzLmNvbXBvbmVudHNbJy9fYXBwJ10uQ29tcG9uZW50LCByZXNldFNjcm9sbCk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBDYWxsYmFjayB0byBleGVjdXRlIGJlZm9yZSByZXBsYWNpbmcgcm91dGVyIHN0YXRlXG4gICAqIEBwYXJhbSBjYiBjYWxsYmFjayB0byBiZSBleGVjdXRlZFxuICAgKi8gYmVmb3JlUG9wU3RhdGUoY2IpIHtcbiAgICAgICAgdGhpcy5fYnBzID0gY2I7XG4gICAgfVxuICAgIG9ubHlBSGFzaENoYW5nZShhcykge1xuICAgICAgICBpZiAoIXRoaXMuYXNQYXRoKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IFtvbGRVcmxOb0hhc2gsIG9sZEhhc2hdID0gdGhpcy5hc1BhdGguc3BsaXQoJyMnKTtcbiAgICAgICAgY29uc3QgW25ld1VybE5vSGFzaCwgbmV3SGFzaF0gPSBhcy5zcGxpdCgnIycpO1xuICAgICAgICAvLyBNYWtlcyBzdXJlIHdlIHNjcm9sbCB0byB0aGUgcHJvdmlkZWQgaGFzaCBpZiB0aGUgdXJsL2hhc2ggYXJlIHRoZSBzYW1lXG4gICAgICAgIGlmIChuZXdIYXNoICYmIG9sZFVybE5vSGFzaCA9PT0gbmV3VXJsTm9IYXNoICYmIG9sZEhhc2ggPT09IG5ld0hhc2gpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSB1cmxzIGFyZSBjaGFuZ2UsIHRoZXJlJ3MgbW9yZSB0aGFuIGEgaGFzaCBjaGFuZ2VcbiAgICAgICAgaWYgKG9sZFVybE5vSGFzaCAhPT0gbmV3VXJsTm9IYXNoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIGhhc2ggaGFzIGNoYW5nZWQsIHRoZW4gaXQncyBhIGhhc2ggb25seSBjaGFuZ2UuXG4gICAgICAgIC8vIFRoaXMgY2hlY2sgaXMgbmVjZXNzYXJ5IHRvIGhhbmRsZSBib3RoIHRoZSBlbnRlciBhbmRcbiAgICAgICAgLy8gbGVhdmUgaGFzaCA9PT0gJycgY2FzZXMuIFRoZSBpZGVudGl0eSBjYXNlIGZhbGxzIHRocm91Z2hcbiAgICAgICAgLy8gYW5kIGlzIHRyZWF0ZWQgYXMgYSBuZXh0IHJlbG9hZC5cbiAgICAgICAgcmV0dXJuIG9sZEhhc2ggIT09IG5ld0hhc2g7XG4gICAgfVxuICAgIHNjcm9sbFRvSGFzaChhcykge1xuICAgICAgICBjb25zdCBbLCBoYXNoID0gJyddID0gYXMuc3BsaXQoJyMnKTtcbiAgICAgICAgLy8gU2Nyb2xsIHRvIHRvcCBpZiB0aGUgaGFzaCBpcyBqdXN0IGAjYCB3aXRoIG5vIHZhbHVlIG9yIGAjdG9wYFxuICAgICAgICAvLyBUbyBtaXJyb3IgYnJvd3NlcnNcbiAgICAgICAgaWYgKGhhc2ggPT09ICcnIHx8IGhhc2ggPT09ICd0b3AnKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmlyc3Qgd2UgY2hlY2sgaWYgdGhlIGVsZW1lbnQgYnkgaWQgaXMgZm91bmRcbiAgICAgICAgY29uc3QgaWRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhhc2gpO1xuICAgICAgICBpZiAoaWRFbCkge1xuICAgICAgICAgICAgaWRFbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gZWxlbWVudCB3aXRoIHRoZSBpZCwgd2UgY2hlY2sgdGhlIGBuYW1lYCBwcm9wZXJ0eVxuICAgICAgICAvLyBUbyBtaXJyb3IgYnJvd3NlcnNcbiAgICAgICAgY29uc3QgbmFtZUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaClbMF07XG4gICAgICAgIGlmIChuYW1lRWwpIHtcbiAgICAgICAgICAgIG5hbWVFbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVybElzTmV3KGFzUGF0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hc1BhdGggIT09IGFzUGF0aDtcbiAgICB9XG4gICAgLyoqXG4gICAqIFByZWZldGNoIHBhZ2UgY29kZSwgeW91IG1heSB3YWl0IGZvciB0aGUgZGF0YSBkdXJpbmcgcGFnZSByZW5kZXJpbmcuXG4gICAqIFRoaXMgZmVhdHVyZSBvbmx5IHdvcmtzIGluIHByb2R1Y3Rpb24hXG4gICAqIEBwYXJhbSB1cmwgdGhlIGhyZWYgb2YgcHJlZmV0Y2hlZCBwYWdlXG4gICAqIEBwYXJhbSBhc1BhdGggdGhlIGFzIHBhdGggb2YgdGhlIHByZWZldGNoZWQgcGFnZVxuICAgKi8gYXN5bmMgcHJlZmV0Y2godXJsLCBhc1BhdGggPSB1cmwsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBsZXQgcGFyc2VkID0gKDAsIF9wYXJzZVJlbGF0aXZlVXJsKS5wYXJzZVJlbGF0aXZlVXJsKHVybCk7XG4gICAgICAgIGxldCB7IHBhdGhuYW1lICwgcXVlcnkgIH0gPSBwYXJzZWQ7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5sb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcGF0aG5hbWUgPSAoMCwgX25vcm1hbGl6ZUxvY2FsZVBhdGgpLm5vcm1hbGl6ZUxvY2FsZVBhdGgocGF0aG5hbWUsIHRoaXMubG9jYWxlcykucGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgcGFyc2VkLnBhdGhuYW1lID0gcGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgdXJsID0gKDAsIF9mb3JtYXRVcmwpLmZvcm1hdFdpdGhWYWxpZGF0aW9uKHBhcnNlZCk7XG4gICAgICAgICAgICAgICAgbGV0IHBhcnNlZEFzID0gKDAsIF9wYXJzZVJlbGF0aXZlVXJsKS5wYXJzZVJlbGF0aXZlVXJsKGFzUGF0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxlUGF0aFJlc3VsdCA9ICgwLCBfbm9ybWFsaXplTG9jYWxlUGF0aCkubm9ybWFsaXplTG9jYWxlUGF0aChwYXJzZWRBcy5wYXRobmFtZSwgdGhpcy5sb2NhbGVzKTtcbiAgICAgICAgICAgICAgICBwYXJzZWRBcy5wYXRobmFtZSA9IGxvY2FsZVBhdGhSZXN1bHQucGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5sb2NhbGUgPSBsb2NhbGVQYXRoUmVzdWx0LmRldGVjdGVkTG9jYWxlIHx8IHRoaXMuZGVmYXVsdExvY2FsZTtcbiAgICAgICAgICAgICAgICBhc1BhdGggPSAoMCwgX2Zvcm1hdFVybCkuZm9ybWF0V2l0aFZhbGlkYXRpb24ocGFyc2VkQXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhZ2VzID0gYXdhaXQgdGhpcy5wYWdlTG9hZGVyLmdldFBhZ2VMaXN0KCk7XG4gICAgICAgIGxldCByZXNvbHZlZEFzID0gYXNQYXRoO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0hBU19SRVdSSVRFUyAmJiBhc1BhdGguc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgICAgICBsZXQgcmV3cml0ZXM7XG4gICAgICAgICAgICAoeyBfX3Jld3JpdGVzOiByZXdyaXRlcyAgfSA9IGF3YWl0ICgwLCBfcm91dGVMb2FkZXIpLmdldENsaWVudEJ1aWxkTWFuaWZlc3QoKSk7XG4gICAgICAgICAgICBjb25zdCByZXdyaXRlc1Jlc3VsdCA9ICgwLCBfcmVzb2x2ZVJld3JpdGVzKS5kZWZhdWx0KGFkZEJhc2VQYXRoKGFkZExvY2FsZShhc1BhdGgsIHRoaXMubG9jYWxlKSksIHBhZ2VzLCByZXdyaXRlcywgcGFyc2VkLnF1ZXJ5LCAocCk9PnJlc29sdmVEeW5hbWljUm91dGUocCwgcGFnZXMpXG4gICAgICAgICAgICAsIHRoaXMubG9jYWxlcyk7XG4gICAgICAgICAgICBpZiAocmV3cml0ZXNSZXN1bHQuZXh0ZXJuYWxEZXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZWRBcyA9IGRlbExvY2FsZShkZWxCYXNlUGF0aChyZXdyaXRlc1Jlc3VsdC5hc1BhdGgpLCB0aGlzLmxvY2FsZSk7XG4gICAgICAgICAgICBpZiAocmV3cml0ZXNSZXN1bHQubWF0Y2hlZFBhZ2UgJiYgcmV3cml0ZXNSZXN1bHQucmVzb2x2ZWRIcmVmKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBkaXJlY3RseSBtYXRjaGVzIGEgcGFnZSB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgaHJlZiB0b1xuICAgICAgICAgICAgICAgIC8vIGFsbG93IHRoZSBjb3JyZWN0IHBhZ2UgY2h1bmsgdG8gYmUgbG9hZGVkXG4gICAgICAgICAgICAgICAgcGF0aG5hbWUgPSByZXdyaXRlc1Jlc3VsdC5yZXNvbHZlZEhyZWY7XG4gICAgICAgICAgICAgICAgcGFyc2VkLnBhdGhuYW1lID0gcGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgdXJsID0gKDAsIF9mb3JtYXRVcmwpLmZvcm1hdFdpdGhWYWxpZGF0aW9uKHBhcnNlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSByZXNvbHZlRHluYW1pY1JvdXRlKHBhcnNlZC5wYXRobmFtZSwgcGFnZXMpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZC5wYXRobmFtZSAhPT0gcGF0aG5hbWUpIHtcbiAgICAgICAgICAgICAgICBwYXRobmFtZSA9IHBhcnNlZC5wYXRobmFtZTtcbiAgICAgICAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSBwYXRobmFtZTtcbiAgICAgICAgICAgICAgICB1cmwgPSAoMCwgX2Zvcm1hdFVybCkuZm9ybWF0V2l0aFZhbGlkYXRpb24ocGFyc2VkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBQcmVmZXRjaCBpcyBub3Qgc3VwcG9ydGVkIGluIGRldmVsb3BtZW50IG1vZGUgYmVjYXVzZSBpdCB3b3VsZCB0cmlnZ2VyIG9uLWRlbWFuZC1lbnRyaWVzXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWZmZWN0cyA9IGF3YWl0IHRoaXMuX3ByZWZsaWdodFJlcXVlc3Qoe1xuICAgICAgICAgICAgYXM6IGFkZEJhc2VQYXRoKGFzUGF0aCksXG4gICAgICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgICAgIHBhZ2VzLFxuICAgICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIGxvY2FsZTogdGhpcy5sb2NhbGUsXG4gICAgICAgICAgICBpc1ByZXZpZXc6IHRoaXMuaXNQcmV2aWV3XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZWZmZWN0cy50eXBlID09PSAncmV3cml0ZScpIHtcbiAgICAgICAgICAgIHBhcnNlZC5wYXRobmFtZSA9IGVmZmVjdHMucmVzb2x2ZWRIcmVmO1xuICAgICAgICAgICAgcGF0aG5hbWUgPSBlZmZlY3RzLnJlc29sdmVkSHJlZjtcbiAgICAgICAgICAgIHF1ZXJ5ID0ge1xuICAgICAgICAgICAgICAgIC4uLnF1ZXJ5LFxuICAgICAgICAgICAgICAgIC4uLmVmZmVjdHMucGFyc2VkQXMucXVlcnlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlZEFzID0gZWZmZWN0cy5hc1BhdGg7XG4gICAgICAgICAgICB1cmwgPSAoMCwgX2Zvcm1hdFVybCkuZm9ybWF0V2l0aFZhbGlkYXRpb24ocGFyc2VkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3V0ZSA9ICgwLCBfbm9ybWFsaXplVHJhaWxpbmdTbGFzaCkucmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2gocGF0aG5hbWUpO1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0aGlzLnBhZ2VMb2FkZXIuX2lzU3NnKHJvdXRlKS50aGVuKChpc1NzZyk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNTc2cgPyBmZXRjaE5leHREYXRhKHRoaXMucGFnZUxvYWRlci5nZXREYXRhSHJlZih7XG4gICAgICAgICAgICAgICAgICAgIGhyZWY6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgYXNQYXRoOiByZXNvbHZlZEFzLFxuICAgICAgICAgICAgICAgICAgICBzc2c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZTogdHlwZW9mIG9wdGlvbnMubG9jYWxlICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMubG9jYWxlIDogdGhpcy5sb2NhbGVcbiAgICAgICAgICAgICAgICB9KSwgZmFsc2UsIGZhbHNlLCB0aGlzLnNkYywgdHJ1ZSkgOiBmYWxzZTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdGhpcy5wYWdlTG9hZGVyW29wdGlvbnMucHJpb3JpdHkgPyAnbG9hZFBhZ2UnIDogJ3ByZWZldGNoJ10ocm91dGUpLCBcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGFzeW5jIGZldGNoQ29tcG9uZW50KHJvdXRlKSB7XG4gICAgICAgIGxldCBjYW5jZWxsZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgY2FuY2VsID0gdGhpcy5jbGMgPSAoKT0+e1xuICAgICAgICAgICAgY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaGFuZGxlQ2FuY2VsbGVkID0gKCk9PntcbiAgICAgICAgICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgQWJvcnQgZmV0Y2hpbmcgY29tcG9uZW50IGZvciByb3V0ZTogXCIke3JvdXRlfVwiYCk7XG4gICAgICAgICAgICAgICAgZXJyb3IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5jZWwgPT09IHRoaXMuY2xjKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50UmVzdWx0ID0gYXdhaXQgdGhpcy5wYWdlTG9hZGVyLmxvYWRQYWdlKHJvdXRlKTtcbiAgICAgICAgICAgIGhhbmRsZUNhbmNlbGxlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudFJlc3VsdDtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBoYW5kbGVDYW5jZWxsZWQoKTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZ2V0RGF0YShmbikge1xuICAgICAgICBsZXQgY2FuY2VsbGVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGNhbmNlbCA9ICgpPT57XG4gICAgICAgICAgICBjYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsYyA9IGNhbmNlbDtcbiAgICAgICAgcmV0dXJuIGZuKCkudGhlbigoZGF0YSk9PntcbiAgICAgICAgICAgIGlmIChjYW5jZWwgPT09IHRoaXMuY2xjKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcignTG9hZGluZyBpbml0aWFsIHByb3BzIGNhbmNlbGxlZCcpO1xuICAgICAgICAgICAgICAgIGVyci5jYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2dldEZsaWdodERhdGEoZGF0YUhyZWYpIHtcbiAgICAgICAgLy8gRG8gbm90IGNhY2hlIFJTQyBmbGlnaHQgcmVzcG9uc2Ugc2luY2UgaXQncyBub3QgYSBzdGF0aWMgcmVzb3VyY2VcbiAgICAgICAgcmV0dXJuIGZldGNoTmV4dERhdGEoZGF0YUhyZWYsIHRydWUsIHRydWUsIHRoaXMuc2RjLCBmYWxzZSkudGhlbigoc2VyaWFsaXplZCk9PntcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGF0YTogc2VyaWFsaXplZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIF9wcmVmbGlnaHRSZXF1ZXN0KG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYXNQYXRobmFtZSA9IHBhdGhOb1F1ZXJ5SGFzaChvcHRpb25zLmFzKTtcbiAgICAgICAgY29uc3QgY2xlYW5lZEFzID0gZGVsTG9jYWxlKGhhc0Jhc2VQYXRoKGFzUGF0aG5hbWUpID8gZGVsQmFzZVBhdGgoYXNQYXRobmFtZSkgOiBhc1BhdGhuYW1lLCBvcHRpb25zLmxvY2FsZSk7XG4gICAgICAgIGNvbnN0IGZucyA9IGF3YWl0IHRoaXMucGFnZUxvYWRlci5nZXRNaWRkbGV3YXJlTGlzdCgpO1xuICAgICAgICBjb25zdCByZXF1aXJlc1ByZWZsaWdodCA9IGZucy5zb21lKChbbWlkZGxld2FyZSwgaXNTU1JdKT0+e1xuICAgICAgICAgICAgcmV0dXJuICgwLCBfcm91dGVNYXRjaGVyKS5nZXRSb3V0ZU1hdGNoZXIoKDAsIF9nZXRNaWRkbGV3YXJlUmVnZXgpLmdldE1pZGRsZXdhcmVSZWdleChtaWRkbGV3YXJlLCAhaXNTU1IpKShjbGVhbmVkQXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyZXF1aXJlc1ByZWZsaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbmV4dCdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJlZmxpZ2h0SHJlZiA9IGFkZExvY2FsZShvcHRpb25zLmFzLCBvcHRpb25zLmxvY2FsZSk7XG4gICAgICAgIGxldCBwcmVmbGlnaHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmVmbGlnaHQgPSBhd2FpdCB0aGlzLl9nZXRQcmVmbGlnaHREYXRhKHtcbiAgICAgICAgICAgICAgICBwcmVmbGlnaHRIcmVmLFxuICAgICAgICAgICAgICAgIHNob3VsZENhY2hlOiBvcHRpb25zLmNhY2hlLFxuICAgICAgICAgICAgICAgIGlzUHJldmlldzogb3B0aW9ucy5pc1ByZXZpZXdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIElmIHByZWZsaWdodCByZXF1ZXN0IGZhaWxzLCB3ZSBuZWVkIHRvIGRvIGEgaGFyZC1uYXZpZ2F0aW9uLlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVkaXJlY3QnLFxuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBvcHRpb25zLmFzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVmbGlnaHQucmV3cml0ZSkge1xuICAgICAgICAgICAgLy8gZm9yIGV4dGVybmFsIHJld3JpdGVzIHdlIG5lZWQgdG8gZG8gYSBoYXJkIG5hdmlnYXRpb25cbiAgICAgICAgICAgIC8vIHRvIHRoZSByZXNvdXJjZVxuICAgICAgICAgICAgaWYgKCFwcmVmbGlnaHQucmV3cml0ZS5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncmVkaXJlY3QnLFxuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogb3B0aW9ucy5hc1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSAoMCwgX3BhcnNlUmVsYXRpdmVVcmwpLnBhcnNlUmVsYXRpdmVVcmwoKDAsIF9ub3JtYWxpemVMb2NhbGVQYXRoKS5ub3JtYWxpemVMb2NhbGVQYXRoKGhhc0Jhc2VQYXRoKHByZWZsaWdodC5yZXdyaXRlKSA/IGRlbEJhc2VQYXRoKHByZWZsaWdodC5yZXdyaXRlKSA6IHByZWZsaWdodC5yZXdyaXRlLCB0aGlzLmxvY2FsZXMpLnBhdGhuYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IGZzUGF0aG5hbWUgPSAoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhcnNlZC5wYXRobmFtZSk7XG4gICAgICAgICAgICBsZXQgbWF0Y2hlZFBhZ2U7XG4gICAgICAgICAgICBsZXQgcmVzb2x2ZWRIcmVmO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFnZXMuaW5jbHVkZXMoZnNQYXRobmFtZSkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVkUGFnZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRIcmVmID0gZnNQYXRobmFtZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRIcmVmID0gcmVzb2x2ZUR5bmFtaWNSb3V0ZShmc1BhdGhuYW1lLCBvcHRpb25zLnBhZ2VzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWRIcmVmICE9PSBwYXJzZWQucGF0aG5hbWUgJiYgb3B0aW9ucy5wYWdlcy5pbmNsdWRlcyhyZXNvbHZlZEhyZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZWRQYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdyZXdyaXRlJyxcbiAgICAgICAgICAgICAgICBhc1BhdGg6IHBhcnNlZC5wYXRobmFtZSxcbiAgICAgICAgICAgICAgICBwYXJzZWRBczogcGFyc2VkLFxuICAgICAgICAgICAgICAgIG1hdGNoZWRQYWdlLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkSHJlZlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlZmxpZ2h0LnJlZGlyZWN0KSB7XG4gICAgICAgICAgICBpZiAocHJlZmxpZ2h0LnJlZGlyZWN0LnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsZWFuUmVkaXJlY3QgPSAoMCwgX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2gpLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKCgwLCBfbm9ybWFsaXplTG9jYWxlUGF0aCkubm9ybWFsaXplTG9jYWxlUGF0aChoYXNCYXNlUGF0aChwcmVmbGlnaHQucmVkaXJlY3QpID8gZGVsQmFzZVBhdGgocHJlZmxpZ2h0LnJlZGlyZWN0KSA6IHByZWZsaWdodC5yZWRpcmVjdCwgdGhpcy5sb2NhbGVzKS5wYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB1cmw6IG5ld1VybCAsIGFzOiBuZXdBcyAgfSA9IHByZXBhcmVVcmxBcyh0aGlzLCBjbGVhblJlZGlyZWN0LCBjbGVhblJlZGlyZWN0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncmVkaXJlY3QnLFxuICAgICAgICAgICAgICAgICAgICBuZXdVcmwsXG4gICAgICAgICAgICAgICAgICAgIG5ld0FzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3JlZGlyZWN0JyxcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogcHJlZmxpZ2h0LnJlZGlyZWN0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIEZvciBTU1IgcmVxdWVzdHMsIHRoZXkgd2lsbCBiZSBoYW5kbGVkIGxpa2Ugbm9ybWFsIHBhZ2VzLlxuICAgICAgICBpZiAocHJlZmxpZ2h0LnJlZnJlc2ggJiYgIXByZWZsaWdodC5zc3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3JlZnJlc2gnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnbmV4dCdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2dldFByZWZsaWdodERhdGEocGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHsgcHJlZmxpZ2h0SHJlZiAsIHNob3VsZENhY2hlID1mYWxzZSAsIGlzUHJldmlldyAgfSA9IHBhcmFtcztcbiAgICAgICAgY29uc3QgeyBocmVmOiBjYWNoZUtleSAgfSA9IG5ldyBVUkwocHJlZmxpZ2h0SHJlZiwgd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiAhaXNQcmV2aWV3ICYmIHNob3VsZENhY2hlICYmIHRoaXMuc2RlW2NhY2hlS2V5XSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnNkZVtjYWNoZUtleV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmZXRjaChwcmVmbGlnaHRIcmVmLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdIRUFEJyxcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICd4LW1pZGRsZXdhcmUtcHJlZmxpZ2h0JzogJzEnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4oKHJlcyk9PntcbiAgICAgICAgICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcHJlZmxpZ2h0IHJlcXVlc3RgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY2FjaGU6IHJlcy5oZWFkZXJzLmdldCgneC1taWRkbGV3YXJlLWNhY2hlJyksXG4gICAgICAgICAgICAgICAgcmVkaXJlY3Q6IHJlcy5oZWFkZXJzLmdldCgnTG9jYXRpb24nKSxcbiAgICAgICAgICAgICAgICByZWZyZXNoOiByZXMuaGVhZGVycy5oYXMoJ3gtbWlkZGxld2FyZS1yZWZyZXNoJyksXG4gICAgICAgICAgICAgICAgcmV3cml0ZTogcmVzLmhlYWRlcnMuZ2V0KCd4LW1pZGRsZXdhcmUtcmV3cml0ZScpLFxuICAgICAgICAgICAgICAgIHNzcjogISFyZXMuaGVhZGVycy5nZXQoJ3gtbWlkZGxld2FyZS1zc3InKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkudGhlbigoZGF0YSk9PntcbiAgICAgICAgICAgIGlmIChzaG91bGRDYWNoZSAmJiBkYXRhLmNhY2hlICE9PSAnbm8tY2FjaGUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZGVbY2FjaGVLZXldID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9KS5jYXRjaCgoZXJyKT0+e1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2RlW2NhY2hlS2V5XTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldEluaXRpYWxQcm9wcyhDb21wb25lbnQsIGN0eCkge1xuICAgICAgICBjb25zdCB7IENvbXBvbmVudDogQXBwICB9ID0gdGhpcy5jb21wb25lbnRzWycvX2FwcCddO1xuICAgICAgICBjb25zdCBBcHBUcmVlID0gdGhpcy5fd3JhcEFwcChBcHApO1xuICAgICAgICBjdHguQXBwVHJlZSA9IEFwcFRyZWU7XG4gICAgICAgIHJldHVybiAoMCwgX3V0aWxzKS5sb2FkR2V0SW5pdGlhbFByb3BzKEFwcCwge1xuICAgICAgICAgICAgQXBwVHJlZSxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIHJvdXRlcjogdGhpcyxcbiAgICAgICAgICAgIGN0eFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWJvcnRDb21wb25lbnRMb2FkKGFzLCByb3V0ZVByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLmNsYykge1xuICAgICAgICAgICAgUm91dGVyLmV2ZW50cy5lbWl0KCdyb3V0ZUNoYW5nZUVycm9yJywgYnVpbGRDYW5jZWxsYXRpb25FcnJvcigpLCBhcywgcm91dGVQcm9wcyk7XG4gICAgICAgICAgICB0aGlzLmNsYygpO1xuICAgICAgICAgICAgdGhpcy5jbGMgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCByb3V0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucm91dGU7XG4gICAgfVxuICAgIGdldCBwYXRobmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucGF0aG5hbWU7XG4gICAgfVxuICAgIGdldCBxdWVyeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucXVlcnk7XG4gICAgfVxuICAgIGdldCBhc1BhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmFzUGF0aDtcbiAgICB9XG4gICAgZ2V0IGxvY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUubG9jYWxlO1xuICAgIH1cbiAgICBnZXQgaXNGYWxsYmFjaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuaXNGYWxsYmFjaztcbiAgICB9XG4gICAgZ2V0IGlzUHJldmlldygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuaXNQcmV2aWV3O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFJvdXRlcjtcblJvdXRlci5ldmVudHMgPSAoMCwgX21pdHQpLmRlZmF1bHQoKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldERvbWFpbkxvY2FsZSIsImFkZExvY2FsZSIsImRlbExvY2FsZSIsImhhc0Jhc2VQYXRoIiwiYWRkQmFzZVBhdGgiLCJkZWxCYXNlUGF0aCIsImlzTG9jYWxVUkwiLCJpbnRlcnBvbGF0ZUFzIiwicmVzb2x2ZUhyZWYiLCJkZWZhdWx0IiwiX25vcm1hbGl6ZVRyYWlsaW5nU2xhc2giLCJyZXF1aXJlIiwiX3JvdXRlTG9hZGVyIiwiX2lzRXJyb3IiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9kZW5vcm1hbGl6ZVBhZ2VQYXRoIiwiX25vcm1hbGl6ZUxvY2FsZVBhdGgiLCJfbWl0dCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfdXRpbHMiLCJfaXNEeW5hbWljIiwiX3BhcnNlUmVsYXRpdmVVcmwiLCJfcXVlcnlzdHJpbmciLCJfcmVzb2x2ZVJld3JpdGVzIiwiX3JvdXRlTWF0Y2hlciIsIl9yb3V0ZVJlZ2V4IiwiX2dldE1pZGRsZXdhcmVSZWdleCIsIl9mb3JtYXRVcmwiLCJvYmoiLCJfX2VzTW9kdWxlIiwibmV3T2JqIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldCIsInNldCIsImRldGVjdERvbWFpbkxvY2FsZSIsInByb2Nlc3MiLCJlbnYiLCJfX05FWFRfSTE4Tl9TVVBQT1JUIiwiYmFzZVBhdGgiLCJfX05FWFRfUk9VVEVSX0JBU0VQQVRIIiwiYnVpbGRDYW5jZWxsYXRpb25FcnJvciIsImFzc2lnbiIsIkVycm9yIiwiY2FuY2VsbGVkIiwiYWRkUGF0aFByZWZpeCIsInBhdGgiLCJwcmVmaXgiLCJzdGFydHNXaXRoIiwicGF0aG5hbWUiLCJwYXRoTm9RdWVyeUhhc2giLCJub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCIsInNsaWNlIiwibGVuZ3RoIiwiaGFzUGF0aFByZWZpeCIsImxvY2FsZSIsImxvY2FsZXMiLCJkb21haW5Mb2NhbGVzIiwibm9ybWFsaXplTG9jYWxlUGF0aCIsImRldGVjdGVkTG9jYWxlIiwiZGV0ZWN0ZWREb21haW4iLCJ1bmRlZmluZWQiLCJodHRwIiwiZG9tYWluIiwiZGVmYXVsdExvY2FsZSIsInBhdGhMb3dlciIsInRvTG93ZXJDYXNlIiwibG9jYWxlTG93ZXIiLCJxdWVyeUluZGV4IiwiaW5kZXhPZiIsImhhc2hJbmRleCIsInN1YnN0cmluZyIsInVybCIsImxvY2F0aW9uT3JpZ2luIiwiZ2V0TG9jYXRpb25PcmlnaW4iLCJyZXNvbHZlZCIsIlVSTCIsIm9yaWdpbiIsIl8iLCJyb3V0ZSIsImFzUGF0aG5hbWUiLCJxdWVyeSIsImludGVycG9sYXRlZFJvdXRlIiwiZHluYW1pY1JlZ2V4IiwiZ2V0Um91dGVSZWdleCIsImR5bmFtaWNHcm91cHMiLCJncm91cHMiLCJkeW5hbWljTWF0Y2hlcyIsImdldFJvdXRlTWF0Y2hlciIsInBhcmFtcyIsImtleXMiLCJldmVyeSIsInBhcmFtIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJyZXBsYWNlZCIsIkFycmF5IiwiaXNBcnJheSIsInJlcGxhY2UiLCJtYXAiLCJzZWdtZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwiam9pbiIsInJlc3VsdCIsIm9taXRQYXJtc0Zyb21RdWVyeSIsImZpbHRlcmVkUXVlcnkiLCJmb3JFYWNoIiwiaW5jbHVkZXMiLCJyb3V0ZXIiLCJocmVmIiwicmVzb2x2ZUFzIiwiYmFzZSIsInVybEFzU3RyaW5nIiwiZm9ybWF0V2l0aFZhbGlkYXRpb24iLCJ1cmxQcm90b01hdGNoIiwibWF0Y2giLCJ1cmxBc1N0cmluZ05vUHJvdG8iLCJ1cmxQYXJ0cyIsInNwbGl0IiwiY29uc29sZSIsImVycm9yIiwibm9ybWFsaXplZFVybCIsIm5vcm1hbGl6ZVJlcGVhdGVkU2xhc2hlcyIsImFzUGF0aCIsImZpbmFsVXJsIiwiaW50ZXJwb2xhdGVkQXMiLCJpc0R5bmFtaWNSb3V0ZSIsInNlYXJjaFBhcmFtcyIsInNlYXJjaFBhcmFtc1RvVXJsUXVlcnkiLCJoYXNoIiwicmVzb2x2ZWRIcmVmIiwiXzEiLCJzdHJpcE9yaWdpbiIsInByZXBhcmVVcmxBcyIsImFzIiwicmVzb2x2ZWRBcyIsImhyZWZIYWRPcmlnaW4iLCJhc0hhZE9yaWdpbiIsInByZXBhcmVkVXJsIiwicHJlcGFyZWRBcyIsInJlc29sdmVEeW5hbWljUm91dGUiLCJwYWdlcyIsImNsZWFuUGF0aG5hbWUiLCJyZW1vdmVQYXRoVHJhaWxpbmdTbGFzaCIsImRlbm9ybWFsaXplUGFnZVBhdGgiLCJzb21lIiwicGFnZSIsInJlIiwidGVzdCIsIm1hbnVhbFNjcm9sbFJlc3RvcmF0aW9uIiwiX19ORVhUX1NDUk9MTF9SRVNUT1JBVElPTiIsIndpbmRvdyIsImhpc3RvcnkiLCJ2Iiwic2Vzc2lvblN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsIm4iLCJTU0dfREFUQV9OT1RfRk9VTkQiLCJTeW1ib2wiLCJmZXRjaFJldHJ5IiwiYXR0ZW1wdHMiLCJvcHRzIiwiZmV0Y2giLCJjcmVkZW50aWFscyIsInRoZW4iLCJyZXMiLCJvayIsInN0YXR1cyIsImpzb24iLCJkYXRhIiwibm90Rm91bmQiLCJ0ZXh0IiwiZmV0Y2hOZXh0RGF0YSIsImRhdGFIcmVmIiwiaXNTZXJ2ZXJSZW5kZXIiLCJpbmZsaWdodENhY2hlIiwicGVyc2lzdENhY2hlIiwiY2FjaGVLZXkiLCJsb2NhdGlvbiIsImNhdGNoIiwiZXJyIiwibWFya0Fzc2V0RXJyb3IiLCJSb3V0ZXIiLCJjb25zdHJ1Y3RvciIsInBhdGhuYW1lMSIsInF1ZXJ5MSIsImFzMSIsImluaXRpYWxQcm9wcyIsInBhZ2VMb2FkZXIiLCJBcHAiLCJ3cmFwQXBwIiwiQ29tcG9uZW50Iiwic3Vic2NyaXB0aW9uIiwiaXNGYWxsYmFjayIsImlzUHJldmlldyIsImlzUnNjIiwic2RjIiwic2RyIiwic2RlIiwiX2lkeCIsIm9uUG9wU3RhdGUiLCJlIiwic3RhdGUiLCJjaGFuZ2VTdGF0ZSIsImdldFVSTCIsIl9fTiIsImZvcmNlZFNjcm9sbCIsIm9wdGlvbnMiLCJpZHgiLCJKU09OIiwic3RyaW5naWZ5IiwieCIsInNlbGYiLCJwYWdlWE9mZnNldCIsInkiLCJwYWdlWU9mZnNldCIsImdldEl0ZW0iLCJwYXJzZSIsInBhcnNlUmVsYXRpdmVVcmwiLCJpc1NzciIsIl9icHMiLCJjaGFuZ2UiLCJzaGFsbG93IiwiX3NoYWxsb3ciLCJjb21wb25lbnRzIiwiaW5pdGlhbCIsInByb3BzIiwiX19OX1NTRyIsIl9fTl9TU1AiLCJfX05fUlNDIiwic3R5bGVTaGVldHMiLCJldmVudHMiLCJhdXRvRXhwb3J0RHluYW1pYyIsIl9fTkVYVF9EQVRBX18iLCJhdXRvRXhwb3J0Iiwic3ViIiwiY2xjIiwiX3dyYXBBcHAiLCJpc0xvY2FsZURvbWFpbiIsImlzUmVhZHkiLCJnc3NwIiwiZ2lwIiwiYXBwR2lwIiwiZ3NwIiwic2VhcmNoIiwiX19ORVhUX0hBU19SRVdSSVRFUyIsImhvc3RuYW1lIiwiX3Nob3VsZFJlc29sdmVIcmVmIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNjcm9sbFJlc3RvcmF0aW9uIiwicmVsb2FkIiwiYmFjayIsInB1c2giLCJtZXRob2QiLCJzaG91bGRSZXNvbHZlSHJlZiIsIl9oIiwibmV4dFN0YXRlIiwicHJldkxvY2FsZSIsInBhcnNlZEFzIiwibG9jYWxlUGF0aFJlc3VsdCIsImRpZE5hdmlnYXRlIiwicmVmIiwiYXNOb0Jhc2VQYXRoIiwiUHJvbWlzZSIsIlNUIiwicGVyZm9ybWFuY2UiLCJtYXJrIiwic2Nyb2xsIiwicm91dGVQcm9wcyIsIl9pbkZsaWdodFJvdXRlIiwiYWJvcnRDb21wb25lbnRMb2FkIiwiY2xlYW5lZEFzIiwibG9jYWxlQ2hhbmdlIiwib25seUFIYXNoQ2hhbmdlIiwiZW1pdCIsInNjcm9sbFRvSGFzaCIsInBhcnNlZCIsInJld3JpdGVzIiwiX19yZXdyaXRlcyIsImFsbCIsImdldFBhZ2VMaXN0IiwiZ2V0Q2xpZW50QnVpbGRNYW5pZmVzdCIsImdldE1pZGRsZXdhcmVMaXN0IiwidXJsSXNOZXciLCJyZXdyaXRlc1Jlc3VsdCIsInAiLCJleHRlcm5hbERlc3QiLCJtYXRjaGVkUGFnZSIsImVmZmVjdCIsIl9wcmVmbGlnaHRSZXF1ZXN0IiwiY2FjaGUiLCJ0eXBlIiwibmV3QXMiLCJuZXdVcmwiLCJkZXN0aW5hdGlvbiIsInJvdXRlUmVnZXgiLCJyb3V0ZU1hdGNoIiwic2hvdWxkSW50ZXJwb2xhdGUiLCJtaXNzaW5nUGFyYW1zIiwiZmlsdGVyIiwid2FybiIsInJlZjEiLCJyZWYyIiwicm91dGVJbmZvIiwiZ2V0Um91dGVJbmZvIiwicGFnZVByb3BzIiwiX19OX1JFRElSRUNUIiwiX19OX1JFRElSRUNUX0JBU0VfUEFUSCIsInBhcnNlZEhyZWYiLCJfX05fUFJFVklFVyIsIm5vdEZvdW5kUm91dGUiLCJmZXRjaENvbXBvbmVudCIsInN0YXR1c0NvZGUiLCJpc1ZhbGlkU2hhbGxvd1JvdXRlIiwiX3Njcm9sbCIsInNob3VsZFNjcm9sbCIsInJlc2V0U2Nyb2xsIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJsYW5nIiwiZXJyMSIsImhhbmRsZVJvdXRlSW5mb0Vycm9yIiwibG9hZEVycm9yRmFpbCIsImlzQXNzZXRFcnJvciIsImdldEluaXRpYWxQcm9wcyIsImdpcEVyciIsInJvdXRlSW5mb0VyciIsImV4aXN0aW5nUm91dGVJbmZvIiwiY2FjaGVkUm91dGVJbmZvIiwibW9kIiwiX19uZXh0X3JzY19fIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidXNlU3RyZWFtZWRGbGlnaHREYXRhIiwiZ2V0RGF0YUhyZWYiLCJzc2ciLCJmbGlnaHQiLCJfZ2V0RGF0YSIsIl9nZXRGbGlnaHREYXRhIiwiX19mbGlnaHRfXyIsImdldFByb3BlckVycm9yIiwiYmVmb3JlUG9wU3RhdGUiLCJjYiIsIm9sZFVybE5vSGFzaCIsIm9sZEhhc2giLCJuZXdVcmxOb0hhc2giLCJuZXdIYXNoIiwic2Nyb2xsVG8iLCJpZEVsIiwiZ2V0RWxlbWVudEJ5SWQiLCJzY3JvbGxJbnRvVmlldyIsIm5hbWVFbCIsImdldEVsZW1lbnRzQnlOYW1lIiwicHJlZmV0Y2giLCJlZmZlY3RzIiwiX2lzU3NnIiwiaXNTc2ciLCJwcmlvcml0eSIsImNhbmNlbCIsImhhbmRsZUNhbmNlbGxlZCIsImNvbXBvbmVudFJlc3VsdCIsImxvYWRQYWdlIiwiZm4iLCJzZXJpYWxpemVkIiwiZm5zIiwicmVxdWlyZXNQcmVmbGlnaHQiLCJtaWRkbGV3YXJlIiwiaXNTU1IiLCJnZXRNaWRkbGV3YXJlUmVnZXgiLCJwcmVmbGlnaHRIcmVmIiwicHJlZmxpZ2h0IiwiX2dldFByZWZsaWdodERhdGEiLCJzaG91bGRDYWNoZSIsInJld3JpdGUiLCJmc1BhdGhuYW1lIiwicmVkaXJlY3QiLCJjbGVhblJlZGlyZWN0IiwicmVmcmVzaCIsInNzciIsInJlc29sdmUiLCJoZWFkZXJzIiwiaGFzIiwiY3R4IiwiQXBwVHJlZSIsImxvYWRHZXRJbml0aWFsUHJvcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/shared/lib/router/router.js\n");

/***/ }),

/***/ "./components/HeaderSearchBar.tsx":
/*!****************************************!*\
  !*** ./components/HeaderSearchBar.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearchBar)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-components */ \"styled-components\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_components__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-icons/md */ \"react-icons/md\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_icons_md__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var recoil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! recoil */ \"recoil\");\n/* harmony import */ var recoil__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(recoil__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _recoil_store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../recoil/store */ \"./recoil/store.ts\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/router */ \"next/router\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__);\nvar _jsxFileName = \"/Users/jimmy/Projects/jimmyflix_v2.0/components/HeaderSearchBar.tsx\";\n\n\n\n\n\n\n\nfunction SearchBar() {\n  const {\n    0: editingValue,\n    1: setEditingValue\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n  const {\n    0: focused,\n    1: setFocused\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const searchRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const router = (0,next_router__WEBPACK_IMPORTED_MODULE_5__.useRouter)();\n  const setSearchValue = (0,recoil__WEBPACK_IMPORTED_MODULE_3__.useSetRecoilState)(_recoil_store__WEBPACK_IMPORTED_MODULE_4__.searchValueState);\n  const setIsSearched = (0,recoil__WEBPACK_IMPORTED_MODULE_3__.useSetRecoilState)(_recoil_store__WEBPACK_IMPORTED_MODULE_4__.isSearchedState);\n\n  const onSubmit = e => {\n    var _searchRef$current;\n\n    e.preventDefault();\n    setEditingValue('');\n\n    if (editingValue.trim() === '') {\n      alert('Input what you want to search!');\n      return;\n    }\n\n    (_searchRef$current = searchRef.current) === null || _searchRef$current === void 0 ? void 0 : _searchRef$current.blur();\n    router.push('/search');\n    setSearchValue(editingValue);\n    setIsSearched(true);\n  };\n\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(SearchBarWrapper, {\n    className: focused ? 'active' : '',\n    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(Form, {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(Search, {\n        ref: searchRef,\n        value: editingValue,\n        onChange: e => setEditingValue(e.target.value),\n        type: \"text\",\n        placeholder: \"Movie / TV Show Search\",\n        onFocus: () => setFocused(true),\n        onBlur: () => setFocused(false),\n        spellCheck: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(Button, {\n        type: \"submit\",\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_2__.MdSearch, {\n          size: 18\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\nconst SearchBarWrapper = styled_components__WEBPACK_IMPORTED_MODULE_1___default().article.withConfig({\n  displayName: \"HeaderSearchBar__SearchBarWrapper\",\n  componentId: \"sc-1a2thzb-0\"\n})([\"width:195px;background:transparent;border:none;border-bottom:1px solid #fff;opacity:0.5;transition:0.3s ease;&:hover,&.active{opacity:1;}\"]);\nconst Form = styled_components__WEBPACK_IMPORTED_MODULE_1___default().form.withConfig({\n  displayName: \"HeaderSearchBar__Form\",\n  componentId: \"sc-1a2thzb-1\"\n})([\"display:grid;height:100%;padding:5px 0;grid-template-columns:85% 15%;align-items:center;\"]);\nconst Search = styled_components__WEBPACK_IMPORTED_MODULE_1___default().input.withConfig({\n  displayName: \"HeaderSearchBar__Search\",\n  componentId: \"sc-1a2thzb-2\"\n})([\"width:100%;height:100%;padding:0 0 0 10px;background-color:transparent;border:none;font-size:12px;color:white;outline:none;&::placeholder{color:white;}&:focus{}\"]);\nconst Button = styled_components__WEBPACK_IMPORTED_MODULE_1___default().button.withConfig({\n  displayName: \"HeaderSearchBar__Button\",\n  componentId: \"sc-1a2thzb-3\"\n})([\"position:relative;top:4px;font-size:14px;color:white;background-color:transparent;border:none;&:hover{cursor:pointer;}\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0hlYWRlclNlYXJjaEJhci50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVlLFNBQVNTLFNBQVQsR0FBcUI7QUFDbEMsUUFBTTtBQUFBLE9BQUNDLFlBQUQ7QUFBQSxPQUFlQztBQUFmLE1BQWtDVCwrQ0FBUSxDQUFDLEVBQUQsQ0FBaEQ7QUFDQSxRQUFNO0FBQUEsT0FBQ1UsT0FBRDtBQUFBLE9BQVVDO0FBQVYsTUFBd0JYLCtDQUFRLENBQUMsS0FBRCxDQUF0QztBQUNBLFFBQU1ZLFNBQVMsR0FBR2IsNkNBQU0sQ0FBMEIsSUFBMUIsQ0FBeEI7QUFDQSxRQUFNYyxNQUFNLEdBQUdQLHNEQUFTLEVBQXhCO0FBQ0EsUUFBTVEsY0FBYyxHQUFHWCx5REFBaUIsQ0FBQ0UsMkRBQUQsQ0FBeEM7QUFDQSxRQUFNVSxhQUFhLEdBQUdaLHlEQUFpQixDQUFDQywwREFBRCxDQUF2Qzs7QUFFQSxRQUFNWSxRQUFRLEdBQUlDLENBQUQsSUFBbUM7QUFBQTs7QUFDbERBLElBQUFBLENBQUMsQ0FBQ0MsY0FBRjtBQUNBVCxJQUFBQSxlQUFlLENBQUMsRUFBRCxDQUFmOztBQUVBLFFBQUlELFlBQVksQ0FBQ1csSUFBYixPQUF3QixFQUE1QixFQUFnQztBQUM5QkMsTUFBQUEsS0FBSyxDQUFDLGdDQUFELENBQUw7QUFDQTtBQUNEOztBQUVELDBCQUFBUixTQUFTLENBQUNTLE9BQVYsMEVBQW1CQyxJQUFuQjtBQUNBVCxJQUFBQSxNQUFNLENBQUNVLElBQVAsQ0FBWSxTQUFaO0FBQ0FULElBQUFBLGNBQWMsQ0FBQ04sWUFBRCxDQUFkO0FBQ0FPLElBQUFBLGFBQWEsQ0FBQyxJQUFELENBQWI7QUFDRCxHQWJEOztBQWVBLHNCQUNFLDhEQUFDLGdCQUFEO0FBQWtCLGFBQVMsRUFBRUwsT0FBTyxHQUFHLFFBQUgsR0FBYyxFQUFsRDtBQUFBLDJCQUNFLDhEQUFDLElBQUQ7QUFBTSxjQUFRLEVBQUVNLFFBQWhCO0FBQUEsOEJBQ0UsOERBQUMsTUFBRDtBQUNFLFdBQUcsRUFBRUosU0FEUDtBQUVFLGFBQUssRUFBRUosWUFGVDtBQUdFLGdCQUFRLEVBQUdTLENBQUQsSUFBT1IsZUFBZSxDQUFDUSxDQUFDLENBQUNPLE1BQUYsQ0FBU0MsS0FBVixDQUhsQztBQUlFLFlBQUksRUFBQyxNQUpQO0FBS0UsbUJBQVcsRUFBQyx3QkFMZDtBQU1FLGVBQU8sRUFBRSxNQUFNZCxVQUFVLENBQUMsSUFBRCxDQU4zQjtBQU9FLGNBQU0sRUFBRSxNQUFNQSxVQUFVLENBQUMsS0FBRCxDQVAxQjtBQVFFLGtCQUFVLEVBQUU7QUFSZDtBQUFBO0FBQUE7QUFBQTtBQUFBLGNBREYsZUFXRSw4REFBQyxNQUFEO0FBQVEsWUFBSSxFQUFDLFFBQWI7QUFBQSwrQkFDRSw4REFBQyxvREFBRDtBQUFVLGNBQUksRUFBRTtBQUFoQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBREY7QUFBQTtBQUFBO0FBQUE7QUFBQSxjQVhGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURGO0FBQUE7QUFBQTtBQUFBO0FBQUEsVUFERjtBQW1CRDtBQUVELE1BQU1lLGdCQUFnQixHQUFHekIsMkVBQUg7QUFBQTtBQUFBO0FBQUEsaUpBQXRCO0FBY0EsTUFBTTJCLElBQUksR0FBRzNCLHdFQUFIO0FBQUE7QUFBQTtBQUFBLGdHQUFWO0FBUUEsTUFBTTZCLE1BQU0sR0FBRzdCLHlFQUFIO0FBQUE7QUFBQTtBQUFBLHdLQUFaO0FBa0JBLE1BQU0rQixNQUFNLEdBQUcvQiwwRUFBSDtBQUFBO0FBQUE7QUFBQSw4SEFBWiIsInNvdXJjZXMiOlsid2VicGFjazovL2ppbW15ZmxpeC8uL2NvbXBvbmVudHMvSGVhZGVyU2VhcmNoQmFyLnRzeD9mY2ZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBGb3JtRXZlbnQsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgeyBNZFNlYXJjaCB9IGZyb20gJ3JlYWN0LWljb25zL21kJ1xuaW1wb3J0IHsgdXNlU2V0UmVjb2lsU3RhdGUgfSBmcm9tICdyZWNvaWwnXG5pbXBvcnQgeyBpc1NlYXJjaGVkU3RhdGUsIHNlYXJjaFZhbHVlU3RhdGUgfSBmcm9tICcuLi9yZWNvaWwvc3RvcmUnXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L3JvdXRlcidcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2VhcmNoQmFyKCkge1xuICBjb25zdCBbZWRpdGluZ1ZhbHVlLCBzZXRFZGl0aW5nVmFsdWVdID0gdXNlU3RhdGUoJycpXG4gIGNvbnN0IFtmb2N1c2VkLCBzZXRGb2N1c2VkXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBzZWFyY2hSZWYgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudCB8IG51bGw+KG51bGwpXG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpXG4gIGNvbnN0IHNldFNlYXJjaFZhbHVlID0gdXNlU2V0UmVjb2lsU3RhdGUoc2VhcmNoVmFsdWVTdGF0ZSlcbiAgY29uc3Qgc2V0SXNTZWFyY2hlZCA9IHVzZVNldFJlY29pbFN0YXRlKGlzU2VhcmNoZWRTdGF0ZSlcblxuICBjb25zdCBvblN1Ym1pdCA9IChlOiBGb3JtRXZlbnQ8SFRNTEZvcm1FbGVtZW50PikgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHNldEVkaXRpbmdWYWx1ZSgnJylcblxuICAgIGlmIChlZGl0aW5nVmFsdWUudHJpbSgpID09PSAnJykge1xuICAgICAgYWxlcnQoJ0lucHV0IHdoYXQgeW91IHdhbnQgdG8gc2VhcmNoIScpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzZWFyY2hSZWYuY3VycmVudD8uYmx1cigpXG4gICAgcm91dGVyLnB1c2goJy9zZWFyY2gnKVxuICAgIHNldFNlYXJjaFZhbHVlKGVkaXRpbmdWYWx1ZSlcbiAgICBzZXRJc1NlYXJjaGVkKHRydWUpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxTZWFyY2hCYXJXcmFwcGVyIGNsYXNzTmFtZT17Zm9jdXNlZCA/ICdhY3RpdmUnIDogJyd9PlxuICAgICAgPEZvcm0gb25TdWJtaXQ9e29uU3VibWl0fT5cbiAgICAgICAgPFNlYXJjaFxuICAgICAgICAgIHJlZj17c2VhcmNoUmVmfVxuICAgICAgICAgIHZhbHVlPXtlZGl0aW5nVmFsdWV9XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRFZGl0aW5nVmFsdWUoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIk1vdmllIC8gVFYgU2hvdyBTZWFyY2hcIlxuICAgICAgICAgIG9uRm9jdXM9eygpID0+IHNldEZvY3VzZWQodHJ1ZSl9XG4gICAgICAgICAgb25CbHVyPXsoKSA9PiBzZXRGb2N1c2VkKGZhbHNlKX1cbiAgICAgICAgICBzcGVsbENoZWNrPXtmYWxzZX1cbiAgICAgICAgLz5cbiAgICAgICAgPEJ1dHRvbiB0eXBlPVwic3VibWl0XCI+XG4gICAgICAgICAgPE1kU2VhcmNoIHNpemU9ezE4fSAvPlxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvRm9ybT5cbiAgICA8L1NlYXJjaEJhcldyYXBwZXI+XG4gIClcbn1cblxuY29uc3QgU2VhcmNoQmFyV3JhcHBlciA9IHN0eWxlZC5hcnRpY2xlYFxuICB3aWR0aDogMTk1cHg7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICBib3JkZXI6IG5vbmU7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xuICBvcGFjaXR5OiAwLjU7XG4gIHRyYW5zaXRpb246IDAuM3MgZWFzZTtcblxuICAmOmhvdmVyLFxuICAmLmFjdGl2ZSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuYFxuXG5jb25zdCBGb3JtID0gc3R5bGVkLmZvcm1gXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGhlaWdodDogMTAwJTtcbiAgcGFkZGluZzogNXB4IDA7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogODUlIDE1JTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmBcblxuY29uc3QgU2VhcmNoID0gc3R5bGVkLmlucHV0YFxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwYWRkaW5nOiAwIDAgMCAxMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgYm9yZGVyOiBub25lO1xuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgb3V0bGluZTogbm9uZTtcblxuICAmOjpwbGFjZWhvbGRlciB7XG4gICAgY29sb3I6IHdoaXRlO1xuICB9XG5cbiAgJjpmb2N1cyB7XG4gIH1cbmBcblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB0b3A6IDRweDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBjb2xvcjogd2hpdGU7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBib3JkZXI6IG5vbmU7XG5cbiAgJjpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG5gXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInN0eWxlZCIsIk1kU2VhcmNoIiwidXNlU2V0UmVjb2lsU3RhdGUiLCJpc1NlYXJjaGVkU3RhdGUiLCJzZWFyY2hWYWx1ZVN0YXRlIiwidXNlUm91dGVyIiwiU2VhcmNoQmFyIiwiZWRpdGluZ1ZhbHVlIiwic2V0RWRpdGluZ1ZhbHVlIiwiZm9jdXNlZCIsInNldEZvY3VzZWQiLCJzZWFyY2hSZWYiLCJyb3V0ZXIiLCJzZXRTZWFyY2hWYWx1ZSIsInNldElzU2VhcmNoZWQiLCJvblN1Ym1pdCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInRyaW0iLCJhbGVydCIsImN1cnJlbnQiLCJibHVyIiwicHVzaCIsInRhcmdldCIsInZhbHVlIiwiU2VhcmNoQmFyV3JhcHBlciIsImFydGljbGUiLCJGb3JtIiwiZm9ybSIsIlNlYXJjaCIsImlucHV0IiwiQnV0dG9uIiwiYnV0dG9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/HeaderSearchBar.tsx\n");

/***/ }),

/***/ "./components/common/Header.tsx":
/*!**************************************!*\
  !*** ./components/common/Header.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"customMedia\": () => (/* binding */ customMedia),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-components */ \"styled-components\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_components__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _HeaderSearchBar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../HeaderSearchBar */ \"./components/HeaderSearchBar.tsx\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-icons/md */ \"react-icons/md\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_icons_md__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var recoil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! recoil */ \"recoil\");\n/* harmony import */ var recoil__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(recoil__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _recoil_store__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../recoil/store */ \"./recoil/store.ts\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/router */ \"next/router\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/link */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var styled_media_query__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! styled-media-query */ \"styled-media-query\");\n/* harmony import */ var styled_media_query__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(styled_media_query__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__);\nvar _jsxFileName = \"/Users/jimmy/Projects/jimmyflix_v2.0/components/common/Header.tsx\";\n\n\n\n\n\n\n\n\n\n\nconst customMedia = (0,styled_media_query__WEBPACK_IMPORTED_MODULE_8__.generateMedia)({\n  desktop: '1630px',\n  mobile: '768px'\n});\n\nfunction Header() {\n  const router = (0,next_router__WEBPACK_IMPORTED_MODULE_6__.useRouter)();\n  const resetSearchValue = (0,recoil__WEBPACK_IMPORTED_MODULE_4__.useResetRecoilState)(_recoil_store__WEBPACK_IMPORTED_MODULE_5__.searchValueState);\n  const resetIsSearched = (0,recoil__WEBPACK_IMPORTED_MODULE_4__.useResetRecoilState)(_recoil_store__WEBPACK_IMPORTED_MODULE_5__.isSearchedState);\n  const resetTimeType = (0,recoil__WEBPACK_IMPORTED_MODULE_4__.useResetRecoilState)(_recoil_store__WEBPACK_IMPORTED_MODULE_5__.timeTypeState);\n\n  const onClick = () => {\n    if (router.pathname === '/search') {\n      resetIsSearched();\n      resetSearchValue();\n      resetTimeType();\n    }\n  };\n\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(Head, {\n    className: `${router.pathname === '/404' ? 'hidden' : ''}`,\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(LogoWrapper, {\n      onClick: () => router.push('/'),\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_3__.MdOutlineMovie, {\n        fontSize: 35\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(Logo, {\n        children: \"Jimmyflix\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(List, {\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(Item, {\n        current: router.pathname === '/' || router.pathname.includes('/movies'),\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_7___default()), {\n          href: \"/\",\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(Anchor, {\n            children: \"Movies\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(Item, {\n        current: router.pathname === '/tvs' || router.pathname.includes('/tvs'),\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_7___default()), {\n          href: \"/tvs\",\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(Anchor, {\n            children: \"TV\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(Item, {\n        current: router.pathname === '/trending',\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_7___default()), {\n          href: \"/trending\",\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(Anchor, {\n            children: \"Trending\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(Item, {\n        current: router.pathname.includes('/search'),\n        onClick: () => onClick(),\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_7___default()), {\n          href: \"/search\",\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(Anchor, {\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(SearchBarWrapper, {\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(_HeaderSearchBar__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(Header));\nconst Head = styled_components__WEBPACK_IMPORTED_MODULE_1___default().header.withConfig({\n  displayName: \"Header__Head\",\n  componentId: \"sc-1xr1yna-0\"\n})([\"color:white;position:fixed;top:0;left:0;width:100%;height:50px;display:grid;grid-template-columns:1fr 1fr 1fr;align-items:center;justify-items:center;padding:0 10px;background-color:rgb(20,20,20);z-index:10;box-shadow:0px 1px 5px 2px rgba(0,0,0,0.8);&.hidden{display:none;}\", \"\"], customMedia.lessThan('mobile')`\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n\t`);\nconst List = styled_components__WEBPACK_IMPORTED_MODULE_1___default().ul.withConfig({\n  displayName: \"Header__List\",\n  componentId: \"sc-1xr1yna-1\"\n})([\"display:flex;\", \"\"], customMedia.lessThan('mobile')`\n    display: contents;\n\t`);\nconst Item = styled_components__WEBPACK_IMPORTED_MODULE_1___default().li.withConfig({\n  displayName: \"Header__Item\",\n  componentId: \"sc-1xr1yna-2\"\n})([\"width:100px;font-size:16px;text-align:center;border-bottom:5px solid \", \";transition:border-bottom 0.5s ease-in-out;\", \"\"], props => props.current ? '#4d96fb' : 'transparent', customMedia.lessThan('mobile')`\n\t\twidth: 100%;\n\t\tfont-size: 15px;\n\t`);\nconst Anchor = styled_components__WEBPACK_IMPORTED_MODULE_1___default().a.withConfig({\n  displayName: \"Header__Anchor\",\n  componentId: \"sc-1xr1yna-3\"\n})([\"height:48px;display:flex;align-items:center;justify-content:center;\"]);\nconst LogoWrapper = styled_components__WEBPACK_IMPORTED_MODULE_1___default().div.withConfig({\n  displayName: \"Header__LogoWrapper\",\n  componentId: \"sc-1xr1yna-4\"\n})([\"display:flex;align-items:center;\", \" &:hover{cursor:pointer;}\"], customMedia.lessThan('mobile')`\n    display: none;\n\t`);\nconst Logo = styled_components__WEBPACK_IMPORTED_MODULE_1___default().div.withConfig({\n  displayName: \"Header__Logo\",\n  componentId: \"sc-1xr1yna-5\"\n})([\"margin-left:10px;font-family:monospace;font-size:20px;\"]);\nconst SearchBarWrapper = styled_components__WEBPACK_IMPORTED_MODULE_1___default().div.withConfig({\n  displayName: \"Header__SearchBarWrapper\",\n  componentId: \"sc-1xr1yna-6\"\n})([\"\", \"\"], customMedia.lessThan('mobile')`\n    display: none;\n\t`);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/common/Header.tsx\n");

/***/ }),

/***/ "./components/common/Helmet.tsx":
/*!**************************************!*\
  !*** ./components/common/Helmet.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HelmetWrapper)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_helmet_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-helmet-async */ \"react-helmet-async\");\n/* harmony import */ var react_helmet_async__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_helmet_async__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__);\nvar _jsxFileName = \"/Users/jimmy/Projects/jimmyflix_v2.0/components/common/Helmet.tsx\";\n\n\n\nfunction HelmetWrapper({\n  content\n}) {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(react_helmet_async__WEBPACK_IMPORTED_MODULE_1__.HelmetProvider, {\n    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(react_helmet_async__WEBPACK_IMPORTED_MODULE_1__.Helmet, {\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"title\", {\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbW1vbi9IZWxtZXQudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFNZSxTQUFTRyxhQUFULENBQXVCO0FBQUVDLEVBQUFBO0FBQUYsQ0FBdkIsRUFBaUQ7QUFDOUQsc0JBQ0UsOERBQUMsOERBQUQ7QUFBQSwyQkFDRSw4REFBQyxzREFBRDtBQUFBLDZCQUNFO0FBQUEsa0JBQVFBO0FBQVI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBLFVBREY7QUFPRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ppbW15ZmxpeC8uL2NvbXBvbmVudHMvY29tbW9uL0hlbG1ldC50c3g/Y2Q2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBIZWxtZXQsIEhlbG1ldFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtaGVsbWV0LWFzeW5jJ1xuXG5pbnRlcmZhY2UgSGVsbWV0UHJvcHMge1xuICBjb250ZW50OiBzdHJpbmdcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGVsbWV0V3JhcHBlcih7IGNvbnRlbnQgfTogSGVsbWV0UHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8SGVsbWV0UHJvdmlkZXI+XG4gICAgICA8SGVsbWV0PlxuICAgICAgICA8dGl0bGU+e2NvbnRlbnR9PC90aXRsZT5cbiAgICAgIDwvSGVsbWV0PlxuICAgIDwvSGVsbWV0UHJvdmlkZXI+XG4gIClcbn1cbiJdLCJuYW1lcyI6WyJSZWFjdCIsIkhlbG1ldCIsIkhlbG1ldFByb3ZpZGVyIiwiSGVsbWV0V3JhcHBlciIsImNvbnRlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/common/Helmet.tsx\n");

/***/ }),

/***/ "./components/common/Infos.tsx":
/*!*************************************!*\
  !*** ./components/common/Infos.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Infos)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Message */ \"./components/common/Message.tsx\");\n/* harmony import */ var _Poster__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Poster */ \"./components/common/Poster.tsx\");\n/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Section */ \"./components/common/Section.tsx\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__);\nvar _jsxFileName = \"/Users/jimmy/Projects/jimmyflix_v2.0/components/common/Infos.tsx\";\n\n\n\n\n\n\nfunction Infos({\n  slider,\n  data,\n  title,\n  isError\n}) {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n    children: [(data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_Section__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n      slide: slider,\n      title: title,\n      children: data.map(content => {\n        var _content$title;\n\n        return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_Poster__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n          id: content.id,\n          imageUrl: content.poster_path,\n          title: (_content$title = content.title) !== null && _content$title !== void 0 ? _content$title : content.name,\n          rating: content.vote_average,\n          year: content.first_air_date ? content.first_air_date.substring(0, 4) : content.release_date ? content.release_date.substring(0, 4) : '',\n          isMovie: content.title ? true : false\n        }, content.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), isError && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_Message__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n      color: \"#e74c3c\",\n      text: `Error in ${title}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbW1vbi9JbmZvcy50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUNBO0FBQ0E7OztBQVNlLFNBQVNJLEtBQVQsQ0FBZTtBQUFFQyxFQUFBQSxNQUFGO0FBQVVDLEVBQUFBLElBQVY7QUFBZ0JDLEVBQUFBLEtBQWhCO0FBQXVCQyxFQUFBQTtBQUF2QixDQUFmLEVBQTZEO0FBQzFFLHNCQUNFO0FBQUEsZUFDRyxDQUFBRixJQUFJLFNBQUosSUFBQUEsSUFBSSxXQUFKLFlBQUFBLElBQUksQ0FBRUcsTUFBTixJQUFlLENBQWYsaUJBQ0MsOERBQUMsZ0RBQUQ7QUFBUyxXQUFLLEVBQUVKLE1BQWhCO0FBQXdCLFdBQUssRUFBRUUsS0FBL0I7QUFBQSxnQkFDR0QsSUFBSSxDQUFDSSxHQUFMLENBQVVDLE9BQUQ7QUFBQTs7QUFBQSw0QkFDUiw4REFBQywrQ0FBRDtBQUVFLFlBQUUsRUFBRUEsT0FBTyxDQUFDQyxFQUZkO0FBR0Usa0JBQVEsRUFBRUQsT0FBTyxDQUFDRSxXQUhwQjtBQUlFLGVBQUssb0JBQUVGLE9BQU8sQ0FBQ0osS0FBViwyREFBbUJJLE9BQU8sQ0FBQ0csSUFKbEM7QUFLRSxnQkFBTSxFQUFFSCxPQUFPLENBQUNJLFlBTGxCO0FBTUUsY0FBSSxFQUNGSixPQUFPLENBQUNLLGNBQVIsR0FDSUwsT0FBTyxDQUFDSyxjQUFSLENBQXVCQyxTQUF2QixDQUFpQyxDQUFqQyxFQUFvQyxDQUFwQyxDQURKLEdBRUlOLE9BQU8sQ0FBQ08sWUFBUixHQUNBUCxPQUFPLENBQUNPLFlBQVIsQ0FBcUJELFNBQXJCLENBQStCLENBQS9CLEVBQWtDLENBQWxDLENBREEsR0FFQSxFQVhSO0FBYUUsaUJBQU8sRUFBRU4sT0FBTyxDQUFDSixLQUFSLEdBQWdCLElBQWhCLEdBQXVCO0FBYmxDLFdBQ09JLE9BQU8sQ0FBQ0MsRUFEZjtBQUFBO0FBQUE7QUFBQTtBQUFBLGdCQURRO0FBQUEsT0FBVDtBQURIO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFGSixFQXNCR0osT0FBTyxpQkFBSSw4REFBQyxnREFBRDtBQUFTLFdBQUssRUFBQyxTQUFmO0FBQXlCLFVBQUksRUFBRyxZQUFXRCxLQUFNO0FBQWpEO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUF0QmQ7QUFBQSxrQkFERjtBQTBCRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ppbW15ZmxpeC8uL2NvbXBvbmVudHMvY29tbW9uL0luZm9zLnRzeD80YzczIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IElDb250ZW50IH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlJ1xuaW1wb3J0IE1lc3NhZ2UgZnJvbSAnLi9NZXNzYWdlJ1xuaW1wb3J0IFBvc3RlciBmcm9tICcuL1Bvc3RlcidcbmltcG9ydCBTZWN0aW9uIGZyb20gJy4vU2VjdGlvbidcblxuaW50ZXJmYWNlIEluZm9zUHJvcHMge1xuICBzbGlkZXI6IGJvb2xlYW5cbiAgZGF0YTogSUNvbnRlbnRbXVxuICBpc0Vycm9yOiBib29sZWFuXG4gIHRpdGxlPzogc3RyaW5nXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEluZm9zKHsgc2xpZGVyLCBkYXRhLCB0aXRsZSwgaXNFcnJvciB9OiBJbmZvc1Byb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtkYXRhPy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgPFNlY3Rpb24gc2xpZGU9e3NsaWRlcn0gdGl0bGU9e3RpdGxlfT5cbiAgICAgICAgICB7ZGF0YS5tYXAoKGNvbnRlbnQpID0+IChcbiAgICAgICAgICAgIDxQb3N0ZXJcbiAgICAgICAgICAgICAga2V5PXtjb250ZW50LmlkfVxuICAgICAgICAgICAgICBpZD17Y29udGVudC5pZH1cbiAgICAgICAgICAgICAgaW1hZ2VVcmw9e2NvbnRlbnQucG9zdGVyX3BhdGh9XG4gICAgICAgICAgICAgIHRpdGxlPXtjb250ZW50LnRpdGxlID8/IGNvbnRlbnQubmFtZX1cbiAgICAgICAgICAgICAgcmF0aW5nPXtjb250ZW50LnZvdGVfYXZlcmFnZX1cbiAgICAgICAgICAgICAgeWVhcj17XG4gICAgICAgICAgICAgICAgY29udGVudC5maXJzdF9haXJfZGF0ZVxuICAgICAgICAgICAgICAgICAgPyBjb250ZW50LmZpcnN0X2Fpcl9kYXRlLnN1YnN0cmluZygwLCA0KVxuICAgICAgICAgICAgICAgICAgOiBjb250ZW50LnJlbGVhc2VfZGF0ZVxuICAgICAgICAgICAgICAgICAgPyBjb250ZW50LnJlbGVhc2VfZGF0ZS5zdWJzdHJpbmcoMCwgNClcbiAgICAgICAgICAgICAgICAgIDogJydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpc01vdmllPXtjb250ZW50LnRpdGxlID8gdHJ1ZSA6IGZhbHNlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgKX1cbiAgICAgIHtpc0Vycm9yICYmIDxNZXNzYWdlIGNvbG9yPVwiI2U3NGMzY1wiIHRleHQ9e2BFcnJvciBpbiAke3RpdGxlfWB9IC8+fVxuICAgIDwvPlxuICApXG59XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJNZXNzYWdlIiwiUG9zdGVyIiwiU2VjdGlvbiIsIkluZm9zIiwic2xpZGVyIiwiZGF0YSIsInRpdGxlIiwiaXNFcnJvciIsImxlbmd0aCIsIm1hcCIsImNvbnRlbnQiLCJpZCIsInBvc3Rlcl9wYXRoIiwibmFtZSIsInZvdGVfYXZlcmFnZSIsImZpcnN0X2Fpcl9kYXRlIiwic3Vic3RyaW5nIiwicmVsZWFzZV9kYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/common/Infos.tsx\n");

/***/ }),

/***/ "./components/common/Loading.tsx":
/*!***************************************!*\
  !*** ./components/common/Loading.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-components */ \"styled-components\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_components__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__);\nvar _jsxFileName = \"/Users/jimmy/Projects/jimmyflix_v2.0/components/common/Loading.tsx\";\n\n\n\n\nconst Loading = () => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(Ring, {\n  children: [\"LOADING\", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"span\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, undefined)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, undefined);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Loading);\nconst Ring = styled_components__WEBPACK_IMPORTED_MODULE_1___default().div.withConfig({\n  displayName: \"Loading__Ring\",\n  componentId: \"sc-edlvz9-0\"\n})([\"position:fixed;width:12rem;height:12rem;top:50%;left:50%;transform:translate(-50%,-50%);border:0.7rem solid #23a2f7;border-radius:50%;text-align:center;line-height:10.5rem;font-size:1.2rem;font-weight:1000;color:#23a2f7;letter-spacing:0.3rem;z-index:99999;&:before{content:'';position:absolute;width:100%;height:100%;top:-0.7rem;left:-0.7rem;border:0.7rem solid transparent;border-top:0.7rem solid #002473;border-right:0.7rem solid #002473;border-radius:50%;animation:animateA 3s linear infinite;}span{position:absolute;display:block;width:50%;height:0.4rem;top:calc(50% - 0.2rem);left:50%;background:transparent;transform-origin:left;animation:animateB 3s linear infinite;&:before{content:'';position:absolute;width:1.7rem;height:1.7rem;top:0rem;right:-1.2rem;border-radius:50%;background:#002473;}}@keyframes animateA{0%{transform:rotate(0deg);}100%{transform:rotate(360deg);}}@keyframes animateB{0%{transform:rotate(45deg);}100%{transform:rotate(405deg);}}\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbW1vbi9Mb2FkaW5nLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7OztBQUVBLE1BQU1FLE9BQU8sR0FBRyxtQkFDZCw4REFBQyxJQUFEO0FBQUEscUNBRUU7QUFBQTtBQUFBO0FBQUE7QUFBQSxlQUZGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQURGOztBQU9BLGlFQUFlQSxPQUFmO0FBRUEsTUFBTUMsSUFBSSxHQUFHRix1RUFBSDtBQUFBO0FBQUE7QUFBQSx1OEJBQVYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qaW1teWZsaXgvLi9jb21wb25lbnRzL2NvbW1vbi9Mb2FkaW5nLnRzeD9kNzYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmNvbnN0IExvYWRpbmcgPSAoKSA9PiAoXG4gIDxSaW5nPlxuICAgIExPQURJTkdcbiAgICA8c3Bhbj48L3NwYW4+XG4gIDwvUmluZz5cbilcblxuZXhwb3J0IGRlZmF1bHQgTG9hZGluZ1xuXG5jb25zdCBSaW5nID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGZpeGVkO1xuICB3aWR0aDogMTJyZW07XG4gIGhlaWdodDogMTJyZW07XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICBib3JkZXI6IDAuN3JlbSBzb2xpZCAjMjNhMmY3O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbGluZS1oZWlnaHQ6IDEwLjVyZW07XG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xuICBmb250LXdlaWdodDogMTAwMDtcbiAgY29sb3I6ICMyM2EyZjc7XG4gIGxldHRlci1zcGFjaW5nOiAwLjNyZW07XG4gIHotaW5kZXg6IDk5OTk5O1xuXG4gICY6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHRvcDogLTAuN3JlbTtcbiAgICBsZWZ0OiAtMC43cmVtO1xuICAgIGJvcmRlcjogMC43cmVtIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci10b3A6IDAuN3JlbSBzb2xpZCAjMDAyNDczO1xuICAgIGJvcmRlci1yaWdodDogMC43cmVtIHNvbGlkICMwMDI0NzM7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGFuaW1hdGlvbjogYW5pbWF0ZUEgM3MgbGluZWFyIGluZmluaXRlO1xuICB9XG5cbiAgc3BhbiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiA1MCU7XG4gICAgaGVpZ2h0OiAwLjRyZW07XG4gICAgdG9wOiBjYWxjKDUwJSAtIDAuMnJlbSk7XG4gICAgbGVmdDogNTAlO1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQ7XG4gICAgYW5pbWF0aW9uOiBhbmltYXRlQiAzcyBsaW5lYXIgaW5maW5pdGU7XG5cbiAgICAmOmJlZm9yZSB7XG4gICAgICBjb250ZW50OiAnJztcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHdpZHRoOiAxLjdyZW07XG4gICAgICBoZWlnaHQ6IDEuN3JlbTtcbiAgICAgIHRvcDogMHJlbTtcbiAgICAgIHJpZ2h0OiAtMS4ycmVtO1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgYmFja2dyb3VuZDogIzAwMjQ3MztcbiAgICB9XG4gIH1cblxuICBAa2V5ZnJhbWVzIGFuaW1hdGVBIHtcbiAgICAwJSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgICB9XG4gICAgMTAwJSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICAgIH1cbiAgfVxuXG4gIEBrZXlmcmFtZXMgYW5pbWF0ZUIge1xuICAgIDAlIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgICB9XG4gICAgMTAwJSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0MDVkZWcpO1xuICAgIH1cbiAgfVxuYFxuIl0sIm5hbWVzIjpbIlJlYWN0Iiwic3R5bGVkIiwiTG9hZGluZyIsIlJpbmciLCJkaXYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/common/Loading.tsx\n");

/***/ }),

/***/ "./components/common/Message.tsx":
/*!***************************************!*\
  !*** ./components/common/Message.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-components */ \"styled-components\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_components__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Header__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Header */ \"./components/common/Header.tsx\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__);\nvar _jsxFileName = \"/Users/jimmy/Projects/jimmyflix_v2.0/components/common/Message.tsx\";\n\n\n\n\n\nconst Message = ({\n  text,\n  color\n}) => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(Container, {\n  children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(Text, {\n    color: color,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, undefined)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, undefined);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Message);\nconst Container = styled_components__WEBPACK_IMPORTED_MODULE_1___default().div.withConfig({\n  displayName: \"Message__Container\",\n  componentId: \"sc-1rqvo2e-0\"\n})([\"display:flex;height:10vh;justify-content:center;\"]);\nconst Text = styled_components__WEBPACK_IMPORTED_MODULE_1___default().span.withConfig({\n  displayName: \"Message__Text\",\n  componentId: \"sc-1rqvo2e-1\"\n})([\"padding-top:50px;font-size:28px;color:\", \";\", \"\"], props => props.color, _Header__WEBPACK_IMPORTED_MODULE_2__.customMedia.lessThan('mobile')`\n        font-size: 22px;\n    `);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbW1vbi9NZXNzYWdlLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7OztBQU9BLE1BQU1HLE9BQU8sR0FBRyxDQUFDO0FBQUVDLEVBQUFBLElBQUY7QUFBUUMsRUFBQUE7QUFBUixDQUFELGtCQUNkLDhEQUFDLFNBQUQ7QUFBQSx5QkFDRSw4REFBQyxJQUFEO0FBQU0sU0FBSyxFQUFFQSxLQUFiO0FBQUEsY0FBcUJEO0FBQXJCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBLGFBREY7O0FBTUEsaUVBQWVELE9BQWY7QUFFQSxNQUFNRyxTQUFTLEdBQUdMLHVFQUFIO0FBQUE7QUFBQTtBQUFBLHdEQUFmO0FBTUEsTUFBTU8sSUFBSSxHQUFHUCx3RUFBSDtBQUFBO0FBQUE7QUFBQSx3REFHRVMsS0FBRCxJQUFXQSxLQUFLLENBQUNMLEtBSGxCLEVBS05ILHlEQUFBLENBQXFCLFFBQXJCLENBQStCO0FBQ25DO0FBQ0EsS0FQVSxDQUFWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamltbXlmbGl4Ly4vY29tcG9uZW50cy9jb21tb24vTWVzc2FnZS50c3g/YjQzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXHJcbmltcG9ydCB7IGN1c3RvbU1lZGlhIH0gZnJvbSAnLi9IZWFkZXInXHJcblxyXG5pbnRlcmZhY2UgTWVzc2FnZVByb3BzIHtcclxuICB0ZXh0Pzogc3RyaW5nXHJcbiAgY29sb3I6IHN0cmluZ1xyXG59XHJcblxyXG5jb25zdCBNZXNzYWdlID0gKHsgdGV4dCwgY29sb3IgfTogTWVzc2FnZVByb3BzKSA9PiAoXHJcbiAgPENvbnRhaW5lcj5cclxuICAgIDxUZXh0IGNvbG9yPXtjb2xvcn0+e3RleHR9PC9UZXh0PlxyXG4gIDwvQ29udGFpbmVyPlxyXG4pXHJcblxyXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlXHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgaGVpZ2h0OiAxMHZoO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5gXHJcblxyXG5jb25zdCBUZXh0ID0gc3R5bGVkLnNwYW48eyBjb2xvcjogc3RyaW5nIH0+YFxyXG4gIHBhZGRpbmctdG9wOiA1MHB4O1xyXG4gIGZvbnQtc2l6ZTogMjhweDtcclxuICBjb2xvcjogJHsocHJvcHMpID0+IHByb3BzLmNvbG9yfTtcclxuXHJcbiAgJHtjdXN0b21NZWRpYS5sZXNzVGhhbignbW9iaWxlJylgXHJcbiAgICAgICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgYH1cclxuYFxyXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJzdHlsZWQiLCJjdXN0b21NZWRpYSIsIk1lc3NhZ2UiLCJ0ZXh0IiwiY29sb3IiLCJDb250YWluZXIiLCJkaXYiLCJUZXh0Iiwic3BhbiIsInByb3BzIiwibGVzc1RoYW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/common/Message.tsx\n");

/***/ }),

/***/ "./components/common/Poster.tsx":
/*!**************************************!*\
  !*** ./components/common/Poster.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/link */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-components */ \"styled-components\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_components__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _public_images_noPosterSmall_png__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../public/images/noPosterSmall.png */ \"./public/images/noPosterSmall.png\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__);\nvar _jsxFileName = \"/Users/jimmy/Projects/jimmyflix_v2.0/components/common/Poster.tsx\";\n\n\n\n\n\n\nconst Poster = ({\n  id,\n  imageUrl,\n  title,\n  rating,\n  year,\n  isMovie = false\n}) => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_0___default()), {\n  href: isMovie ? `/movies/${id}` : `/tvs/${id}`,\n  children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(\"a\", {\n    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(Container, {\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(ImageContainer, {\n        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(Image, {\n          bgUrl: imageUrl ? `https://image.tmdb.org/t/p/w300${imageUrl}` : _public_images_noPosterSmall_png__WEBPACK_IMPORTED_MODULE_3__[\"default\"].src\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(Rating, {\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(\"span\", {\n            role: \"img\",\n            \"aria-label\": \"rating\",\n            children: \"\\u2B50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, undefined), ' ', rating, \"/10\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, undefined)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(Title, {\n        children: title.length > 15 ? `${title.substring(0, 15)}...` : title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(Year, {\n        children: year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, undefined)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, undefined)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, undefined)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 3\n}, undefined);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Poster);\nconst Container = styled_components__WEBPACK_IMPORTED_MODULE_2___default().div.withConfig({\n  displayName: \"Poster__Container\",\n  componentId: \"sc-18f1afv-0\"\n})([\"width:95%;font-size:12px;\"]);\nconst Image = styled_components__WEBPACK_IMPORTED_MODULE_2___default().div.withConfig({\n  displayName: \"Poster__Image\",\n  componentId: \"sc-18f1afv-1\"\n})([\"height:220px;background-image:url(\", \");background-size:cover;border-radius:4px;background-position:center center;transition:opacity 0.1s linear;\"], props => props.bgUrl);\nconst Rating = styled_components__WEBPACK_IMPORTED_MODULE_2___default().span.withConfig({\n  displayName: \"Poster__Rating\",\n  componentId: \"sc-18f1afv-2\"\n})([\"position:absolute;font-size:16px;bottom:7px;right:7px;opacity:0;transition:opacity 0.1s linear;\"]);\nconst ImageContainer = styled_components__WEBPACK_IMPORTED_MODULE_2___default().div.withConfig({\n  displayName: \"Poster__ImageContainer\",\n  componentId: \"sc-18f1afv-3\"\n})([\"position:relative;margin-bottom:7px;&:hover{\", \"{opacity:0.2;}\", \"{opacity:1;}}\"], Image, Rating);\nconst Title = styled_components__WEBPACK_IMPORTED_MODULE_2___default().span.withConfig({\n  displayName: \"Poster__Title\",\n  componentId: \"sc-18f1afv-4\"\n})([\"display:block;font-size:15px;margin-bottom:4px;\"]);\nconst Year = styled_components__WEBPACK_IMPORTED_MODULE_2___default().span.withConfig({\n  displayName: \"Poster__Year\",\n  componentId: \"sc-18f1afv-5\"\n})([\"font-size:12px;color:rgba(255,255,255,0.5);\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbW1vbi9Qb3N0ZXIudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7OztBQVdBLE1BQU1JLE1BQU0sR0FBRyxDQUFDO0FBQ2RDLEVBQUFBLEVBRGM7QUFFZEMsRUFBQUEsUUFGYztBQUdkQyxFQUFBQSxLQUhjO0FBSWRDLEVBQUFBLE1BSmM7QUFLZEMsRUFBQUEsSUFMYztBQU1kQyxFQUFBQSxPQUFPLEdBQUc7QUFOSSxDQUFELGtCQVFiLDhEQUFDLGtEQUFEO0FBQU0sTUFBSSxFQUFFQSxPQUFPLEdBQUksV0FBVUwsRUFBRyxFQUFqQixHQUFzQixRQUFPQSxFQUFHLEVBQW5EO0FBQUEseUJBQ0U7QUFBQSwyQkFDRSw4REFBQyxTQUFEO0FBQUEsOEJBQ0UsOERBQUMsY0FBRDtBQUFBLGdDQUNFLDhEQUFDLEtBQUQ7QUFDRSxlQUFLLEVBQ0hDLFFBQVEsR0FDSCxrQ0FBaUNBLFFBQVMsRUFEdkMsR0FFSkgsNEVBQWlCUTtBQUp6QjtBQUFBO0FBQUE7QUFBQTtBQUFBLHFCQURGLGVBUUUsOERBQUMsTUFBRDtBQUFBLGtDQUNFO0FBQU0sZ0JBQUksRUFBQyxLQUFYO0FBQWlCLDBCQUFXLFFBQTVCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQURGLEVBR1UsR0FIVixFQUlHSCxNQUpIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxxQkFSRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBREYsZUFnQkUsOERBQUMsS0FBRDtBQUFBLGtCQUNHRCxLQUFLLENBQUNLLE1BQU4sR0FBZSxFQUFmLEdBQXFCLEdBQUVMLEtBQUssQ0FBQ00sU0FBTixDQUFnQixDQUFoQixFQUFtQixFQUFuQixDQUF1QixLQUE5QyxHQUFxRE47QUFEeEQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFoQkYsZUFtQkUsOERBQUMsSUFBRDtBQUFBLGtCQUFPRTtBQUFQO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBbkJGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBLGFBUkY7O0FBbUNBLGlFQUFlTCxNQUFmO0FBRUEsTUFBTVUsU0FBUyxHQUFHWix1RUFBSDtBQUFBO0FBQUE7QUFBQSxpQ0FBZjtBQUtBLE1BQU1jLEtBQUssR0FBR2QsdUVBQUg7QUFBQTtBQUFBO0FBQUEsMEpBRWdCZSxLQUFELElBQVdBLEtBQUssQ0FBQ0MsS0FGaEMsQ0FBWDtBQVNBLE1BQU1DLE1BQU0sR0FBR2pCLHdFQUFIO0FBQUE7QUFBQTtBQUFBLHVHQUFaO0FBU0EsTUFBTW1CLGNBQWMsR0FBR25CLHVFQUFIO0FBQUE7QUFBQTtBQUFBLHdGQUlkYyxLQUpjLEVBT2RHLE1BUGMsQ0FBcEI7QUFhQSxNQUFNRyxLQUFLLEdBQUdwQix3RUFBSDtBQUFBO0FBQUE7QUFBQSx1REFBWDtBQU1BLE1BQU1xQixJQUFJLEdBQUdyQix3RUFBSDtBQUFBO0FBQUE7QUFBQSxtREFBViIsInNvdXJjZXMiOlsid2VicGFjazovL2ppbW15ZmxpeC8uL2NvbXBvbmVudHMvY29tbW9uL1Bvc3Rlci50c3g/ZDg1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IERlZmF1bHRQb3N0ZXIgZnJvbSAnLi4vLi4vcHVibGljL2ltYWdlcy9ub1Bvc3RlclNtYWxsLnBuZydcclxuXHJcbmludGVyZmFjZSBQb3N0ZXJQcm9wcyB7XHJcbiAgaWQ6IG51bWJlclxyXG4gIGltYWdlVXJsOiBzdHJpbmdcclxuICB0aXRsZTogc3RyaW5nXHJcbiAgcmF0aW5nOiBudW1iZXJcclxuICB5ZWFyOiBzdHJpbmdcclxuICBpc01vdmllPzogYm9vbGVhblxyXG59XHJcblxyXG5jb25zdCBQb3N0ZXIgPSAoe1xyXG4gIGlkLFxyXG4gIGltYWdlVXJsLFxyXG4gIHRpdGxlLFxyXG4gIHJhdGluZyxcclxuICB5ZWFyLFxyXG4gIGlzTW92aWUgPSBmYWxzZSxcclxufTogUG9zdGVyUHJvcHMpID0+IChcclxuICA8TGluayBocmVmPXtpc01vdmllID8gYC9tb3ZpZXMvJHtpZH1gIDogYC90dnMvJHtpZH1gfT5cclxuICAgIDxhPlxyXG4gICAgICA8Q29udGFpbmVyPlxyXG4gICAgICAgIDxJbWFnZUNvbnRhaW5lcj5cclxuICAgICAgICAgIDxJbWFnZVxyXG4gICAgICAgICAgICBiZ1VybD17XHJcbiAgICAgICAgICAgICAgaW1hZ2VVcmxcclxuICAgICAgICAgICAgICAgID8gYGh0dHBzOi8vaW1hZ2UudG1kYi5vcmcvdC9wL3czMDAke2ltYWdlVXJsfWBcclxuICAgICAgICAgICAgICAgIDogRGVmYXVsdFBvc3Rlci5zcmNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxSYXRpbmc+XHJcbiAgICAgICAgICAgIDxzcGFuIHJvbGU9XCJpbWdcIiBhcmlhLWxhYmVsPVwicmF0aW5nXCI+XHJcbiAgICAgICAgICAgICAg4q2QXHJcbiAgICAgICAgICAgIDwvc3Bhbj57JyAnfVxyXG4gICAgICAgICAgICB7cmF0aW5nfS8xMFxyXG4gICAgICAgICAgPC9SYXRpbmc+XHJcbiAgICAgICAgPC9JbWFnZUNvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICB7dGl0bGUubGVuZ3RoID4gMTUgPyBgJHt0aXRsZS5zdWJzdHJpbmcoMCwgMTUpfS4uLmAgOiB0aXRsZX1cclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxZZWFyPnt5ZWFyfTwvWWVhcj5cclxuICAgICAgPC9Db250YWluZXI+XHJcbiAgICA8L2E+XHJcbiAgPC9MaW5rPlxyXG4pXHJcblxyXG5leHBvcnQgZGVmYXVsdCBQb3N0ZXJcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgd2lkdGg6IDk1JTtcclxuICBmb250LXNpemU6IDEycHg7XHJcbmBcclxuXHJcbmNvbnN0IEltYWdlID0gc3R5bGVkLmRpdjx7IGJnVXJsOiBzdHJpbmcgfT5gXHJcbiAgaGVpZ2h0OiAyMjBweDtcclxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHsocHJvcHMpID0+IHByb3BzLmJnVXJsfSk7XHJcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcclxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMXMgbGluZWFyO1xyXG5gXHJcblxyXG5jb25zdCBSYXRpbmcgPSBzdHlsZWQuc3BhbmBcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgZm9udC1zaXplOiAxNnB4O1xyXG4gIGJvdHRvbTogN3B4O1xyXG4gIHJpZ2h0OiA3cHg7XHJcbiAgb3BhY2l0eTogMDtcclxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMXMgbGluZWFyO1xyXG5gXHJcblxyXG5jb25zdCBJbWFnZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIG1hcmdpbi1ib3R0b206IDdweDtcclxuICAmOmhvdmVyIHtcclxuICAgICR7SW1hZ2V9IHtcclxuICAgICAgb3BhY2l0eTogMC4yO1xyXG4gICAgfVxyXG4gICAgJHtSYXRpbmd9IHtcclxuICAgICAgb3BhY2l0eTogMTtcclxuICAgIH1cclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IFRpdGxlID0gc3R5bGVkLnNwYW5gXHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgZm9udC1zaXplOiAxNXB4O1xyXG4gIG1hcmdpbi1ib3R0b206IDRweDtcclxuYFxyXG5cclxuY29uc3QgWWVhciA9IHN0eWxlZC5zcGFuYFxyXG4gIGZvbnQtc2l6ZTogMTJweDtcclxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xyXG5gXHJcbiJdLCJuYW1lcyI6WyJMaW5rIiwiUmVhY3QiLCJzdHlsZWQiLCJEZWZhdWx0UG9zdGVyIiwiUG9zdGVyIiwiaWQiLCJpbWFnZVVybCIsInRpdGxlIiwicmF0aW5nIiwieWVhciIsImlzTW92aWUiLCJzcmMiLCJsZW5ndGgiLCJzdWJzdHJpbmciLCJDb250YWluZXIiLCJkaXYiLCJJbWFnZSIsInByb3BzIiwiYmdVcmwiLCJSYXRpbmciLCJzcGFuIiwiSW1hZ2VDb250YWluZXIiLCJUaXRsZSIsIlllYXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/common/Poster.tsx\n");

/***/ }),

/***/ "./components/common/Section.tsx":
/*!***************************************!*\
  !*** ./components/common/Section.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Grid\": () => (/* binding */ Grid),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-components */ \"styled-components\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_components__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_slick__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-slick */ \"react-slick\");\n/* harmony import */ var react_slick__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_slick__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__);\nvar _jsxFileName = \"/Users/jimmy/Projects/jimmyflix_v2.0/components/common/Section.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nconst Section = ({\n  slide,\n  title,\n  children\n}) => {\n  const settings = {\n    dots: false,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 9,\n    slidesToScroll: 9,\n    initialSlide: 0,\n    responsive: [{\n      breakpoint: 1440,\n      settings: {\n        slidesToShow: 7,\n        slidesToScroll: 7\n      }\n    }, {\n      breakpoint: 1024,\n      settings: {\n        slidesToShow: 5,\n        slidesToScroll: 5\n      }\n    }, {\n      breakpoint: 720,\n      settings: {\n        slidesToShow: 3,\n        slidesToScroll: 3\n      }\n    }, {\n      breakpoint: 480,\n      settings: {\n        slidesToShow: 2,\n        slidesToScroll: 2\n      }\n    }, {\n      breakpoint: 320,\n      settings: {\n        slidesToShow: 1,\n        slidesToScroll: 1\n      }\n    }]\n  };\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(Container, {\n    children: [title && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(Title, {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, undefined), slide ? /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(Wrapper, {\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)((react_slick__WEBPACK_IMPORTED_MODULE_2___default()), _objectSpread(_objectSpread({}, settings), {}, {\n        children: children\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, undefined)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, undefined) : /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(Grid, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, undefined)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, undefined);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Section);\nconst Container = styled_components__WEBPACK_IMPORTED_MODULE_1___default().div.withConfig({\n  displayName: \"Section__Container\",\n  componentId: \"sc-cd9vtp-0\"\n})([\"margin-top:10px;:not(:last-child){margin-bottom:50px;}\"]);\nconst Title = styled_components__WEBPACK_IMPORTED_MODULE_1___default().span.withConfig({\n  displayName: \"Section__Title\",\n  componentId: \"sc-cd9vtp-1\"\n})([\"font-size:20px;font-weight:600;\"]);\nconst Grid = styled_components__WEBPACK_IMPORTED_MODULE_1___default().div.withConfig({\n  displayName: \"Section__Grid\",\n  componentId: \"sc-cd9vtp-2\"\n})([\"margin-top:20px;display:grid;grid-template-columns:repeat(auto-fill,150px);grid-gap:25px;\"]);\nconst Wrapper = styled_components__WEBPACK_IMPORTED_MODULE_1___default().div.withConfig({\n  displayName: \"Section__Wrapper\",\n  componentId: \"sc-cd9vtp-3\"\n})([\"margin:35px auto;width:95%;\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbW1vbi9TZWN0aW9uLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7OztBQVFBLE1BQU1HLE9BQU8sR0FBRyxDQUFDO0FBQUVDLEVBQUFBLEtBQUY7QUFBU0MsRUFBQUEsS0FBVDtBQUFnQkMsRUFBQUE7QUFBaEIsQ0FBRCxLQUE4QztBQUM1RCxRQUFNQyxRQUFRLEdBQUc7QUFDZkMsSUFBQUEsSUFBSSxFQUFFLEtBRFM7QUFFZkMsSUFBQUEsUUFBUSxFQUFFLElBRks7QUFHZkMsSUFBQUEsS0FBSyxFQUFFLEdBSFE7QUFJZkMsSUFBQUEsWUFBWSxFQUFFLENBSkM7QUFLZkMsSUFBQUEsY0FBYyxFQUFFLENBTEQ7QUFNZkMsSUFBQUEsWUFBWSxFQUFFLENBTkM7QUFPZkMsSUFBQUEsVUFBVSxFQUFFLENBQ1Y7QUFDRUMsTUFBQUEsVUFBVSxFQUFFLElBRGQ7QUFFRVIsTUFBQUEsUUFBUSxFQUFFO0FBQ1JJLFFBQUFBLFlBQVksRUFBRSxDQUROO0FBRVJDLFFBQUFBLGNBQWMsRUFBRTtBQUZSO0FBRlosS0FEVSxFQVFWO0FBQ0VHLE1BQUFBLFVBQVUsRUFBRSxJQURkO0FBRUVSLE1BQUFBLFFBQVEsRUFBRTtBQUNSSSxRQUFBQSxZQUFZLEVBQUUsQ0FETjtBQUVSQyxRQUFBQSxjQUFjLEVBQUU7QUFGUjtBQUZaLEtBUlUsRUFlVjtBQUNFRyxNQUFBQSxVQUFVLEVBQUUsR0FEZDtBQUVFUixNQUFBQSxRQUFRLEVBQUU7QUFDUkksUUFBQUEsWUFBWSxFQUFFLENBRE47QUFFUkMsUUFBQUEsY0FBYyxFQUFFO0FBRlI7QUFGWixLQWZVLEVBc0JWO0FBQ0VHLE1BQUFBLFVBQVUsRUFBRSxHQURkO0FBRUVSLE1BQUFBLFFBQVEsRUFBRTtBQUNSSSxRQUFBQSxZQUFZLEVBQUUsQ0FETjtBQUVSQyxRQUFBQSxjQUFjLEVBQUU7QUFGUjtBQUZaLEtBdEJVLEVBNkJWO0FBQ0VHLE1BQUFBLFVBQVUsRUFBRSxHQURkO0FBRUVSLE1BQUFBLFFBQVEsRUFBRTtBQUNSSSxRQUFBQSxZQUFZLEVBQUUsQ0FETjtBQUVSQyxRQUFBQSxjQUFjLEVBQUU7QUFGUjtBQUZaLEtBN0JVO0FBUEcsR0FBakI7QUE4Q0Esc0JBQ0UsOERBQUMsU0FBRDtBQUFBLGVBQ0dQLEtBQUssaUJBQUksOERBQUMsS0FBRDtBQUFBLGdCQUFRQTtBQUFSO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBRFosRUFFR0QsS0FBSyxnQkFDSiw4REFBQyxPQUFEO0FBQUEsNkJBQ0UsOERBQUMsb0RBQUQsa0NBQVlHLFFBQVo7QUFBQSxrQkFBdUJEO0FBQXZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQURJLGdCQUtKLDhEQUFDLElBQUQ7QUFBQSxnQkFBT0E7QUFBUDtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQVBKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxlQURGO0FBWUQsQ0EzREQ7O0FBNkRBLGlFQUFlSCxPQUFmO0FBRUEsTUFBTWEsU0FBUyxHQUFHZix1RUFBSDtBQUFBO0FBQUE7QUFBQSw4REFBZjtBQU9BLE1BQU1pQixLQUFLLEdBQUdqQix3RUFBSDtBQUFBO0FBQUE7QUFBQSx1Q0FBWDtBQUtPLE1BQU1tQixJQUFJLEdBQUduQix1RUFBSDtBQUFBO0FBQUE7QUFBQSxpR0FBVjtBQU9QLE1BQU1vQixPQUFPLEdBQUdwQix1RUFBSDtBQUFBO0FBQUE7QUFBQSxtQ0FBYiIsInNvdXJjZXMiOlsid2VicGFjazovL2ppbW15ZmxpeC8uL2NvbXBvbmVudHMvY29tbW9uL1NlY3Rpb24udHN4PzAzYjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xyXG5pbXBvcnQgU2xpZGVyIGZyb20gJ3JlYWN0LXNsaWNrJ1xyXG5cclxuaW50ZXJmYWNlIFNlY3Rpb25Qcm9wcyB7XHJcbiAgc2xpZGU6IGJvb2xlYW5cclxuICB0aXRsZT86IHN0cmluZ1xyXG4gIGNoaWxkcmVuOiBSZWFjdE5vZGVcclxufVxyXG5cclxuY29uc3QgU2VjdGlvbiA9ICh7IHNsaWRlLCB0aXRsZSwgY2hpbGRyZW4gfTogU2VjdGlvblByb3BzKSA9PiB7XHJcbiAgY29uc3Qgc2V0dGluZ3MgPSB7XHJcbiAgICBkb3RzOiBmYWxzZSxcclxuICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgc3BlZWQ6IDUwMCxcclxuICAgIHNsaWRlc1RvU2hvdzogOSxcclxuICAgIHNsaWRlc1RvU2Nyb2xsOiA5LFxyXG4gICAgaW5pdGlhbFNsaWRlOiAwLFxyXG4gICAgcmVzcG9uc2l2ZTogW1xyXG4gICAgICB7XHJcbiAgICAgICAgYnJlYWtwb2ludDogMTQ0MCxcclxuICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgc2xpZGVzVG9TaG93OiA3LFxyXG4gICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDcsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGJyZWFrcG9pbnQ6IDEwMjQsXHJcbiAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgIHNsaWRlc1RvU2hvdzogNSxcclxuICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiA1LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBicmVha3BvaW50OiA3MjAsXHJcbiAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcclxuICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBicmVha3BvaW50OiA0ODAsXHJcbiAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcclxuICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBicmVha3BvaW50OiAzMjAsXHJcbiAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcclxuICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICBdLFxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxDb250YWluZXI+XHJcbiAgICAgIHt0aXRsZSAmJiA8VGl0bGU+e3RpdGxlfTwvVGl0bGU+fVxyXG4gICAgICB7c2xpZGUgPyAoXHJcbiAgICAgICAgPFdyYXBwZXI+XHJcbiAgICAgICAgICA8U2xpZGVyIHsuLi5zZXR0aW5nc30+e2NoaWxkcmVufTwvU2xpZGVyPlxyXG4gICAgICAgIDwvV3JhcHBlcj5cclxuICAgICAgKSA6IChcclxuICAgICAgICA8R3JpZD57Y2hpbGRyZW59PC9HcmlkPlxyXG4gICAgICApfVxyXG4gICAgPC9Db250YWluZXI+XHJcbiAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWN0aW9uXHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgOm5vdCg6bGFzdC1jaGlsZCkge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNTBweDtcclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IFRpdGxlID0gc3R5bGVkLnNwYW5gXHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbmBcclxuXHJcbmV4cG9ydCBjb25zdCBHcmlkID0gc3R5bGVkLmRpdmBcclxuICBtYXJnaW4tdG9wOiAyMHB4O1xyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maWxsLCAxNTBweCk7XHJcbiAgZ3JpZC1nYXA6IDI1cHg7XHJcbmBcclxuXHJcbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gIG1hcmdpbjogMzVweCBhdXRvO1xyXG4gIHdpZHRoOiA5NSU7XHJcbmBcclxuIl0sIm5hbWVzIjpbIlJlYWN0Iiwic3R5bGVkIiwiU2xpZGVyIiwiU2VjdGlvbiIsInNsaWRlIiwidGl0bGUiLCJjaGlsZHJlbiIsInNldHRpbmdzIiwiZG90cyIsImluZmluaXRlIiwic3BlZWQiLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsImluaXRpYWxTbGlkZSIsInJlc3BvbnNpdmUiLCJicmVha3BvaW50IiwiQ29udGFpbmVyIiwiZGl2IiwiVGl0bGUiLCJzcGFuIiwiR3JpZCIsIldyYXBwZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/common/Section.tsx\n");

/***/ }),

/***/ "./pages/api/index.ts":
/*!****************************!*\
  !*** ./pages/api/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"collections\": () => (/* binding */ collections),\n/* harmony export */   \"moviesApi\": () => (/* binding */ moviesApi),\n/* harmony export */   \"trendingApi\": () => (/* binding */ trendingApi),\n/* harmony export */   \"tvApi\": () => (/* binding */ tvApi)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! regenerator-runtime/runtime */ \"regenerator-runtime/runtime\");\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst api = axios__WEBPACK_IMPORTED_MODULE_0___default().create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: \"bf0e271a0b3e98d631a06de42a7de616\",\n    language: 'en-US'\n  }\n});\nconst moviesApi = {\n  nowPlaying: async () => await api.get('movie/now_playing').then(res => res.data.results),\n  upcoming: async () => await api.get('movie/upcoming').then(res => res.data.results),\n  popular: async () => await api.get('movie/popular').then(res => res.data.results),\n  topRated: async () => await api.get('movie/top_rated').then(res => res.data.results),\n  movieDetail: async id => await api.get(`movie/${id}`, {\n    params: {\n      append_to_response: 'videos'\n    }\n  }).then(res => res.data),\n  cast: async id => await api.get(`movie/${id}/credits`).then(res => res.data.cast),\n  search: async (term, isSearched) => {\n    if (!isSearched) {\n      return;\n    }\n\n    if (term.trim() === '') {\n      return null;\n    }\n\n    return await api.get('search/movie', {\n      params: {\n        query: term\n      }\n    }).then(res => res.data.results);\n  }\n};\nconst collections = async id => await api.get(`collection/${id}`).then(res => res.data.parts);\nconst tvApi = {\n  topRated: async () => await api.get('tv/top_rated').then(res => res.data.results),\n  popular: async () => await api.get('tv/popular').then(res => res.data.results),\n  airingToday: async () => await api.get('tv/airing_today').then(res => res.data.results),\n  onTheAir: async () => await api.get('tv/on_the_air').then(res => res.data.results),\n  showDetail: async id => api.get(`tv/${id}`, {\n    params: {\n      append_to_response: 'videos'\n    }\n  }).then(res => res.data),\n  cast: async id => await api.get(`tv/${id}/credits`).then(res => res.data.cast),\n  search: async (term, isSearched) => {\n    if (!isSearched) {\n      return;\n    }\n\n    if (term.trim() === '') {\n      return null;\n    }\n\n    return await api.get('search/tv', {\n      params: {\n        query: term\n      }\n    }).then(res => res.data.results);\n  }\n};\nconst trendingApi = {\n  movie: async timeType => await api.get(`/trending/movie/${timeType}`).then(res => res.data.results),\n  tv: async timeType => await api.get(`/trending/tv/${timeType}`).then(res => res.data.results)\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/api/index.ts\n");

/***/ }),

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Container\": () => (/* binding */ Container),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api */ \"./pages/api/index.ts\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-components */ \"styled-components\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_components__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-query */ \"react-query\");\n/* harmony import */ var react_query__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_query__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _components_common_Loading__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/common/Loading */ \"./components/common/Loading.tsx\");\n/* harmony import */ var _components_common_Helmet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/common/Helmet */ \"./components/common/Helmet.tsx\");\n/* harmony import */ var _components_common_Infos__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/common/Infos */ \"./components/common/Infos.tsx\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__);\nvar _jsxFileName = \"/Users/jimmy/Projects/jimmyflix_v2.0/pages/index.tsx\";\n\n\n\n\n\n\n\n\n\n\nfunction Home() {\n  const [{\n    data: nowPlaying,\n    isFetched: isNowPlayingFetched,\n    isError: isNowPlayingError\n  }, {\n    data: upcoming,\n    isFetched: isUpcomingFetched,\n    isError: isUpcomingError\n  }, {\n    data: popular,\n    isFetched: isPopularFetched,\n    isError: isPopularError\n  }, {\n    data: topRated,\n    isFetched: isTopRatedFetched,\n    isError: isTopRatedError\n  }] = (0,react_query__WEBPACK_IMPORTED_MODULE_3__.useQueries)([{\n    queryKey: ['nowPlaying'],\n    queryFn: () => _api__WEBPACK_IMPORTED_MODULE_1__.moviesApi.nowPlaying()\n  }, {\n    queryKey: ['upcoming'],\n    queryFn: () => _api__WEBPACK_IMPORTED_MODULE_1__.moviesApi.upcoming()\n  }, {\n    queryKey: ['popularMovie'],\n    queryFn: () => _api__WEBPACK_IMPORTED_MODULE_1__.moviesApi.popular()\n  }, {\n    queryKey: ['topRatedMovie'],\n    queryFn: () => _api__WEBPACK_IMPORTED_MODULE_1__.moviesApi.topRated()\n  }]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  if (!isNowPlayingFetched || !isUpcomingFetched || !isPopularFetched || !isTopRatedFetched) {\n    return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(_components_common_Loading__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(_components_common_Helmet__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n      content: \"Movies | Jimmyflix\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(Container, {\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(_components_common_Infos__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        slider: true,\n        data: nowPlaying,\n        title: 'Now Playing Movies',\n        isError: isNowPlayingError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(_components_common_Infos__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        slider: true,\n        data: topRated,\n        title: 'Top Rated Movies',\n        isError: isTopRatedError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(_components_common_Infos__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        slider: true,\n        data: upcoming,\n        title: 'Upcoming Movies',\n        isError: isUpcomingError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(_components_common_Infos__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        slider: true,\n        data: popular,\n        title: 'Popular Movies',\n        isError: isPopularError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Home);\nconst Container = styled_components__WEBPACK_IMPORTED_MODULE_2___default().div.withConfig({\n  displayName: \"pages__Container\",\n  componentId: \"sc-h4fyu7-0\"\n})([\"padding:20px;\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QURGO0FBK0JEOztBQUVELGlFQUFlWixJQUFmO0FBRU8sTUFBTW9CLFNBQVMsR0FBR3pCLHVFQUFIO0FBQUE7QUFBQTtBQUFBLHFCQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamltbXlmbGl4Ly4vcGFnZXMvaW5kZXgudHN4PzA3ZmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBtb3ZpZXNBcGkgfSBmcm9tICcuL2FwaSdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IHsgdXNlUXVlcmllcyB9IGZyb20gJ3JlYWN0LXF1ZXJ5J1xyXG5pbXBvcnQgTG9hZGluZyBmcm9tICcuLi9jb21wb25lbnRzL2NvbW1vbi9Mb2FkaW5nJ1xyXG5pbXBvcnQgSGVsbWV0V3JhcHBlciBmcm9tICcuLi9jb21wb25lbnRzL2NvbW1vbi9IZWxtZXQnXHJcbmltcG9ydCBJbmZvcyBmcm9tICcuLi9jb21wb25lbnRzL2NvbW1vbi9JbmZvcydcclxuXHJcbmZ1bmN0aW9uIEhvbWUoKSB7XHJcbiAgY29uc3QgW1xyXG4gICAge1xyXG4gICAgICBkYXRhOiBub3dQbGF5aW5nLFxyXG4gICAgICBpc0ZldGNoZWQ6IGlzTm93UGxheWluZ0ZldGNoZWQsXHJcbiAgICAgIGlzRXJyb3I6IGlzTm93UGxheWluZ0Vycm9yLFxyXG4gICAgfSxcclxuICAgIHsgZGF0YTogdXBjb21pbmcsIGlzRmV0Y2hlZDogaXNVcGNvbWluZ0ZldGNoZWQsIGlzRXJyb3I6IGlzVXBjb21pbmdFcnJvciB9LFxyXG4gICAgeyBkYXRhOiBwb3B1bGFyLCBpc0ZldGNoZWQ6IGlzUG9wdWxhckZldGNoZWQsIGlzRXJyb3I6IGlzUG9wdWxhckVycm9yIH0sXHJcbiAgICB7IGRhdGE6IHRvcFJhdGVkLCBpc0ZldGNoZWQ6IGlzVG9wUmF0ZWRGZXRjaGVkLCBpc0Vycm9yOiBpc1RvcFJhdGVkRXJyb3IgfSxcclxuICBdID0gdXNlUXVlcmllcyhbXHJcbiAgICB7XHJcbiAgICAgIHF1ZXJ5S2V5OiBbJ25vd1BsYXlpbmcnXSxcclxuICAgICAgcXVlcnlGbjogKCkgPT4gbW92aWVzQXBpLm5vd1BsYXlpbmcoKSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHF1ZXJ5S2V5OiBbJ3VwY29taW5nJ10sXHJcbiAgICAgIHF1ZXJ5Rm46ICgpID0+IG1vdmllc0FwaS51cGNvbWluZygpLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgcXVlcnlLZXk6IFsncG9wdWxhck1vdmllJ10sXHJcbiAgICAgIHF1ZXJ5Rm46ICgpID0+IG1vdmllc0FwaS5wb3B1bGFyKCksXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBxdWVyeUtleTogWyd0b3BSYXRlZE1vdmllJ10sXHJcbiAgICAgIHF1ZXJ5Rm46ICgpID0+IG1vdmllc0FwaS50b3BSYXRlZCgpLFxyXG4gICAgfSxcclxuICBdKVxyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgd2luZG93LnNjcm9sbFRvKDAsIDApXHJcbiAgfSwgW10pXHJcblxyXG4gIGlmIChcclxuICAgICFpc05vd1BsYXlpbmdGZXRjaGVkIHx8XHJcbiAgICAhaXNVcGNvbWluZ0ZldGNoZWQgfHxcclxuICAgICFpc1BvcHVsYXJGZXRjaGVkIHx8XHJcbiAgICAhaXNUb3BSYXRlZEZldGNoZWRcclxuICApIHtcclxuICAgIHJldHVybiA8TG9hZGluZyAvPlxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxIZWxtZXRXcmFwcGVyIGNvbnRlbnQ9XCJNb3ZpZXMgfCBKaW1teWZsaXhcIiAvPlxyXG4gICAgICA8Q29udGFpbmVyPlxyXG4gICAgICAgIDxJbmZvc1xyXG4gICAgICAgICAgc2xpZGVyPXt0cnVlfVxyXG4gICAgICAgICAgZGF0YT17bm93UGxheWluZ31cclxuICAgICAgICAgIHRpdGxlPXsnTm93IFBsYXlpbmcgTW92aWVzJ31cclxuICAgICAgICAgIGlzRXJyb3I9e2lzTm93UGxheWluZ0Vycm9yfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPEluZm9zXHJcbiAgICAgICAgICBzbGlkZXI9e3RydWV9XHJcbiAgICAgICAgICBkYXRhPXt0b3BSYXRlZH1cclxuICAgICAgICAgIHRpdGxlPXsnVG9wIFJhdGVkIE1vdmllcyd9XHJcbiAgICAgICAgICBpc0Vycm9yPXtpc1RvcFJhdGVkRXJyb3J9XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8SW5mb3NcclxuICAgICAgICAgIHNsaWRlcj17dHJ1ZX1cclxuICAgICAgICAgIGRhdGE9e3VwY29taW5nfVxyXG4gICAgICAgICAgdGl0bGU9eydVcGNvbWluZyBNb3ZpZXMnfVxyXG4gICAgICAgICAgaXNFcnJvcj17aXNVcGNvbWluZ0Vycm9yfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPEluZm9zXHJcbiAgICAgICAgICBzbGlkZXI9e3RydWV9XHJcbiAgICAgICAgICBkYXRhPXtwb3B1bGFyfVxyXG4gICAgICAgICAgdGl0bGU9eydQb3B1bGFyIE1vdmllcyd9XHJcbiAgICAgICAgICBpc0Vycm9yPXtpc1BvcHVsYXJFcnJvcn1cclxuICAgICAgICAvPlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgIDwvPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSG9tZVxyXG5cclxuZXhwb3J0IGNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZzogMjBweDtcclxuYFxyXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJtb3ZpZXNBcGkiLCJzdHlsZWQiLCJ1c2VRdWVyaWVzIiwiTG9hZGluZyIsIkhlbG1ldFdyYXBwZXIiLCJJbmZvcyIsIkhvbWUiLCJkYXRhIiwibm93UGxheWluZyIsImlzRmV0Y2hlZCIsImlzTm93UGxheWluZ0ZldGNoZWQiLCJpc0Vycm9yIiwiaXNOb3dQbGF5aW5nRXJyb3IiLCJ1cGNvbWluZyIsImlzVXBjb21pbmdGZXRjaGVkIiwiaXNVcGNvbWluZ0Vycm9yIiwicG9wdWxhciIsImlzUG9wdWxhckZldGNoZWQiLCJpc1BvcHVsYXJFcnJvciIsInRvcFJhdGVkIiwiaXNUb3BSYXRlZEZldGNoZWQiLCJpc1RvcFJhdGVkRXJyb3IiLCJxdWVyeUtleSIsInF1ZXJ5Rm4iLCJ3aW5kb3ciLCJzY3JvbGxUbyIsIkNvbnRhaW5lciIsImRpdiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/index.tsx\n");

/***/ }),

/***/ "./recoil/store.ts":
/*!*************************!*\
  !*** ./recoil/store.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isSearchedState\": () => (/* binding */ isSearchedState),\n/* harmony export */   \"searchValueState\": () => (/* binding */ searchValueState),\n/* harmony export */   \"timeTypeState\": () => (/* binding */ timeTypeState)\n/* harmony export */ });\n/* harmony import */ var recoil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! recoil */ \"recoil\");\n/* harmony import */ var recoil__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(recoil__WEBPACK_IMPORTED_MODULE_0__);\n\nconst isSearchedState = (0,recoil__WEBPACK_IMPORTED_MODULE_0__.atom)({\n  key: 'isSearched',\n  default: false\n});\nconst searchValueState = (0,recoil__WEBPACK_IMPORTED_MODULE_0__.atom)({\n  key: 'searchValue',\n  default: ''\n});\nconst timeTypeState = (0,recoil__WEBPACK_IMPORTED_MODULE_0__.atom)({\n  key: 'timeType',\n  default: 'Day'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZWNvaWwvc3RvcmUudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUdPLE1BQU1DLGVBQWUsR0FBR0QsNENBQUksQ0FBQztBQUNsQ0UsRUFBQUEsR0FBRyxFQUFFLFlBRDZCO0FBRWxDQyxFQUFBQSxPQUFPLEVBQUU7QUFGeUIsQ0FBRCxDQUE1QjtBQUtBLE1BQU1DLGdCQUFnQixHQUFHSiw0Q0FBSSxDQUFDO0FBQ25DRSxFQUFBQSxHQUFHLEVBQUUsYUFEOEI7QUFFbkNDLEVBQUFBLE9BQU8sRUFBRTtBQUYwQixDQUFELENBQTdCO0FBS0EsTUFBTUUsYUFBYSxHQUFHTCw0Q0FBSSxDQUFXO0FBQzFDRSxFQUFBQSxHQUFHLEVBQUUsVUFEcUM7QUFFMUNDLEVBQUFBLE9BQU8sRUFBRTtBQUZpQyxDQUFYLENBQTFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamltbXlmbGl4Ly4vcmVjb2lsL3N0b3JlLnRzPzFlYzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXRvbSB9IGZyb20gJ3JlY29pbCdcbmltcG9ydCB7IFRpbWVUeXBlIH0gZnJvbSAnLi4vaW50ZXJmYWNlJ1xuXG5leHBvcnQgY29uc3QgaXNTZWFyY2hlZFN0YXRlID0gYXRvbSh7XG4gIGtleTogJ2lzU2VhcmNoZWQnLFxuICBkZWZhdWx0OiBmYWxzZSxcbn0pXG5cbmV4cG9ydCBjb25zdCBzZWFyY2hWYWx1ZVN0YXRlID0gYXRvbSh7XG4gIGtleTogJ3NlYXJjaFZhbHVlJyxcbiAgZGVmYXVsdDogJycsXG59KVxuXG5leHBvcnQgY29uc3QgdGltZVR5cGVTdGF0ZSA9IGF0b208VGltZVR5cGU+KHtcbiAga2V5OiAndGltZVR5cGUnLFxuICBkZWZhdWx0OiAnRGF5Jyxcbn0pXG4iXSwibmFtZXMiOlsiYXRvbSIsImlzU2VhcmNoZWRTdGF0ZSIsImtleSIsImRlZmF1bHQiLCJzZWFyY2hWYWx1ZVN0YXRlIiwidGltZVR5cGVTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./recoil/store.ts\n");

/***/ }),

/***/ "./public/images/noPosterSmall.png":
/*!*****************************************!*\
  !*** ./public/images/noPosterSmall.png ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\"src\":\"/_next/static/media/noPosterSmall.e19d0441.png\",\"height\":274,\"width\":184,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FnoPosterSmall.e19d0441.png&w=8&q=70\"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wdWJsaWMvaW1hZ2VzL25vUG9zdGVyU21hbGwucG5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxDQUFDLGlMQUFpTCIsInNvdXJjZXMiOlsid2VicGFjazovL2ppbW15ZmxpeC8uL3B1YmxpYy9pbWFnZXMvbm9Qb3N0ZXJTbWFsbC5wbmc/MTk3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XCJzcmNcIjpcIi9fbmV4dC9zdGF0aWMvbWVkaWEvbm9Qb3N0ZXJTbWFsbC5lMTlkMDQ0MS5wbmdcIixcImhlaWdodFwiOjI3NCxcIndpZHRoXCI6MTg0LFwiYmx1ckRhdGFVUkxcIjpcIi9fbmV4dC9pbWFnZT91cmw9JTJGX25leHQlMkZzdGF0aWMlMkZtZWRpYSUyRm5vUG9zdGVyU21hbGwuZTE5ZDA0NDEucG5nJnc9OCZxPTcwXCJ9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/images/noPosterSmall.png\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/is-error.js":
/*!********************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/is-error.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = isError;\nexports.getProperError = getProperError;\nvar _isPlainObject = __webpack_require__(/*! ../shared/lib/is-plain-object */ \"../shared/lib/is-plain-object\");\nfunction isError(err) {\n    return typeof err === 'object' && err !== null && 'name' in err && 'message' in err;\n}\nfunction getProperError(err) {\n    if (isError(err)) {\n        return err;\n    }\n    if (true) {\n        // provide better error for case where `throw undefined`\n        // is called in development\n        if (typeof err === 'undefined') {\n            return new Error('An undefined error was thrown, ' + 'see here for more info: https://nextjs.org/docs/messages/threw-undefined');\n        }\n        if (err === null) {\n            return new Error('A null error was thrown, ' + 'see here for more info: https://nextjs.org/docs/messages/threw-undefined');\n        }\n    }\n    return new Error((0, _isPlainObject).isPlainObject(err) ? JSON.stringify(err) : err + '');\n}\n\n//# sourceMappingURL=is-error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvbGliL2lzLWVycm9yLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixzQkFBc0I7QUFDdEIscUJBQXFCLG1CQUFPLENBQUMsb0VBQStCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxJQUFzQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamltbXlmbGl4Ly4vLnlhcm4vX192aXJ0dWFsX18vbmV4dC12aXJ0dWFsLThiNjBmNTQzYTYvMC9jYWNoZS9uZXh0LW5wbS0xMi4xLjUtYWQxMjI5MTMwMC1hNzBlNzBmNzg2LnppcC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9pcy1lcnJvci5qcz9jY2UxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNFcnJvcjtcbmV4cG9ydHMuZ2V0UHJvcGVyRXJyb3IgPSBnZXRQcm9wZXJFcnJvcjtcbnZhciBfaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL2lzLXBsYWluLW9iamVjdFwiKTtcbmZ1bmN0aW9uIGlzRXJyb3IoZXJyKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlcnIgPT09ICdvYmplY3QnICYmIGVyciAhPT0gbnVsbCAmJiAnbmFtZScgaW4gZXJyICYmICdtZXNzYWdlJyBpbiBlcnI7XG59XG5mdW5jdGlvbiBnZXRQcm9wZXJFcnJvcihlcnIpIHtcbiAgICBpZiAoaXNFcnJvcihlcnIpKSB7XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAvLyBwcm92aWRlIGJldHRlciBlcnJvciBmb3IgY2FzZSB3aGVyZSBgdGhyb3cgdW5kZWZpbmVkYFxuICAgICAgICAvLyBpcyBjYWxsZWQgaW4gZGV2ZWxvcG1lbnRcbiAgICAgICAgaWYgKHR5cGVvZiBlcnIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdBbiB1bmRlZmluZWQgZXJyb3Igd2FzIHRocm93biwgJyArICdzZWUgaGVyZSBmb3IgbW9yZSBpbmZvOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy90aHJldy11bmRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdBIG51bGwgZXJyb3Igd2FzIHRocm93biwgJyArICdzZWUgaGVyZSBmb3IgbW9yZSBpbmZvOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy90aHJldy11bmRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IEVycm9yKCgwLCBfaXNQbGFpbk9iamVjdCkuaXNQbGFpbk9iamVjdChlcnIpID8gSlNPTi5zdHJpbmdpZnkoZXJyKSA6IGVyciArICcnKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMtZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/is-error.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/link.js":
/*!*******************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/link.js ***!
  \*******************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/client/link */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/link.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2xpbmsuanMuanMiLCJtYXBwaW5ncyI6IkFBQUEscU1BQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamltbXlmbGl4Ly4vLnlhcm4vX192aXJ0dWFsX18vbmV4dC12aXJ0dWFsLThiNjBmNTQzYTYvMC9jYWNoZS9uZXh0LW5wbS0xMi4xLjUtYWQxMjI5MTMwMC1hNzBlNzBmNzg2LnppcC9ub2RlX21vZHVsZXMvbmV4dC9saW5rLmpzP2U0YmMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvY2xpZW50L2xpbmsnKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/link.js\n");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("axios");

/***/ }),

/***/ "next/dist/compiled/react-is":
/*!**********************************************!*\
  !*** external "next/dist/compiled/react-is" ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/react-is");

/***/ }),

/***/ "../../../server/denormalize-page-path":
/*!************************************************************!*\
  !*** external "next/dist/server/denormalize-page-path.js" ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/denormalize-page-path.js");

/***/ }),

/***/ "../i18n/normalize-locale-path":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/i18n/normalize-locale-path.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/i18n/normalize-locale-path.js");

/***/ }),

/***/ "../shared/lib/is-plain-object":
/*!**********************************************************!*\
  !*** external "next/dist/shared/lib/is-plain-object.js" ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/is-plain-object.js");

/***/ }),

/***/ "../mitt":
/*!***********************************************!*\
  !*** external "next/dist/shared/lib/mitt.js" ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/mitt.js");

/***/ }),

/***/ "../shared/lib/router-context":
/*!*********************************************************!*\
  !*** external "next/dist/shared/lib/router-context.js" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router-context.js");

/***/ }),

/***/ "./utils/format-url":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/format-url.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/format-url.js");

/***/ }),

/***/ "../shared/lib/router/utils/get-asset-path-from-route":
/*!*********************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-asset-path-from-route.js" ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-asset-path-from-route.js");

/***/ }),

/***/ "./utils/get-middleware-regex":
/*!****************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-middleware-regex.js" ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-middleware-regex.js");

/***/ }),

/***/ "./utils/is-dynamic":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/is-dynamic.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/is-dynamic.js");

/***/ }),

/***/ "./utils/parse-relative-url":
/*!**************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/parse-relative-url.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/parse-relative-url.js");

/***/ }),

/***/ "./utils/querystring":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/querystring.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/querystring.js");

/***/ }),

/***/ "./utils/resolve-rewrites":
/*!************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/resolve-rewrites.js" ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/resolve-rewrites.js");

/***/ }),

/***/ "./utils/route-matcher":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-matcher.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-matcher.js");

/***/ }),

/***/ "./utils/route-regex":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-regex.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-regex.js");

/***/ }),

/***/ "../utils":
/*!************************************************!*\
  !*** external "next/dist/shared/lib/utils.js" ***!
  \************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/utils.js");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/router");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react-helmet-async":
/*!*************************************!*\
  !*** external "react-helmet-async" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-helmet-async");

/***/ }),

/***/ "react-icons/md":
/*!*********************************!*\
  !*** external "react-icons/md" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-icons/md");

/***/ }),

/***/ "react-query":
/*!******************************!*\
  !*** external "react-query" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-query");

/***/ }),

/***/ "react-slick":
/*!******************************!*\
  !*** external "react-slick" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-slick");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "recoil":
/*!*************************!*\
  !*** external "recoil" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("recoil");

/***/ }),

/***/ "regenerator-runtime/runtime":
/*!**********************************************!*\
  !*** external "regenerator-runtime/runtime" ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("regenerator-runtime/runtime");

/***/ }),

/***/ "styled-components":
/*!************************************!*\
  !*** external "styled-components" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("styled-components");

/***/ }),

/***/ "styled-media-query":
/*!*************************************!*\
  !*** external "styled-media-query" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("styled-media-query");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/index.tsx"));
module.exports = __webpack_exports__;

})();