/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/_document";
exports.ids = ["pages/_document"];
exports.modules = {

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/head-manager.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/head-manager.js ***!
  \***************************************************************************************************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = initHeadManager;\nexports.isEqualNode = isEqualNode;\nexports.DOMAttributeNames = void 0;\n\nfunction initHeadManager() {\n  let updatePromise = null;\n  return {\n    mountedInstances: new Set(),\n    updateHead: head => {\n      const promise = updatePromise = Promise.resolve().then(() => {\n        if (promise !== updatePromise) return;\n        updatePromise = null;\n        const tags = {};\n        head.forEach(h => {\n          if ( // If the font tag is loaded only on client navigation\n          // it won't be inlined. In this case revert to the original behavior\n          h.type === 'link' && h.props['data-optimized-fonts']) {\n            if (document.querySelector(`style[data-href=\"${h.props['data-href']}\"]`)) {\n              return;\n            } else {\n              h.props.href = h.props['data-href'];\n              h.props['data-href'] = undefined;\n            }\n          }\n\n          const components = tags[h.type] || [];\n          components.push(h);\n          tags[h.type] = components;\n        });\n        const titleComponent = tags.title ? tags.title[0] : null;\n        let title = '';\n\n        if (titleComponent) {\n          const {\n            children\n          } = titleComponent.props;\n          title = typeof children === 'string' ? children : Array.isArray(children) ? children.join('') : '';\n        }\n\n        if (title !== document.title) document.title = title;\n        ['meta', 'base', 'link', 'style', 'script'].forEach(type => {\n          updateElements(type, tags[type] || []);\n        });\n      });\n    }\n  };\n}\n\nconst DOMAttributeNames = {\n  acceptCharset: 'accept-charset',\n  className: 'class',\n  htmlFor: 'for',\n  httpEquiv: 'http-equiv',\n  noModule: 'noModule'\n};\nexports.DOMAttributeNames = DOMAttributeNames;\n\nfunction reactElementToDOM({\n  type,\n  props\n}) {\n  const el = document.createElement(type);\n\n  for (const p in props) {\n    if (!props.hasOwnProperty(p)) continue;\n    if (p === 'children' || p === 'dangerouslySetInnerHTML') continue; // we don't render undefined props to the DOM\n\n    if (props[p] === undefined) continue;\n    const attr = DOMAttributeNames[p] || p.toLowerCase();\n\n    if (type === 'script' && (attr === 'async' || attr === 'defer' || attr === 'noModule')) {\n      el[attr] = !!props[p];\n    } else {\n      el.setAttribute(attr, props[p]);\n    }\n  }\n\n  const {\n    children,\n    dangerouslySetInnerHTML\n  } = props;\n\n  if (dangerouslySetInnerHTML) {\n    el.innerHTML = dangerouslySetInnerHTML.__html || '';\n  } else if (children) {\n    el.textContent = typeof children === 'string' ? children : Array.isArray(children) ? children.join('') : '';\n  }\n\n  return el;\n}\n\nfunction isEqualNode(oldTag, newTag) {\n  if (oldTag instanceof HTMLElement && newTag instanceof HTMLElement) {\n    const nonce = newTag.getAttribute('nonce'); // Only strip the nonce if `oldTag` has had it stripped. An element's nonce attribute will not\n    // be stripped if there is no content security policy response header that includes a nonce.\n\n    if (nonce && !oldTag.getAttribute('nonce')) {\n      const cloneTag = newTag.cloneNode(true);\n      cloneTag.setAttribute('nonce', '');\n      cloneTag.nonce = nonce;\n      return nonce === oldTag.nonce && oldTag.isEqualNode(cloneTag);\n    }\n  }\n\n  return oldTag.isEqualNode(newTag);\n}\n\nfunction updateElements(type, components) {\n  const headEl = document.getElementsByTagName('head')[0];\n  const headCountEl = headEl.querySelector('meta[name=next-head-count]');\n\n  if (true) {\n    if (!headCountEl) {\n      console.error('Warning: next-head-count is missing. https://nextjs.org/docs/messages/next-head-count-missing');\n      return;\n    }\n  }\n\n  const headCount = Number(headCountEl.content);\n  const oldTags = [];\n\n  for (let i = 0, j = headCountEl.previousElementSibling; i < headCount; i++, j = (j === null || j === void 0 ? void 0 : j.previousElementSibling) || null) {\n    var ref;\n\n    if ((j === null || j === void 0 ? void 0 : (ref = j.tagName) === null || ref === void 0 ? void 0 : ref.toLowerCase()) === type) {\n      oldTags.push(j);\n    }\n  }\n\n  const newTags = components.map(reactElementToDOM).filter(newTag => {\n    for (let k = 0, len = oldTags.length; k < len; k++) {\n      const oldTag = oldTags[k];\n\n      if (isEqualNode(oldTag, newTag)) {\n        oldTags.splice(k, 1);\n        return false;\n      }\n    }\n\n    return true;\n  });\n  oldTags.forEach(t => {\n    var ref;\n    return (ref = t.parentNode) === null || ref === void 0 ? void 0 : ref.removeChild(t);\n  });\n  newTags.forEach(t => headEl.insertBefore(t, headCountEl));\n  headCountEl.content = (headCount - oldTags.length + newTags.length).toString();\n}\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/head-manager.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/request-idle-callback.js":
/*!************************************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/request-idle-callback.js ***!
  \************************************************************************************************************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.cancelIdleCallback = exports.requestIdleCallback = void 0;\n\nconst requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function (cb) {\n  let start = Date.now();\n  return setTimeout(function () {\n    cb({\n      didTimeout: false,\n      timeRemaining: function () {\n        return Math.max(0, 50 - (Date.now() - start));\n      }\n    });\n  }, 1);\n};\n\nexports.requestIdleCallback = requestIdleCallback;\n\nconst cancelIdleCallback = typeof self !== 'undefined' && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function (id) {\n  return clearTimeout(id);\n};\n\nexports.cancelIdleCallback = cancelIdleCallback;\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0FBQ3pDRyxFQUFBQSxLQUFLLEVBQUU7QUFEa0MsQ0FBN0M7QUFHQUQsMEJBQUEsR0FBNkJBLDJCQUFBLEdBQThCLEtBQUssQ0FBaEU7O0FBQ0EsTUFBTUcsbUJBQW1CLEdBQUcsT0FBT0MsSUFBUCxLQUFnQixXQUFoQixJQUErQkEsSUFBSSxDQUFDRCxtQkFBcEMsSUFBMkRDLElBQUksQ0FBQ0QsbUJBQUwsQ0FBeUJFLElBQXpCLENBQThCQyxNQUE5QixDQUEzRCxJQUFvRyxVQUFTQyxFQUFULEVBQWE7QUFDekksTUFBSUMsS0FBSyxHQUFHQyxJQUFJLENBQUNDLEdBQUwsRUFBWjtBQUNBLFNBQU9DLFVBQVUsQ0FBQyxZQUFXO0FBQ3pCSixJQUFBQSxFQUFFLENBQUM7QUFDQ0ssTUFBQUEsVUFBVSxFQUFFLEtBRGI7QUFFQ0MsTUFBQUEsYUFBYSxFQUFFLFlBQVc7QUFDdEIsZUFBT0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZLE1BQU1OLElBQUksQ0FBQ0MsR0FBTCxLQUFhRixLQUFuQixDQUFaLENBQVA7QUFDSDtBQUpGLEtBQUQsQ0FBRjtBQU1ILEdBUGdCLEVBT2QsQ0FQYyxDQUFqQjtBQVFILENBVkQ7O0FBV0FSLDJCQUFBLEdBQThCRyxtQkFBOUI7O0FBQ0EsTUFBTUQsa0JBQWtCLEdBQUcsT0FBT0UsSUFBUCxLQUFnQixXQUFoQixJQUErQkEsSUFBSSxDQUFDRixrQkFBcEMsSUFBMERFLElBQUksQ0FBQ0Ysa0JBQUwsQ0FBd0JHLElBQXhCLENBQTZCQyxNQUE3QixDQUExRCxJQUFrRyxVQUFTVSxFQUFULEVBQWE7QUFDdEksU0FBT0MsWUFBWSxDQUFDRCxFQUFELENBQW5CO0FBQ0gsQ0FGRDs7QUFHQWhCLDBCQUFBLEdBQTZCRSxrQkFBN0I7O0FBRUEsSUFBSSxPQUFPRixPQUFPLENBQUNrQixPQUFmLEtBQTJCLFVBQTNCLElBQTBDLE9BQU9sQixPQUFPLENBQUNrQixPQUFmLEtBQTJCLFFBQTNCLElBQXVDbEIsT0FBTyxDQUFDa0IsT0FBUixLQUFvQixJQUF6RyxFQUFnSDtBQUM5R3BCLEVBQUFBLE1BQU0sQ0FBQ3FCLE1BQVAsQ0FBY25CLE9BQU8sQ0FBQ2tCLE9BQXRCLEVBQStCbEIsT0FBL0I7QUFDQW9CLEVBQUFBLE1BQU0sQ0FBQ3BCLE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ2tCLE9BQXpCO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qaW1teWZsaXgvLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcz85NjhmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jYW5jZWxJZGxlQ2FsbGJhY2sgPSBleHBvcnRzLnJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB2b2lkIDA7XG5jb25zdCByZXF1ZXN0SWRsZUNhbGxiYWNrID0gdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjayAmJiBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2suYmluZCh3aW5kb3cpIHx8IGZ1bmN0aW9uKGNiKSB7XG4gICAgbGV0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgY2Ioe1xuICAgICAgICAgICAgZGlkVGltZW91dDogZmFsc2UsXG4gICAgICAgICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgNTAgLSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sIDEpO1xufTtcbmV4cG9ydHMucmVxdWVzdElkbGVDYWxsYmFjayA9IHJlcXVlc3RJZGxlQ2FsbGJhY2s7XG5jb25zdCBjYW5jZWxJZGxlQ2FsbGJhY2sgPSB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2sgJiYgc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2suYmluZCh3aW5kb3cpIHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgcmV0dXJuIGNsZWFyVGltZW91dChpZCk7XG59O1xuZXhwb3J0cy5jYW5jZWxJZGxlQ2FsbGJhY2sgPSBjYW5jZWxJZGxlQ2FsbGJhY2s7XG5cbmlmICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSB7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3QtaWRsZS1jYWxsYmFjay5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwic2VsZiIsImJpbmQiLCJ3aW5kb3ciLCJjYiIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsInNldFRpbWVvdXQiLCJkaWRUaW1lb3V0IiwidGltZVJlbWFpbmluZyIsIk1hdGgiLCJtYXgiLCJpZCIsImNsZWFyVGltZW91dCIsImRlZmF1bHQiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/request-idle-callback.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/script.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/script.js ***!
  \*********************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.initScriptLoader = initScriptLoader;\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\n\nvar _headManagerContext = __webpack_require__(/*! ../shared/lib/head-manager-context */ \"../shared/lib/head-manager-context\");\n\nvar _headManager = __webpack_require__(/*! ./head-manager */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/head-manager.js\");\n\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/request-idle-callback.js\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === \"function\") {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst ScriptCache = new Map();\nconst LoadCache = new Set();\nconst ignoreProps = ['onLoad', 'dangerouslySetInnerHTML', 'children', 'onError', 'strategy'];\n\nconst loadScript = props => {\n  const {\n    src,\n    id,\n    onLoad = () => {},\n    dangerouslySetInnerHTML,\n    children = '',\n    strategy = 'afterInteractive',\n    onError\n  } = props;\n  const cacheKey = id || src; // Script has already loaded\n\n  if (cacheKey && LoadCache.has(cacheKey)) {\n    return;\n  } // Contents of this script are already loading/loaded\n\n\n  if (ScriptCache.has(src)) {\n    LoadCache.add(cacheKey); // Execute onLoad since the script loading has begun\n\n    ScriptCache.get(src).then(onLoad, onError);\n    return;\n  }\n\n  const el = document.createElement('script');\n  const loadPromise = new Promise((resolve, reject) => {\n    el.addEventListener('load', function (e) {\n      resolve();\n\n      if (onLoad) {\n        onLoad.call(this, e);\n      }\n    });\n    el.addEventListener('error', function (e) {\n      reject(e);\n    });\n  }).catch(function (e) {\n    if (onError) {\n      onError(e);\n    }\n  });\n\n  if (src) {\n    ScriptCache.set(src, loadPromise);\n  }\n\n  LoadCache.add(cacheKey);\n\n  if (dangerouslySetInnerHTML) {\n    el.innerHTML = dangerouslySetInnerHTML.__html || '';\n  } else if (children) {\n    el.textContent = typeof children === 'string' ? children : Array.isArray(children) ? children.join('') : '';\n  } else if (src) {\n    el.src = src;\n  }\n\n  for (const [k, value] of Object.entries(props)) {\n    if (value === undefined || ignoreProps.includes(k)) {\n      continue;\n    }\n\n    const attr = _headManager.DOMAttributeNames[k] || k.toLowerCase();\n    el.setAttribute(attr, value);\n  }\n\n  if (strategy === 'worker') {\n    el.setAttribute('type', 'text/partytown');\n  }\n\n  el.setAttribute('data-nscript', strategy);\n  document.body.appendChild(el);\n};\n\nfunction handleClientScriptLoad(props) {\n  const {\n    strategy = 'afterInteractive'\n  } = props;\n\n  if (strategy === 'afterInteractive') {\n    loadScript(props);\n  } else if (strategy === 'lazyOnload') {\n    window.addEventListener('load', () => {\n      (0, _requestIdleCallback).requestIdleCallback(() => loadScript(props));\n    });\n  }\n}\n\nfunction loadLazyScript(props) {\n  if (document.readyState === 'complete') {\n    (0, _requestIdleCallback).requestIdleCallback(() => loadScript(props));\n  } else {\n    window.addEventListener('load', () => {\n      (0, _requestIdleCallback).requestIdleCallback(() => loadScript(props));\n    });\n  }\n}\n\nfunction initScriptLoader(scriptLoaderItems) {\n  scriptLoaderItems.forEach(handleClientScriptLoad);\n}\n\nfunction Script(props) {\n  const {\n    src = '',\n    onLoad = () => {},\n    dangerouslySetInnerHTML,\n    strategy = 'afterInteractive',\n    onError\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"src\", \"onLoad\", \"dangerouslySetInnerHTML\", \"strategy\", \"onError\"]); // Context is available only during SSR\n\n\n  const {\n    updateScripts,\n    scripts,\n    getIsSsr\n  } = (0, _react).useContext(_headManagerContext.HeadManagerContext);\n  (0, _react).useEffect(() => {\n    if (strategy === 'afterInteractive') {\n      loadScript(props);\n    } else if (strategy === 'lazyOnload') {\n      loadLazyScript(props);\n    }\n  }, [props, strategy]);\n\n  if (strategy === 'beforeInteractive' || strategy === 'worker') {\n    if (updateScripts) {\n      scripts[strategy] = (scripts[strategy] || []).concat([_objectSpread({\n        src,\n        onLoad,\n        onError\n      }, restProps)]);\n      updateScripts(scripts);\n    } else if (getIsSsr && getIsSsr()) {\n      // Script has already loaded during SSR\n      LoadCache.add(restProps.id || src);\n    } else if (getIsSsr && !getIsSsr()) {\n      loadScript(props);\n    }\n  }\n\n  return null;\n}\n\nvar _default = Script;\nexports[\"default\"] = _default;\n\nif (typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) {\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/script.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/pages/_document.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/pages/_document.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst _excluded = [\"strategy\"],\n      _excluded2 = [\"strategy\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Html = Html;\nexports.Main = Main;\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\n\nvar _constants = __webpack_require__(/*! ../shared/lib/constants */ \"../shared/lib/constants\");\n\nvar _getPageFiles = __webpack_require__(/*! ../server/get-page-files */ \"../server/get-page-files\");\n\nvar _utils = __webpack_require__(/*! ../server/utils */ \"../server/utils\");\n\nvar _htmlescape = __webpack_require__(/*! ../server/htmlescape */ \"../server/htmlescape\");\n\nvar _script = _interopRequireDefault(__webpack_require__(/*! ../client/script */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/client/script.js\"));\n\nvar _isError = _interopRequireDefault(__webpack_require__(/*! ../lib/is-error */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/is-error.js\"));\n\nvar _htmlContext = __webpack_require__(/*! ../shared/lib/html-context */ \"../shared/lib/html-context\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction getDocumentFiles(buildManifest, pathname, inAmpMode) {\n  const sharedFiles = (0, _getPageFiles).getPageFiles(buildManifest, '/_app');\n  const pageFiles = inAmpMode ? [] : (0, _getPageFiles).getPageFiles(buildManifest, pathname);\n  return {\n    sharedFiles,\n    pageFiles,\n    allFiles: [...new Set([...sharedFiles, ...pageFiles])]\n  };\n}\n\nfunction getPolyfillScripts(context, props) {\n  // polyfills.js has to be rendered as nomodule without async\n  // It also has to be the first script to load\n  const {\n    assetPrefix,\n    buildManifest,\n    devOnlyCacheBusterQueryString,\n    disableOptimizedLoading,\n    crossOrigin\n  } = context;\n  return buildManifest.polyfillFiles.filter(polyfill => polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')).map(polyfill => /*#__PURE__*/_react.default.createElement(\"script\", {\n    key: polyfill,\n    defer: !disableOptimizedLoading,\n    nonce: props.nonce,\n    crossOrigin: props.crossOrigin || crossOrigin,\n    noModule: true,\n    src: `${assetPrefix}/_next/${polyfill}${devOnlyCacheBusterQueryString}`\n  }));\n}\n\nfunction hasComponentProps(child) {\n  return !!child && !!child.props;\n}\n\nfunction getPreNextWorkerScripts(context, props) {\n  const {\n    assetPrefix,\n    scriptLoader,\n    crossOrigin,\n    nextScriptWorkers\n  } = context; // disable `nextScriptWorkers` in edge runtime\n\n  if (!nextScriptWorkers || false) return null;\n\n  try {\n    let {\n      partytownSnippet\n    } = require('@builder.io/partytown/integration');\n\n    const children = Array.isArray(props.children) ? props.children : [props.children]; // Check to see if the user has defined their own Partytown configuration\n\n    const userDefinedConfig = children.find(child => {\n      var ref, ref1;\n      return hasComponentProps(child) && (child === null || child === void 0 ? void 0 : (ref = child.props) === null || ref === void 0 ? void 0 : (ref1 = ref.dangerouslySetInnerHTML) === null || ref1 === void 0 ? void 0 : ref1.__html.length) && 'data-partytown-config' in child.props;\n    });\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !userDefinedConfig && /*#__PURE__*/_react.default.createElement(\"script\", {\n      \"data-partytown-config\": \"\",\n      dangerouslySetInnerHTML: {\n        __html: `\n            partytown = {\n              lib: \"${assetPrefix}/_next/static/~partytown/\"\n            };\n          `\n      }\n    }), /*#__PURE__*/_react.default.createElement(\"script\", {\n      \"data-partytown\": \"\",\n      dangerouslySetInnerHTML: {\n        __html: partytownSnippet()\n      }\n    }), (scriptLoader.worker || []).map((file, index) => {\n      const {\n        strategy\n      } = file,\n            scriptProps = _objectWithoutProperties(file, _excluded);\n\n      return /*#__PURE__*/_react.default.createElement(\"script\", Object.assign({}, scriptProps, {\n        type: \"text/partytown\",\n        key: scriptProps.src || index,\n        nonce: props.nonce,\n        \"data-nscript\": \"worker\",\n        crossOrigin: props.crossOrigin || crossOrigin\n      }));\n    }));\n  } catch (err) {\n    if ((0, _isError).default(err) && err.code !== 'MODULE_NOT_FOUND') {\n      console.warn(`Warning: Partytown could not be instantiated in your application due to an error. ${err.message}`);\n    }\n\n    return null;\n  }\n}\n\nfunction getPreNextScripts(context, props) {\n  const {\n    scriptLoader,\n    disableOptimizedLoading,\n    crossOrigin\n  } = context;\n  const webWorkerScripts = getPreNextWorkerScripts(context, props);\n  const beforeInteractiveScripts = (scriptLoader.beforeInteractive || []).map((file, index) => {\n    const {\n      strategy\n    } = file,\n          scriptProps = _objectWithoutProperties(file, _excluded2);\n\n    var _defer;\n\n    return /*#__PURE__*/_react.default.createElement(\"script\", Object.assign({}, scriptProps, {\n      key: scriptProps.src || index,\n      defer: (_defer = scriptProps.defer) !== null && _defer !== void 0 ? _defer : !disableOptimizedLoading,\n      nonce: props.nonce,\n      \"data-nscript\": \"beforeInteractive\",\n      crossOrigin: props.crossOrigin || crossOrigin\n    }));\n  });\n  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, webWorkerScripts, beforeInteractiveScripts);\n}\n\nfunction getDynamicChunks(context, props, files) {\n  const {\n    dynamicImports,\n    assetPrefix,\n    isDevelopment,\n    devOnlyCacheBusterQueryString,\n    disableOptimizedLoading,\n    crossOrigin\n  } = context;\n  return dynamicImports.map(file => {\n    if (!file.endsWith('.js') || files.allFiles.includes(file)) return null;\n    return /*#__PURE__*/_react.default.createElement(\"script\", {\n      async: !isDevelopment && disableOptimizedLoading,\n      defer: !disableOptimizedLoading,\n      key: file,\n      src: `${assetPrefix}/_next/${encodeURI(file)}${devOnlyCacheBusterQueryString}`,\n      nonce: props.nonce,\n      crossOrigin: props.crossOrigin || crossOrigin\n    });\n  });\n}\n\nfunction getScripts(context, props, files) {\n  var ref;\n  const {\n    assetPrefix,\n    buildManifest,\n    isDevelopment,\n    devOnlyCacheBusterQueryString,\n    disableOptimizedLoading,\n    crossOrigin\n  } = context;\n  const normalScripts = files.allFiles.filter(file => file.endsWith('.js'));\n  const lowPriorityScripts = (ref = buildManifest.lowPriorityFiles) === null || ref === void 0 ? void 0 : ref.filter(file => file.endsWith('.js'));\n  return [...normalScripts, ...lowPriorityScripts].map(file => {\n    return /*#__PURE__*/_react.default.createElement(\"script\", {\n      key: file,\n      src: `${assetPrefix}/_next/${encodeURI(file)}${devOnlyCacheBusterQueryString}`,\n      nonce: props.nonce,\n      async: !isDevelopment && disableOptimizedLoading,\n      defer: !disableOptimizedLoading,\n      crossOrigin: props.crossOrigin || crossOrigin\n    });\n  });\n}\n\nclass Document extends _react.Component {\n  /**\n  * `getInitialProps` hook returns the context object with the addition of `renderPage`.\n  * `renderPage` callback executes `React` rendering logic synchronously to support server-rendering wrappers\n  */\n  static getInitialProps(ctx) {\n    return ctx.defaultGetInitialProps(ctx);\n  }\n\n  render() {\n    return /*#__PURE__*/_react.default.createElement(Html, null, /*#__PURE__*/_react.default.createElement(Head, null), /*#__PURE__*/_react.default.createElement(\"body\", null, /*#__PURE__*/_react.default.createElement(Main, null), /*#__PURE__*/_react.default.createElement(NextScript, null)));\n  }\n\n}\n\nexports[\"default\"] = Document;\n\nDocument.__next_internal_document = function InternalFunctionDocument() {\n  return /*#__PURE__*/_react.default.createElement(Html, null, /*#__PURE__*/_react.default.createElement(Head, null), /*#__PURE__*/_react.default.createElement(\"body\", null, /*#__PURE__*/_react.default.createElement(Main, null), /*#__PURE__*/_react.default.createElement(NextScript, null)));\n};\n\nfunction Html(props) {\n  const {\n    inAmpMode,\n    docComponentsRendered,\n    locale\n  } = (0, _react).useContext(_htmlContext.HtmlContext);\n  docComponentsRendered.Html = true;\n  return /*#__PURE__*/_react.default.createElement(\"html\", Object.assign({}, props, {\n    lang: props.lang || locale || undefined,\n    amp: inAmpMode ? '' : undefined,\n    \"data-ampdevmode\": inAmpMode && true ? '' : undefined\n  }));\n}\n\nfunction AmpStyles({\n  styles\n}) {\n  if (!styles) return null; // try to parse styles from fragment for backwards compat\n\n  const curStyles = Array.isArray(styles) ? styles : [];\n\n  if ( // @ts-ignore Property 'props' does not exist on type ReactElement\n  styles.props && // @ts-ignore Property 'props' does not exist on type ReactElement\n  Array.isArray(styles.props.children)) {\n    const hasStyles = el => {\n      var ref, ref2;\n      return el === null || el === void 0 ? void 0 : (ref = el.props) === null || ref === void 0 ? void 0 : (ref2 = ref.dangerouslySetInnerHTML) === null || ref2 === void 0 ? void 0 : ref2.__html;\n    }; // @ts-ignore Property 'props' does not exist on type ReactElement\n\n\n    styles.props.children.forEach(child => {\n      if (Array.isArray(child)) {\n        child.forEach(el => hasStyles(el) && curStyles.push(el));\n      } else if (hasStyles(child)) {\n        curStyles.push(child);\n      }\n    });\n  }\n  /* Add custom styles before AMP styles to prevent accidental overrides */\n\n\n  return /*#__PURE__*/_react.default.createElement(\"style\", {\n    \"amp-custom\": \"\",\n    dangerouslySetInnerHTML: {\n      __html: curStyles.map(style => style.props.dangerouslySetInnerHTML.__html).join('').replace(/\\/\\*# sourceMappingURL=.*\\*\\//g, '').replace(/\\/\\*@ sourceURL=.*?\\*\\//g, '')\n    }\n  });\n}\n\nclass Head extends _react.Component {\n  getCssLinks(files) {\n    const {\n      assetPrefix,\n      devOnlyCacheBusterQueryString,\n      dynamicImports,\n      crossOrigin,\n      optimizeCss,\n      optimizeFonts\n    } = this.context;\n    const cssFiles = files.allFiles.filter(f => f.endsWith('.css'));\n    const sharedFiles = new Set(files.sharedFiles); // Unmanaged files are CSS files that will be handled directly by the\n    // webpack runtime (`mini-css-extract-plugin`).\n\n    let unmangedFiles = new Set([]);\n    let dynamicCssFiles = Array.from(new Set(dynamicImports.filter(file => file.endsWith('.css'))));\n\n    if (dynamicCssFiles.length) {\n      const existing = new Set(cssFiles);\n      dynamicCssFiles = dynamicCssFiles.filter(f => !(existing.has(f) || sharedFiles.has(f)));\n      unmangedFiles = new Set(dynamicCssFiles);\n      cssFiles.push(...dynamicCssFiles);\n    }\n\n    let cssLinkElements = [];\n    cssFiles.forEach(file => {\n      const isSharedFile = sharedFiles.has(file);\n\n      if (!optimizeCss) {\n        cssLinkElements.push( /*#__PURE__*/_react.default.createElement(\"link\", {\n          key: `${file}-preload`,\n          nonce: this.props.nonce,\n          rel: \"preload\",\n          href: `${assetPrefix}/_next/${encodeURI(file)}${devOnlyCacheBusterQueryString}`,\n          as: \"style\",\n          crossOrigin: this.props.crossOrigin || crossOrigin\n        }));\n      }\n\n      const isUnmanagedFile = unmangedFiles.has(file);\n      cssLinkElements.push( /*#__PURE__*/_react.default.createElement(\"link\", {\n        key: file,\n        nonce: this.props.nonce,\n        rel: \"stylesheet\",\n        href: `${assetPrefix}/_next/${encodeURI(file)}${devOnlyCacheBusterQueryString}`,\n        crossOrigin: this.props.crossOrigin || crossOrigin,\n        \"data-n-g\": isUnmanagedFile ? undefined : isSharedFile ? '' : undefined,\n        \"data-n-p\": isUnmanagedFile ? undefined : isSharedFile ? undefined : ''\n      }));\n    });\n\n    if (false) {}\n\n    return cssLinkElements.length === 0 ? null : cssLinkElements;\n  }\n\n  getPreloadDynamicChunks() {\n    const {\n      dynamicImports,\n      assetPrefix,\n      devOnlyCacheBusterQueryString,\n      crossOrigin\n    } = this.context;\n    return dynamicImports.map(file => {\n      if (!file.endsWith('.js')) {\n        return null;\n      }\n\n      return /*#__PURE__*/_react.default.createElement(\"link\", {\n        rel: \"preload\",\n        key: file,\n        href: `${assetPrefix}/_next/${encodeURI(file)}${devOnlyCacheBusterQueryString}`,\n        as: \"script\",\n        nonce: this.props.nonce,\n        crossOrigin: this.props.crossOrigin || crossOrigin\n      });\n    }) // Filter out nulled scripts\n    .filter(Boolean);\n  }\n\n  getPreloadMainLinks(files) {\n    const {\n      assetPrefix,\n      devOnlyCacheBusterQueryString,\n      scriptLoader,\n      crossOrigin\n    } = this.context;\n    const preloadFiles = files.allFiles.filter(file => {\n      return file.endsWith('.js');\n    });\n    return [...(scriptLoader.beforeInteractive || []).map(file => /*#__PURE__*/_react.default.createElement(\"link\", {\n      key: file.src,\n      nonce: this.props.nonce,\n      rel: \"preload\",\n      href: file.src,\n      as: \"script\",\n      crossOrigin: this.props.crossOrigin || crossOrigin\n    })), ...preloadFiles.map(file => /*#__PURE__*/_react.default.createElement(\"link\", {\n      key: file,\n      nonce: this.props.nonce,\n      rel: \"preload\",\n      href: `${assetPrefix}/_next/${encodeURI(file)}${devOnlyCacheBusterQueryString}`,\n      as: \"script\",\n      crossOrigin: this.props.crossOrigin || crossOrigin\n    }))];\n  }\n\n  getDynamicChunks(files) {\n    return getDynamicChunks(this.context, this.props, files);\n  }\n\n  getPreNextScripts() {\n    return getPreNextScripts(this.context, this.props);\n  }\n\n  getScripts(files) {\n    return getScripts(this.context, this.props, files);\n  }\n\n  getPolyfillScripts() {\n    return getPolyfillScripts(this.context, this.props);\n  }\n\n  handleDocumentScriptLoaderItems(children) {\n    const {\n      scriptLoader\n    } = this.context;\n    const scriptLoaderItems = [];\n    const filteredChildren = [];\n\n    _react.default.Children.forEach(children, child => {\n      if (child.type === _script.default) {\n        if (child.props.strategy === 'beforeInteractive') {\n          scriptLoader.beforeInteractive = (scriptLoader.beforeInteractive || []).concat([_objectSpread({}, child.props)]);\n          return;\n        } else if (['lazyOnload', 'afterInteractive', 'worker'].includes(child.props.strategy)) {\n          scriptLoaderItems.push(child.props);\n          return;\n        }\n      }\n\n      filteredChildren.push(child);\n    });\n\n    this.context.__NEXT_DATA__.scriptLoader = scriptLoaderItems;\n    return filteredChildren;\n  }\n\n  makeStylesheetInert(node) {\n    return _react.default.Children.map(node, c => {\n      var ref5, ref3;\n\n      if ((c === null || c === void 0 ? void 0 : c.type) === 'link' && (c === null || c === void 0 ? void 0 : (ref5 = c.props) === null || ref5 === void 0 ? void 0 : ref5.href) && _constants.OPTIMIZED_FONT_PROVIDERS.some(({\n        url\n      }) => {\n        var ref, ref4;\n        return c === null || c === void 0 ? void 0 : (ref = c.props) === null || ref === void 0 ? void 0 : (ref4 = ref.href) === null || ref4 === void 0 ? void 0 : ref4.startsWith(url);\n      })) {\n        const newProps = _objectSpread(_objectSpread({}, c.props || {}), {}, {\n          'data-href': c.props.href,\n          href: undefined\n        });\n\n        return /*#__PURE__*/_react.default.cloneElement(c, newProps);\n      } else if (c === null || c === void 0 ? void 0 : (ref3 = c.props) === null || ref3 === void 0 ? void 0 : ref3.children) {\n        const newProps = _objectSpread(_objectSpread({}, c.props || {}), {}, {\n          children: this.makeStylesheetInert(c.props.children)\n        });\n\n        return /*#__PURE__*/_react.default.cloneElement(c, newProps);\n      }\n\n      return c;\n    }).filter(Boolean);\n  }\n\n  render() {\n    const {\n      styles,\n      ampPath,\n      inAmpMode,\n      hybridAmp,\n      canonicalBase,\n      __NEXT_DATA__,\n      dangerousAsPath,\n      headTags,\n      unstable_runtimeJS,\n      unstable_JsPreload,\n      disableOptimizedLoading,\n      optimizeCss,\n      optimizeFonts\n    } = this.context;\n    const disableRuntimeJS = unstable_runtimeJS === false;\n    const disableJsPreload = unstable_JsPreload === false || !disableOptimizedLoading;\n    this.context.docComponentsRendered.Head = true;\n    let {\n      head\n    } = this.context;\n    let cssPreloads = [];\n    let otherHeadElements = [];\n\n    if (head) {\n      head.forEach(c => {\n        if (c && c.type === 'link' && c.props['rel'] === 'preload' && c.props['as'] === 'style') {\n          cssPreloads.push(c);\n        } else {\n          c && otherHeadElements.push(c);\n        }\n      });\n      head = cssPreloads.concat(otherHeadElements);\n    }\n\n    let children = _react.default.Children.toArray(this.props.children).filter(Boolean); // show a warning if Head contains <title> (only in development)\n\n\n    if (true) {\n      children = _react.default.Children.map(children, child => {\n        var ref;\n        const isReactHelmet = child === null || child === void 0 ? void 0 : (ref = child.props) === null || ref === void 0 ? void 0 : ref['data-react-helmet'];\n\n        if (!isReactHelmet) {\n          var ref6;\n\n          if ((child === null || child === void 0 ? void 0 : child.type) === 'title') {\n            console.warn(\"Warning: <title> should not be used in _document.js's <Head>. https://nextjs.org/docs/messages/no-document-title\");\n          } else if ((child === null || child === void 0 ? void 0 : child.type) === 'meta' && (child === null || child === void 0 ? void 0 : (ref6 = child.props) === null || ref6 === void 0 ? void 0 : ref6.name) === 'viewport') {\n            console.warn(\"Warning: viewport meta tags should not be used in _document.js's <Head>. https://nextjs.org/docs/messages/no-document-viewport-meta\");\n          }\n        }\n\n        return child;\n      });\n      if (this.props.crossOrigin) console.warn('Warning: `Head` attribute `crossOrigin` is deprecated. https://nextjs.org/docs/messages/doc-crossorigin-deprecated');\n    }\n\n    if (false) {}\n\n    children = this.handleDocumentScriptLoaderItems(children);\n    let hasAmphtmlRel = false;\n    let hasCanonicalRel = false; // show warning and remove conflicting amp head tags\n\n    head = _react.default.Children.map(head || [], child => {\n      if (!child) return child;\n      const {\n        type,\n        props\n      } = child;\n\n      if (inAmpMode) {\n        let badProp = '';\n\n        if (type === 'meta' && props.name === 'viewport') {\n          badProp = 'name=\"viewport\"';\n        } else if (type === 'link' && props.rel === 'canonical') {\n          hasCanonicalRel = true;\n        } else if (type === 'script') {\n          // only block if\n          // 1. it has a src and isn't pointing to ampproject's CDN\n          // 2. it is using dangerouslySetInnerHTML without a type or\n          // a type of text/javascript\n          if (props.src && props.src.indexOf('ampproject') < -1 || props.dangerouslySetInnerHTML && (!props.type || props.type === 'text/javascript')) {\n            badProp = '<script';\n            Object.keys(props).forEach(prop => {\n              badProp += ` ${prop}=\"${props[prop]}\"`;\n            });\n            badProp += '/>';\n          }\n        }\n\n        if (badProp) {\n          console.warn(`Found conflicting amp tag \"${child.type}\" with conflicting prop ${badProp} in ${__NEXT_DATA__.page}. https://nextjs.org/docs/messages/conflicting-amp-tag`);\n          return null;\n        }\n      } else {\n        // non-amp mode\n        if (type === 'link' && props.rel === 'amphtml') {\n          hasAmphtmlRel = true;\n        }\n      }\n\n      return child;\n    });\n    const files = getDocumentFiles(this.context.buildManifest, this.context.__NEXT_DATA__.page, inAmpMode);\n\n    var _nonce, _nonce1;\n\n    return /*#__PURE__*/_react.default.createElement(\"head\", Object.assign({}, this.props), this.context.isDevelopment && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(\"style\", {\n      \"data-next-hide-fouc\": true,\n      \"data-ampdevmode\": inAmpMode ? 'true' : undefined,\n      dangerouslySetInnerHTML: {\n        __html: `body{display:none}`\n      }\n    }), /*#__PURE__*/_react.default.createElement(\"noscript\", {\n      \"data-next-hide-fouc\": true,\n      \"data-ampdevmode\": inAmpMode ? 'true' : undefined\n    }, /*#__PURE__*/_react.default.createElement(\"style\", {\n      dangerouslySetInnerHTML: {\n        __html: `body{display:block}`\n      }\n    }))), head, /*#__PURE__*/_react.default.createElement(\"meta\", {\n      name: \"next-head-count\",\n      content: _react.default.Children.count(head || []).toString()\n    }), children, optimizeFonts && /*#__PURE__*/_react.default.createElement(\"meta\", {\n      name: \"next-font-preconnect\"\n    }), inAmpMode && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width,minimum-scale=1,initial-scale=1\"\n    }), !hasCanonicalRel && /*#__PURE__*/_react.default.createElement(\"link\", {\n      rel: \"canonical\",\n      href: canonicalBase + (0, _utils).cleanAmpPath(dangerousAsPath)\n    }), /*#__PURE__*/_react.default.createElement(\"link\", {\n      rel: \"preload\",\n      as: \"script\",\n      href: \"https://cdn.ampproject.org/v0.js\"\n    }), /*#__PURE__*/_react.default.createElement(AmpStyles, {\n      styles: styles\n    }), /*#__PURE__*/_react.default.createElement(\"style\", {\n      \"amp-boilerplate\": \"\",\n      dangerouslySetInnerHTML: {\n        __html: `body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}`\n      }\n    }), /*#__PURE__*/_react.default.createElement(\"noscript\", null, /*#__PURE__*/_react.default.createElement(\"style\", {\n      \"amp-boilerplate\": \"\",\n      dangerouslySetInnerHTML: {\n        __html: `body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}`\n      }\n    })), /*#__PURE__*/_react.default.createElement(\"script\", {\n      async: true,\n      src: \"https://cdn.ampproject.org/v0.js\"\n    })), !inAmpMode && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !hasAmphtmlRel && hybridAmp && /*#__PURE__*/_react.default.createElement(\"link\", {\n      rel: \"amphtml\",\n      href: canonicalBase + getAmpPath(ampPath, dangerousAsPath)\n    }), !optimizeCss && this.getCssLinks(files), !optimizeCss && /*#__PURE__*/_react.default.createElement(\"noscript\", {\n      \"data-n-css\": (_nonce = this.props.nonce) !== null && _nonce !== void 0 ? _nonce : ''\n    }), !disableRuntimeJS && !disableJsPreload && this.getPreloadDynamicChunks(), !disableRuntimeJS && !disableJsPreload && this.getPreloadMainLinks(files), !disableOptimizedLoading && !disableRuntimeJS && this.getPolyfillScripts(), !disableOptimizedLoading && !disableRuntimeJS && this.getPreNextScripts(), !disableOptimizedLoading && !disableRuntimeJS && this.getDynamicChunks(files), !disableOptimizedLoading && !disableRuntimeJS && this.getScripts(files), optimizeCss && this.getCssLinks(files), optimizeCss && /*#__PURE__*/_react.default.createElement(\"noscript\", {\n      \"data-n-css\": (_nonce1 = this.props.nonce) !== null && _nonce1 !== void 0 ? _nonce1 : ''\n    }), this.context.isDevelopment && // this element is used to mount development styles so the\n    // ordering matches production\n    // (by default, style-loader injects at the bottom of <head />)\n\n    /*#__PURE__*/\n    _react.default.createElement(\"noscript\", {\n      id: \"__next_css__DO_NOT_USE__\"\n    }), styles || null), /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {}, ...(headTags || [])));\n  }\n\n}\n\nexports.Head = Head;\nHead.contextType = _htmlContext.HtmlContext;\n\nfunction Main() {\n  const {\n    docComponentsRendered\n  } = (0, _react).useContext(_htmlContext.HtmlContext);\n  docComponentsRendered.Main = true; // @ts-ignore\n\n  return /*#__PURE__*/_react.default.createElement(\"next-js-internal-body-render-target\", null);\n}\n\nclass NextScript extends _react.Component {\n  getDynamicChunks(files) {\n    return getDynamicChunks(this.context, this.props, files);\n  }\n\n  getPreNextScripts() {\n    return getPreNextScripts(this.context, this.props);\n  }\n\n  getScripts(files) {\n    return getScripts(this.context, this.props, files);\n  }\n\n  getPolyfillScripts() {\n    return getPolyfillScripts(this.context, this.props);\n  }\n\n  static getInlineScriptSource(context) {\n    const {\n      __NEXT_DATA__\n    } = context;\n\n    try {\n      const data = JSON.stringify(__NEXT_DATA__);\n\n      if (true) {\n        const bytes = Buffer.from(data).byteLength;\n\n        const prettyBytes = (__webpack_require__(/*! ../lib/pretty-bytes */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/pretty-bytes.js\")[\"default\"]);\n\n        if (bytes > 128 * 1000) {\n          console.warn(`Warning: data for page \"${__NEXT_DATA__.page}\" is ${prettyBytes(bytes)}, this amount of data can reduce performance.\\nSee more info here: https://nextjs.org/docs/messages/large-page-data`);\n        }\n      }\n\n      return (0, _htmlescape).htmlEscapeJsonString(data);\n    } catch (err) {\n      if ((0, _isError).default(err) && err.message.indexOf('circular structure') !== -1) {\n        throw new Error(`Circular structure in \"getInitialProps\" result of page \"${__NEXT_DATA__.page}\". https://nextjs.org/docs/messages/circular-structure`);\n      }\n\n      throw err;\n    }\n  }\n\n  render() {\n    const {\n      assetPrefix,\n      inAmpMode,\n      buildManifest,\n      unstable_runtimeJS,\n      docComponentsRendered,\n      devOnlyCacheBusterQueryString,\n      disableOptimizedLoading,\n      crossOrigin\n    } = this.context;\n    const disableRuntimeJS = unstable_runtimeJS === false;\n    docComponentsRendered.NextScript = true;\n\n    if (inAmpMode) {\n      if (false) {}\n\n      const ampDevFiles = [...buildManifest.devFiles, ...buildManifest.polyfillFiles, ...buildManifest.ampDevFiles];\n      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, disableRuntimeJS ? null : /*#__PURE__*/_react.default.createElement(\"script\", {\n        id: \"__NEXT_DATA__\",\n        type: \"application/json\",\n        nonce: this.props.nonce,\n        crossOrigin: this.props.crossOrigin || crossOrigin,\n        dangerouslySetInnerHTML: {\n          __html: NextScript.getInlineScriptSource(this.context)\n        },\n        \"data-ampdevmode\": true\n      }), ampDevFiles.map(file => /*#__PURE__*/_react.default.createElement(\"script\", {\n        key: file,\n        src: `${assetPrefix}/_next/${file}${devOnlyCacheBusterQueryString}`,\n        nonce: this.props.nonce,\n        crossOrigin: this.props.crossOrigin || crossOrigin,\n        \"data-ampdevmode\": true\n      })));\n    }\n\n    if (true) {\n      if (this.props.crossOrigin) console.warn('Warning: `NextScript` attribute `crossOrigin` is deprecated. https://nextjs.org/docs/messages/doc-crossorigin-deprecated');\n    }\n\n    const files = getDocumentFiles(this.context.buildManifest, this.context.__NEXT_DATA__.page, inAmpMode);\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !disableRuntimeJS && buildManifest.devFiles ? buildManifest.devFiles.map(file => /*#__PURE__*/_react.default.createElement(\"script\", {\n      key: file,\n      src: `${assetPrefix}/_next/${encodeURI(file)}${devOnlyCacheBusterQueryString}`,\n      nonce: this.props.nonce,\n      crossOrigin: this.props.crossOrigin || crossOrigin\n    })) : null, disableRuntimeJS ? null : /*#__PURE__*/_react.default.createElement(\"script\", {\n      id: \"__NEXT_DATA__\",\n      type: \"application/json\",\n      nonce: this.props.nonce,\n      crossOrigin: this.props.crossOrigin || crossOrigin,\n      dangerouslySetInnerHTML: {\n        __html: NextScript.getInlineScriptSource(this.context)\n      }\n    }), disableOptimizedLoading && !disableRuntimeJS && this.getPolyfillScripts(), disableOptimizedLoading && !disableRuntimeJS && this.getPreNextScripts(), disableOptimizedLoading && !disableRuntimeJS && this.getDynamicChunks(files), disableOptimizedLoading && !disableRuntimeJS && this.getScripts(files));\n  }\n\n}\n\nexports.NextScript = NextScript;\nNextScript.contextType = _htmlContext.HtmlContext;\nNextScript.safariNomoduleFix = '!function(){var e=document,t=e.createElement(\"script\");if(!(\"noModule\"in t)&&\"onbeforeload\"in t){var n=!1;e.addEventListener(\"beforeload\",function(e){if(e.target===t)n=!0;else if(!e.target.hasAttribute(\"nomodule\")||!n)return;e.preventDefault()},!0),t.type=\"module\",t.src=\".\",e.head.appendChild(t),t.remove()}}();';\n\nfunction getAmpPath(ampPath, asPath) {\n  return ampPath || `${asPath}${asPath.includes('?') ? '&' : '?'}amp=1`;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvcGFnZXMvX2RvY3VtZW50LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOzs7Ozs7Ozs7Ozs7Ozs7QUFDYkEsOENBQTZDO0FBQ3pDRyxFQUFBQSxLQUFLLEVBQUU7QUFEa0MsQ0FBN0M7QUFHQUQsWUFBQSxHQUFlRSxJQUFmO0FBQ0FGLFlBQUEsR0FBZUcsSUFBZjtBQUNBSCxrQkFBQSxHQUFrQixLQUFLLENBQXZCOztBQUNBLElBQUlLLE1BQU0sR0FBR0MsdUJBQXVCLENBQUNDLG1CQUFPLENBQUMsb0JBQUQsQ0FBUixDQUFwQzs7QUFDQSxJQUFJQyxVQUFVLEdBQUdELG1CQUFPLENBQUMsd0RBQUQsQ0FBeEI7O0FBQ0EsSUFBSUUsYUFBYSxHQUFHRixtQkFBTyxDQUFDLDBEQUFELENBQTNCOztBQUNBLElBQUlHLE1BQU0sR0FBR0gsbUJBQU8sQ0FBQyx3Q0FBRCxDQUFwQjs7QUFDQSxJQUFJSSxXQUFXLEdBQUdKLG1CQUFPLENBQUMsa0RBQUQsQ0FBekI7O0FBQ0EsSUFBSUssT0FBTyxHQUFHQyxzQkFBc0IsQ0FBQ04sbUJBQU8sQ0FBQywrSkFBRCxDQUFSLENBQXBDOztBQUNBLElBQUlPLFFBQVEsR0FBR0Qsc0JBQXNCLENBQUNOLG1CQUFPLENBQUMsNkpBQUQsQ0FBUixDQUFyQzs7QUFDQSxJQUFJUSxZQUFZLEdBQUdSLG1CQUFPLENBQUMsOERBQUQsQ0FBMUI7O0FBQ0EsU0FBU00sc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDO0FBQ2pDLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUNqQ1osSUFBQUEsT0FBTyxFQUFFWTtBQUR3QixHQUFyQztBQUdIOztBQUNELFNBQVNWLHVCQUFULENBQWlDVSxHQUFq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QUFzQkMsS0FBdEIsQ0FkcEwsRUFja05oRCx1QkFBdUIsSUFBSSxDQUFDbUksZ0JBQTVCLElBQWdELEtBQUs3RSxVQUFMLENBQWdCTixLQUFoQixDQWRsUSxDQUFyQjtBQWVIOztBQWxGcUM7O0FBb0YxQ3pGLGtCQUFBLEdBQXFCMEcsVUFBckI7QUFDQUEsVUFBVSxDQUFDMEYsV0FBWCxHQUF5QnJMLFlBQVksQ0FBQ2lHLFdBQXRDO0FBQ0FOLFVBQVUsQ0FBQ3VHLGlCQUFYLEdBQStCLDBUQUEvQjs7QUFDQSxTQUFTZixVQUFULENBQW9CN0IsT0FBcEIsRUFBNkI2QyxNQUE3QixFQUFxQztBQUNqQyxTQUFPN0MsT0FBTyxJQUFLLEdBQUU2QyxNQUFPLEdBQUVBLE1BQU0sQ0FBQ3RILFFBQVAsQ0FBZ0IsR0FBaEIsSUFBdUIsR0FBdkIsR0FBNkIsR0FBSSxPQUEvRDtBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamltbXlmbGl4Ly4vLnlhcm4vX192aXJ0dWFsX18vbmV4dC12aXJ0dWFsLThiNjBmNTQzYTYvMC9jYWNoZS9uZXh0LW5wbS0xMi4xLjUtYWQxMjI5MTMwMC1hNzBlNzBmNzg2LnppcC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3BhZ2VzL19kb2N1bWVudC5qcz8xODhiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5IdG1sID0gSHRtbDtcbmV4cG9ydHMuTWFpbiA9IE1haW47XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvY29uc3RhbnRzXCIpO1xudmFyIF9nZXRQYWdlRmlsZXMgPSByZXF1aXJlKFwiLi4vc2VydmVyL2dldC1wYWdlLWZpbGVzXCIpO1xudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi9zZXJ2ZXIvdXRpbHNcIik7XG52YXIgX2h0bWxlc2NhcGUgPSByZXF1aXJlKFwiLi4vc2VydmVyL2h0bWxlc2NhcGVcIik7XG52YXIgX3NjcmlwdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NsaWVudC9zY3JpcHRcIikpO1xudmFyIF9pc0Vycm9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbGliL2lzLWVycm9yXCIpKTtcbnZhciBfaHRtbENvbnRleHQgPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9odG1sLWNvbnRleHRcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG59XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHtcbiAgICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5ld09iaiA9IHt9O1xuICAgICAgICBpZiAob2JqICE9IG51bGwpIHtcbiAgICAgICAgICAgIGZvcih2YXIga2V5IGluIG9iail7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7XG4gICAgICAgIHJldHVybiBuZXdPYmo7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0RG9jdW1lbnRGaWxlcyhidWlsZE1hbmlmZXN0LCBwYXRobmFtZSwgaW5BbXBNb2RlKSB7XG4gICAgY29uc3Qgc2hhcmVkRmlsZXMgPSAoMCwgX2dldFBhZ2VGaWxlcykuZ2V0UGFnZUZpbGVzKGJ1aWxkTWFuaWZlc3QsICcvX2FwcCcpO1xuICAgIGNvbnN0IHBhZ2VGaWxlcyA9IGluQW1wTW9kZSA/IFtdIDogKDAsIF9nZXRQYWdlRmlsZXMpLmdldFBhZ2VGaWxlcyhidWlsZE1hbmlmZXN0LCBwYXRobmFtZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2hhcmVkRmlsZXMsXG4gICAgICAgIHBhZ2VGaWxlcyxcbiAgICAgICAgYWxsRmlsZXM6IFtcbiAgICAgICAgICAgIC4uLm5ldyBTZXQoW1xuICAgICAgICAgICAgICAgIC4uLnNoYXJlZEZpbGVzLFxuICAgICAgICAgICAgICAgIC4uLnBhZ2VGaWxlc1xuICAgICAgICAgICAgXSlcbiAgICAgICAgXVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRQb2x5ZmlsbFNjcmlwdHMoY29udGV4dCwgcHJvcHMpIHtcbiAgICAvLyBwb2x5ZmlsbHMuanMgaGFzIHRvIGJlIHJlbmRlcmVkIGFzIG5vbW9kdWxlIHdpdGhvdXQgYXN5bmNcbiAgICAvLyBJdCBhbHNvIGhhcyB0byBiZSB0aGUgZmlyc3Qgc2NyaXB0IHRvIGxvYWRcbiAgICBjb25zdCB7IGFzc2V0UHJlZml4ICwgYnVpbGRNYW5pZmVzdCAsIGRldk9ubHlDYWNoZUJ1c3RlclF1ZXJ5U3RyaW5nICwgZGlzYWJsZU9wdGltaXplZExvYWRpbmcgLCBjcm9zc09yaWdpbiAsICB9ID0gY29udGV4dDtcbiAgICByZXR1cm4gYnVpbGRNYW5pZmVzdC5wb2x5ZmlsbEZpbGVzLmZpbHRlcigocG9seWZpbGwpPT5wb2x5ZmlsbC5lbmRzV2l0aCgnLmpzJykgJiYgIXBvbHlmaWxsLmVuZHNXaXRoKCcubW9kdWxlLmpzJylcbiAgICApLm1hcCgocG9seWZpbGwpPT4vKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiwge1xuICAgICAgICAgICAga2V5OiBwb2x5ZmlsbCxcbiAgICAgICAgICAgIGRlZmVyOiAhZGlzYWJsZU9wdGltaXplZExvYWRpbmcsXG4gICAgICAgICAgICBub25jZTogcHJvcHMubm9uY2UsXG4gICAgICAgICAgICBjcm9zc09yaWdpbjogcHJvcHMuY3Jvc3NPcmlnaW4gfHwgY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgICBub01vZHVsZTogdHJ1ZSxcbiAgICAgICAgICAgIHNyYzogYCR7YXNzZXRQcmVmaXh9L19uZXh0LyR7cG9seWZpbGx9JHtkZXZPbmx5Q2FjaGVCdXN0ZXJRdWVyeVN0cmluZ31gXG4gICAgICAgIH0pXG4gICAgKTtcbn1cbmZ1bmN0aW9uIGhhc0NvbXBvbmVudFByb3BzKGNoaWxkKSB7XG4gICAgcmV0dXJuICEhY2hpbGQgJiYgISFjaGlsZC5wcm9wcztcbn1cbmZ1bmN0aW9uIGdldFByZU5leHRXb3JrZXJTY3JpcHRzKGNvbnRleHQsIHByb3BzKSB7XG4gICAgY29uc3QgeyBhc3NldFByZWZpeCAsIHNjcmlwdExvYWRlciAsIGNyb3NzT3JpZ2luICwgbmV4dFNjcmlwdFdvcmtlcnMgIH0gPSBjb250ZXh0O1xuICAgIC8vIGRpc2FibGUgYG5leHRTY3JpcHRXb3JrZXJzYCBpbiBlZGdlIHJ1bnRpbWVcbiAgICBpZiAoIW5leHRTY3JpcHRXb3JrZXJzIHx8IHByb2Nlc3MuYnJvd3NlcikgcmV0dXJuIG51bGw7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IHsgcGFydHl0b3duU25pcHBldCAgfSA9IF9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fKCdAYnVpbGRlci5pby9wYXJ0eXRvd24vaW50ZWdyYXRpb24nKTtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBBcnJheS5pc0FycmF5KHByb3BzLmNoaWxkcmVuKSA/IHByb3BzLmNoaWxkcmVuIDogW1xuICAgICAgICAgICAgcHJvcHMuY2hpbGRyZW5cbiAgICAgICAgXTtcbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSB1c2VyIGhhcyBkZWZpbmVkIHRoZWlyIG93biBQYXJ0eXRvd24gY29uZmlndXJhdGlvblxuICAgICAgICBjb25zdCB1c2VyRGVmaW5lZENvbmZpZyA9IGNoaWxkcmVuLmZpbmQoKGNoaWxkKT0+e1xuICAgICAgICAgICAgdmFyIHJlZiwgcmVmMTtcbiAgICAgICAgICAgIHJldHVybiBoYXNDb21wb25lbnRQcm9wcyhjaGlsZCkgJiYgKGNoaWxkID09PSBudWxsIHx8IGNoaWxkID09PSB2b2lkIDAgPyB2b2lkIDAgOiAocmVmID0gY2hpbGQucHJvcHMpID09PSBudWxsIHx8IHJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKHJlZjEgPSByZWYuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpID09PSBudWxsIHx8IHJlZjEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZjEuX19odG1sLmxlbmd0aCkgJiYgJ2RhdGEtcGFydHl0b3duLWNvbmZpZycgaW4gY2hpbGQucHJvcHM7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4oLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCAhdXNlckRlZmluZWRDb25maWcgJiYgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIsIHtcbiAgICAgICAgICAgIFwiZGF0YS1wYXJ0eXRvd24tY29uZmlnXCI6IFwiXCIsXG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgICAgICAgICAgIF9faHRtbDogYFxuICAgICAgICAgICAgcGFydHl0b3duID0ge1xuICAgICAgICAgICAgICBsaWI6IFwiJHthc3NldFByZWZpeH0vX25leHQvc3RhdGljL35wYXJ0eXRvd24vXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgYFxuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIsIHtcbiAgICAgICAgICAgIFwiZGF0YS1wYXJ0eXRvd25cIjogXCJcIixcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICAgICAgICAgICAgX19odG1sOiBwYXJ0eXRvd25TbmlwcGV0KClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIChzY3JpcHRMb2FkZXIud29ya2VyIHx8IFtdKS5tYXAoKGZpbGUsIGluZGV4KT0+e1xuICAgICAgICAgICAgY29uc3QgeyBzdHJhdGVneSAsIC4uLnNjcmlwdFByb3BzIH0gPSBmaWxlO1xuICAgICAgICAgICAgcmV0dXJuKC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiLCBPYmplY3QuYXNzaWduKHt9LCBzY3JpcHRQcm9wcywge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dC9wYXJ0eXRvd25cIixcbiAgICAgICAgICAgICAgICBrZXk6IHNjcmlwdFByb3BzLnNyYyB8fCBpbmRleCxcbiAgICAgICAgICAgICAgICBub25jZTogcHJvcHMubm9uY2UsXG4gICAgICAgICAgICAgICAgXCJkYXRhLW5zY3JpcHRcIjogXCJ3b3JrZXJcIixcbiAgICAgICAgICAgICAgICBjcm9zc09yaWdpbjogcHJvcHMuY3Jvc3NPcmlnaW4gfHwgY3Jvc3NPcmlnaW5cbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH0pKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmICgoMCwgX2lzRXJyb3IpLmRlZmF1bHQoZXJyKSAmJiBlcnIuY29kZSAhPT0gJ01PRFVMRV9OT1RfRk9VTkQnKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFdhcm5pbmc6IFBhcnR5dG93biBjb3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGluIHlvdXIgYXBwbGljYXRpb24gZHVlIHRvIGFuIGVycm9yLiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFByZU5leHRTY3JpcHRzKGNvbnRleHQsIHByb3BzKSB7XG4gICAgY29uc3QgeyBzY3JpcHRMb2FkZXIgLCBkaXNhYmxlT3B0aW1pemVkTG9hZGluZyAsIGNyb3NzT3JpZ2luICB9ID0gY29udGV4dDtcbiAgICBjb25zdCB3ZWJXb3JrZXJTY3JpcHRzID0gZ2V0UHJlTmV4dFdvcmtlclNjcmlwdHMoY29udGV4dCwgcHJvcHMpO1xuICAgIGNvbnN0IGJlZm9yZUludGVyYWN0aXZlU2NyaXB0cyA9IChzY3JpcHRMb2FkZXIuYmVmb3JlSW50ZXJhY3RpdmUgfHwgW10pLm1hcCgoZmlsZSwgaW5kZXgpPT57XG4gICAgICAgIGNvbnN0IHsgc3RyYXRlZ3kgLCAuLi5zY3JpcHRQcm9wcyB9ID0gZmlsZTtcbiAgICAgICAgdmFyIF9kZWZlcjtcbiAgICAgICAgcmV0dXJuKC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiLCBPYmplY3QuYXNzaWduKHt9LCBzY3JpcHRQcm9wcywge1xuICAgICAgICAgICAga2V5OiBzY3JpcHRQcm9wcy5zcmMgfHwgaW5kZXgsXG4gICAgICAgICAgICBkZWZlcjogKF9kZWZlciA9IHNjcmlwdFByb3BzLmRlZmVyKSAhPT0gbnVsbCAmJiBfZGVmZXIgIT09IHZvaWQgMCA/IF9kZWZlciA6ICFkaXNhYmxlT3B0aW1pemVkTG9hZGluZyxcbiAgICAgICAgICAgIG5vbmNlOiBwcm9wcy5ub25jZSxcbiAgICAgICAgICAgIFwiZGF0YS1uc2NyaXB0XCI6IFwiYmVmb3JlSW50ZXJhY3RpdmVcIixcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luOiBwcm9wcy5jcm9zc09yaWdpbiB8fCBjcm9zc09yaWdpblxuICAgICAgICB9KSkpO1xuICAgIH0pO1xuICAgIHJldHVybigvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIHdlYldvcmtlclNjcmlwdHMsIGJlZm9yZUludGVyYWN0aXZlU2NyaXB0cykpO1xufVxuZnVuY3Rpb24gZ2V0RHluYW1pY0NodW5rcyhjb250ZXh0LCBwcm9wcywgZmlsZXMpIHtcbiAgICBjb25zdCB7IGR5bmFtaWNJbXBvcnRzICwgYXNzZXRQcmVmaXggLCBpc0RldmVsb3BtZW50ICwgZGV2T25seUNhY2hlQnVzdGVyUXVlcnlTdHJpbmcgLCBkaXNhYmxlT3B0aW1pemVkTG9hZGluZyAsIGNyb3NzT3JpZ2luICwgIH0gPSBjb250ZXh0O1xuICAgIHJldHVybiBkeW5hbWljSW1wb3J0cy5tYXAoKGZpbGUpPT57XG4gICAgICAgIGlmICghZmlsZS5lbmRzV2l0aCgnLmpzJykgfHwgZmlsZXMuYWxsRmlsZXMuaW5jbHVkZXMoZmlsZSkpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4oLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIsIHtcbiAgICAgICAgICAgIGFzeW5jOiAhaXNEZXZlbG9wbWVudCAmJiBkaXNhYmxlT3B0aW1pemVkTG9hZGluZyxcbiAgICAgICAgICAgIGRlZmVyOiAhZGlzYWJsZU9wdGltaXplZExvYWRpbmcsXG4gICAgICAgICAgICBrZXk6IGZpbGUsXG4gICAgICAgICAgICBzcmM6IGAke2Fzc2V0UHJlZml4fS9fbmV4dC8ke2VuY29kZVVSSShmaWxlKX0ke2Rldk9ubHlDYWNoZUJ1c3RlclF1ZXJ5U3RyaW5nfWAsXG4gICAgICAgICAgICBub25jZTogcHJvcHMubm9uY2UsXG4gICAgICAgICAgICBjcm9zc09yaWdpbjogcHJvcHMuY3Jvc3NPcmlnaW4gfHwgY3Jvc3NPcmlnaW5cbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0U2NyaXB0cyhjb250ZXh0LCBwcm9wcywgZmlsZXMpIHtcbiAgICB2YXIgcmVmO1xuICAgIGNvbnN0IHsgYXNzZXRQcmVmaXggLCBidWlsZE1hbmlmZXN0ICwgaXNEZXZlbG9wbWVudCAsIGRldk9ubHlDYWNoZUJ1c3RlclF1ZXJ5U3RyaW5nICwgZGlzYWJsZU9wdGltaXplZExvYWRpbmcgLCBjcm9zc09yaWdpbiAsICB9ID0gY29udGV4dDtcbiAgICBjb25zdCBub3JtYWxTY3JpcHRzID0gZmlsZXMuYWxsRmlsZXMuZmlsdGVyKChmaWxlKT0+ZmlsZS5lbmRzV2l0aCgnLmpzJylcbiAgICApO1xuICAgIGNvbnN0IGxvd1ByaW9yaXR5U2NyaXB0cyA9IChyZWYgPSBidWlsZE1hbmlmZXN0Lmxvd1ByaW9yaXR5RmlsZXMpID09PSBudWxsIHx8IHJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVmLmZpbHRlcigoZmlsZSk9PmZpbGUuZW5kc1dpdGgoJy5qcycpXG4gICAgKTtcbiAgICByZXR1cm4gW1xuICAgICAgICAuLi5ub3JtYWxTY3JpcHRzLFxuICAgICAgICAuLi5sb3dQcmlvcml0eVNjcmlwdHNcbiAgICBdLm1hcCgoZmlsZSk9PntcbiAgICAgICAgcmV0dXJuKC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiLCB7XG4gICAgICAgICAgICBrZXk6IGZpbGUsXG4gICAgICAgICAgICBzcmM6IGAke2Fzc2V0UHJlZml4fS9fbmV4dC8ke2VuY29kZVVSSShmaWxlKX0ke2Rldk9ubHlDYWNoZUJ1c3RlclF1ZXJ5U3RyaW5nfWAsXG4gICAgICAgICAgICBub25jZTogcHJvcHMubm9uY2UsXG4gICAgICAgICAgICBhc3luYzogIWlzRGV2ZWxvcG1lbnQgJiYgZGlzYWJsZU9wdGltaXplZExvYWRpbmcsXG4gICAgICAgICAgICBkZWZlcjogIWRpc2FibGVPcHRpbWl6ZWRMb2FkaW5nLFxuICAgICAgICAgICAgY3Jvc3NPcmlnaW46IHByb3BzLmNyb3NzT3JpZ2luIHx8IGNyb3NzT3JpZ2luXG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmNsYXNzIERvY3VtZW50IGV4dGVuZHMgX3JlYWN0LkNvbXBvbmVudCB7XG4gICAgLyoqXG4gICAqIGBnZXRJbml0aWFsUHJvcHNgIGhvb2sgcmV0dXJucyB0aGUgY29udGV4dCBvYmplY3Qgd2l0aCB0aGUgYWRkaXRpb24gb2YgYHJlbmRlclBhZ2VgLlxuICAgKiBgcmVuZGVyUGFnZWAgY2FsbGJhY2sgZXhlY3V0ZXMgYFJlYWN0YCByZW5kZXJpbmcgbG9naWMgc3luY2hyb25vdXNseSB0byBzdXBwb3J0IHNlcnZlci1yZW5kZXJpbmcgd3JhcHBlcnNcbiAgICovIHN0YXRpYyBnZXRJbml0aWFsUHJvcHMoY3R4KSB7XG4gICAgICAgIHJldHVybiBjdHguZGVmYXVsdEdldEluaXRpYWxQcm9wcyhjdHgpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybigvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSHRtbCwgbnVsbCwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEhlYWQsIG51bGwpLCAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJib2R5XCIsIG51bGwsIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChNYWluLCBudWxsKSwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE5leHRTY3JpcHQsIG51bGwpKSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IERvY3VtZW50O1xuRG9jdW1lbnQuX19uZXh0X2ludGVybmFsX2RvY3VtZW50ID0gZnVuY3Rpb24gSW50ZXJuYWxGdW5jdGlvbkRvY3VtZW50KCkge1xuICAgIHJldHVybigvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSHRtbCwgbnVsbCwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEhlYWQsIG51bGwpLCAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJib2R5XCIsIG51bGwsIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChNYWluLCBudWxsKSwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE5leHRTY3JpcHQsIG51bGwpKSkpO1xufTtcbmZ1bmN0aW9uIEh0bWwocHJvcHMpIHtcbiAgICBjb25zdCB7IGluQW1wTW9kZSAsIGRvY0NvbXBvbmVudHNSZW5kZXJlZCAsIGxvY2FsZSAgfSA9ICgwLCBfcmVhY3QpLnVzZUNvbnRleHQoX2h0bWxDb250ZXh0Lkh0bWxDb250ZXh0KTtcbiAgICBkb2NDb21wb25lbnRzUmVuZGVyZWQuSHRtbCA9IHRydWU7XG4gICAgcmV0dXJuKC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImh0bWxcIiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgbGFuZzogcHJvcHMubGFuZyB8fCBsb2NhbGUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBhbXA6IGluQW1wTW9kZSA/ICcnIDogdW5kZWZpbmVkLFxuICAgICAgICBcImRhdGEtYW1wZGV2bW9kZVwiOiBpbkFtcE1vZGUgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICcnIDogdW5kZWZpbmVkXG4gICAgfSkpKTtcbn1cbmZ1bmN0aW9uIEFtcFN0eWxlcyh7IHN0eWxlcyAgfSkge1xuICAgIGlmICghc3R5bGVzKSByZXR1cm4gbnVsbDtcbiAgICAvLyB0cnkgdG8gcGFyc2Ugc3R5bGVzIGZyb20gZnJhZ21lbnQgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAgICBjb25zdCBjdXJTdHlsZXMgPSBBcnJheS5pc0FycmF5KHN0eWxlcykgPyBzdHlsZXMgOiBbXTtcbiAgICBpZiAoLy8gQHRzLWlnbm9yZSBQcm9wZXJ0eSAncHJvcHMnIGRvZXMgbm90IGV4aXN0IG9uIHR5cGUgUmVhY3RFbGVtZW50XG4gICAgc3R5bGVzLnByb3BzICYmIC8vIEB0cy1pZ25vcmUgUHJvcGVydHkgJ3Byb3BzJyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlIFJlYWN0RWxlbWVudFxuICAgIEFycmF5LmlzQXJyYXkoc3R5bGVzLnByb3BzLmNoaWxkcmVuKSkge1xuICAgICAgICBjb25zdCBoYXNTdHlsZXMgPSAoZWwpPT57XG4gICAgICAgICAgICB2YXIgcmVmLCByZWYyO1xuICAgICAgICAgICAgcmV0dXJuIGVsID09PSBudWxsIHx8IGVsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAocmVmID0gZWwucHJvcHMpID09PSBudWxsIHx8IHJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKHJlZjIgPSByZWYuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpID09PSBudWxsIHx8IHJlZjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZjIuX19odG1sO1xuICAgICAgICB9O1xuICAgICAgICAvLyBAdHMtaWdub3JlIFByb3BlcnR5ICdwcm9wcycgZG9lcyBub3QgZXhpc3Qgb24gdHlwZSBSZWFjdEVsZW1lbnRcbiAgICAgICAgc3R5bGVzLnByb3BzLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKT0+e1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQuZm9yRWFjaCgoZWwpPT5oYXNTdHlsZXMoZWwpICYmIGN1clN0eWxlcy5wdXNoKGVsKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhc1N0eWxlcyhjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICBjdXJTdHlsZXMucHVzaChjaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiBBZGQgY3VzdG9tIHN0eWxlcyBiZWZvcmUgQU1QIHN0eWxlcyB0byBwcmV2ZW50IGFjY2lkZW50YWwgb3ZlcnJpZGVzICovIHJldHVybigvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLCB7XG4gICAgICAgIFwiYW1wLWN1c3RvbVwiOiBcIlwiLFxuICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgICAgICAgX19odG1sOiBjdXJTdHlsZXMubWFwKChzdHlsZSk9PnN0eWxlLnByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbFxuICAgICAgICAgICAgKS5qb2luKCcnKS5yZXBsYWNlKC9cXC9cXCojIHNvdXJjZU1hcHBpbmdVUkw9LipcXCpcXC8vZywgJycpLnJlcGxhY2UoL1xcL1xcKkAgc291cmNlVVJMPS4qP1xcKlxcLy9nLCAnJylcbiAgICAgICAgfVxuICAgIH0pKTtcbn1cbmNsYXNzIEhlYWQgZXh0ZW5kcyBfcmVhY3QuQ29tcG9uZW50IHtcbiAgICBnZXRDc3NMaW5rcyhmaWxlcykge1xuICAgICAgICBjb25zdCB7IGFzc2V0UHJlZml4ICwgZGV2T25seUNhY2hlQnVzdGVyUXVlcnlTdHJpbmcgLCBkeW5hbWljSW1wb3J0cyAsIGNyb3NzT3JpZ2luICwgb3B0aW1pemVDc3MgLCBvcHRpbWl6ZUZvbnRzICwgIH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGNvbnN0IGNzc0ZpbGVzID0gZmlsZXMuYWxsRmlsZXMuZmlsdGVyKChmKT0+Zi5lbmRzV2l0aCgnLmNzcycpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHNoYXJlZEZpbGVzID0gbmV3IFNldChmaWxlcy5zaGFyZWRGaWxlcyk7XG4gICAgICAgIC8vIFVubWFuYWdlZCBmaWxlcyBhcmUgQ1NTIGZpbGVzIHRoYXQgd2lsbCBiZSBoYW5kbGVkIGRpcmVjdGx5IGJ5IHRoZVxuICAgICAgICAvLyB3ZWJwYWNrIHJ1bnRpbWUgKGBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbmApLlxuICAgICAgICBsZXQgdW5tYW5nZWRGaWxlcyA9IG5ldyBTZXQoW10pO1xuICAgICAgICBsZXQgZHluYW1pY0Nzc0ZpbGVzID0gQXJyYXkuZnJvbShuZXcgU2V0KGR5bmFtaWNJbXBvcnRzLmZpbHRlcigoZmlsZSk9PmZpbGUuZW5kc1dpdGgoJy5jc3MnKVxuICAgICAgICApKSk7XG4gICAgICAgIGlmIChkeW5hbWljQ3NzRmlsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IG5ldyBTZXQoY3NzRmlsZXMpO1xuICAgICAgICAgICAgZHluYW1pY0Nzc0ZpbGVzID0gZHluYW1pY0Nzc0ZpbGVzLmZpbHRlcigoZik9PiEoZXhpc3RpbmcuaGFzKGYpIHx8IHNoYXJlZEZpbGVzLmhhcyhmKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB1bm1hbmdlZEZpbGVzID0gbmV3IFNldChkeW5hbWljQ3NzRmlsZXMpO1xuICAgICAgICAgICAgY3NzRmlsZXMucHVzaCguLi5keW5hbWljQ3NzRmlsZXMpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjc3NMaW5rRWxlbWVudHMgPSBbXTtcbiAgICAgICAgY3NzRmlsZXMuZm9yRWFjaCgoZmlsZSk9PntcbiAgICAgICAgICAgIGNvbnN0IGlzU2hhcmVkRmlsZSA9IHNoYXJlZEZpbGVzLmhhcyhmaWxlKTtcbiAgICAgICAgICAgIGlmICghb3B0aW1pemVDc3MpIHtcbiAgICAgICAgICAgICAgICBjc3NMaW5rRWxlbWVudHMucHVzaCgvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBgJHtmaWxlfS1wcmVsb2FkYCxcbiAgICAgICAgICAgICAgICAgICAgbm9uY2U6IHRoaXMucHJvcHMubm9uY2UsXG4gICAgICAgICAgICAgICAgICAgIHJlbDogXCJwcmVsb2FkXCIsXG4gICAgICAgICAgICAgICAgICAgIGhyZWY6IGAke2Fzc2V0UHJlZml4fS9fbmV4dC8ke2VuY29kZVVSSShmaWxlKX0ke2Rldk9ubHlDYWNoZUJ1c3RlclF1ZXJ5U3RyaW5nfWAsXG4gICAgICAgICAgICAgICAgICAgIGFzOiBcInN0eWxlXCIsXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzT3JpZ2luOiB0aGlzLnByb3BzLmNyb3NzT3JpZ2luIHx8IGNyb3NzT3JpZ2luXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXNVbm1hbmFnZWRGaWxlID0gdW5tYW5nZWRGaWxlcy5oYXMoZmlsZSk7XG4gICAgICAgICAgICBjc3NMaW5rRWxlbWVudHMucHVzaCgvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIsIHtcbiAgICAgICAgICAgICAgICBrZXk6IGZpbGUsXG4gICAgICAgICAgICAgICAgbm9uY2U6IHRoaXMucHJvcHMubm9uY2UsXG4gICAgICAgICAgICAgICAgcmVsOiBcInN0eWxlc2hlZXRcIixcbiAgICAgICAgICAgICAgICBocmVmOiBgJHthc3NldFByZWZpeH0vX25leHQvJHtlbmNvZGVVUkkoZmlsZSl9JHtkZXZPbmx5Q2FjaGVCdXN0ZXJRdWVyeVN0cmluZ31gLFxuICAgICAgICAgICAgICAgIGNyb3NzT3JpZ2luOiB0aGlzLnByb3BzLmNyb3NzT3JpZ2luIHx8IGNyb3NzT3JpZ2luLFxuICAgICAgICAgICAgICAgIFwiZGF0YS1uLWdcIjogaXNVbm1hbmFnZWRGaWxlID8gdW5kZWZpbmVkIDogaXNTaGFyZWRGaWxlID8gJycgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgXCJkYXRhLW4tcFwiOiBpc1VubWFuYWdlZEZpbGUgPyB1bmRlZmluZWQgOiBpc1NoYXJlZEZpbGUgPyB1bmRlZmluZWQgOiAnJ1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnICYmIG9wdGltaXplRm9udHMpIHtcbiAgICAgICAgICAgIGNzc0xpbmtFbGVtZW50cyA9IHRoaXMubWFrZVN0eWxlc2hlZXRJbmVydChjc3NMaW5rRWxlbWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjc3NMaW5rRWxlbWVudHMubGVuZ3RoID09PSAwID8gbnVsbCA6IGNzc0xpbmtFbGVtZW50cztcbiAgICB9XG4gICAgZ2V0UHJlbG9hZER5bmFtaWNDaHVua3MoKSB7XG4gICAgICAgIGNvbnN0IHsgZHluYW1pY0ltcG9ydHMgLCBhc3NldFByZWZpeCAsIGRldk9ubHlDYWNoZUJ1c3RlclF1ZXJ5U3RyaW5nICwgY3Jvc3NPcmlnaW4gLCAgfSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgcmV0dXJuIGR5bmFtaWNJbXBvcnRzLm1hcCgoZmlsZSk9PntcbiAgICAgICAgICAgIGlmICghZmlsZS5lbmRzV2l0aCgnLmpzJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybigvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIsIHtcbiAgICAgICAgICAgICAgICByZWw6IFwicHJlbG9hZFwiLFxuICAgICAgICAgICAgICAgIGtleTogZmlsZSxcbiAgICAgICAgICAgICAgICBocmVmOiBgJHthc3NldFByZWZpeH0vX25leHQvJHtlbmNvZGVVUkkoZmlsZSl9JHtkZXZPbmx5Q2FjaGVCdXN0ZXJRdWVyeVN0cmluZ31gLFxuICAgICAgICAgICAgICAgIGFzOiBcInNjcmlwdFwiLFxuICAgICAgICAgICAgICAgIG5vbmNlOiB0aGlzLnByb3BzLm5vbmNlLFxuICAgICAgICAgICAgICAgIGNyb3NzT3JpZ2luOiB0aGlzLnByb3BzLmNyb3NzT3JpZ2luIHx8IGNyb3NzT3JpZ2luXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pLy8gRmlsdGVyIG91dCBudWxsZWQgc2NyaXB0c1xuICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgIH1cbiAgICBnZXRQcmVsb2FkTWFpbkxpbmtzKGZpbGVzKSB7XG4gICAgICAgIGNvbnN0IHsgYXNzZXRQcmVmaXggLCBkZXZPbmx5Q2FjaGVCdXN0ZXJRdWVyeVN0cmluZyAsIHNjcmlwdExvYWRlciAsIGNyb3NzT3JpZ2luICwgIH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGNvbnN0IHByZWxvYWRGaWxlcyA9IGZpbGVzLmFsbEZpbGVzLmZpbHRlcigoZmlsZSk9PntcbiAgICAgICAgICAgIHJldHVybiBmaWxlLmVuZHNXaXRoKCcuanMnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAuLi4oc2NyaXB0TG9hZGVyLmJlZm9yZUludGVyYWN0aXZlIHx8IFtdKS5tYXAoKGZpbGUpPT4vKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBmaWxlLnNyYyxcbiAgICAgICAgICAgICAgICAgICAgbm9uY2U6IHRoaXMucHJvcHMubm9uY2UsXG4gICAgICAgICAgICAgICAgICAgIHJlbDogXCJwcmVsb2FkXCIsXG4gICAgICAgICAgICAgICAgICAgIGhyZWY6IGZpbGUuc3JjLFxuICAgICAgICAgICAgICAgICAgICBhczogXCJzY3JpcHRcIixcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NPcmlnaW46IHRoaXMucHJvcHMuY3Jvc3NPcmlnaW4gfHwgY3Jvc3NPcmlnaW5cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIC4uLnByZWxvYWRGaWxlcy5tYXAoKGZpbGUpPT4vKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBmaWxlLFxuICAgICAgICAgICAgICAgICAgICBub25jZTogdGhpcy5wcm9wcy5ub25jZSxcbiAgICAgICAgICAgICAgICAgICAgcmVsOiBcInByZWxvYWRcIixcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogYCR7YXNzZXRQcmVmaXh9L19uZXh0LyR7ZW5jb2RlVVJJKGZpbGUpfSR7ZGV2T25seUNhY2hlQnVzdGVyUXVlcnlTdHJpbmd9YCxcbiAgICAgICAgICAgICAgICAgICAgYXM6IFwic2NyaXB0XCIsXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzT3JpZ2luOiB0aGlzLnByb3BzLmNyb3NzT3JpZ2luIHx8IGNyb3NzT3JpZ2luXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICksIFxuICAgICAgICBdO1xuICAgIH1cbiAgICBnZXREeW5hbWljQ2h1bmtzKGZpbGVzKSB7XG4gICAgICAgIHJldHVybiBnZXREeW5hbWljQ2h1bmtzKHRoaXMuY29udGV4dCwgdGhpcy5wcm9wcywgZmlsZXMpO1xuICAgIH1cbiAgICBnZXRQcmVOZXh0U2NyaXB0cygpIHtcbiAgICAgICAgcmV0dXJuIGdldFByZU5leHRTY3JpcHRzKHRoaXMuY29udGV4dCwgdGhpcy5wcm9wcyk7XG4gICAgfVxuICAgIGdldFNjcmlwdHMoZmlsZXMpIHtcbiAgICAgICAgcmV0dXJuIGdldFNjcmlwdHModGhpcy5jb250ZXh0LCB0aGlzLnByb3BzLCBmaWxlcyk7XG4gICAgfVxuICAgIGdldFBvbHlmaWxsU2NyaXB0cygpIHtcbiAgICAgICAgcmV0dXJuIGdldFBvbHlmaWxsU2NyaXB0cyh0aGlzLmNvbnRleHQsIHRoaXMucHJvcHMpO1xuICAgIH1cbiAgICBoYW5kbGVEb2N1bWVudFNjcmlwdExvYWRlckl0ZW1zKGNoaWxkcmVuKSB7XG4gICAgICAgIGNvbnN0IHsgc2NyaXB0TG9hZGVyICB9ID0gdGhpcy5jb250ZXh0O1xuICAgICAgICBjb25zdCBzY3JpcHRMb2FkZXJJdGVtcyA9IFtdO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZENoaWxkcmVuID0gW107XG4gICAgICAgIF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChjaGlsZCk9PntcbiAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBfc2NyaXB0LmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQucHJvcHMuc3RyYXRlZ3kgPT09ICdiZWZvcmVJbnRlcmFjdGl2ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0TG9hZGVyLmJlZm9yZUludGVyYWN0aXZlID0gKHNjcmlwdExvYWRlci5iZWZvcmVJbnRlcmFjdGl2ZSB8fCBbXSkuY29uY2F0KFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5jaGlsZC5wcm9wc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChbXG4gICAgICAgICAgICAgICAgICAgICdsYXp5T25sb2FkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2FmdGVySW50ZXJhY3RpdmUnLFxuICAgICAgICAgICAgICAgICAgICAnd29ya2VyJ1xuICAgICAgICAgICAgICAgIF0uaW5jbHVkZXMoY2hpbGQucHJvcHMuc3RyYXRlZ3kpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdExvYWRlckl0ZW1zLnB1c2goY2hpbGQucHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsdGVyZWRDaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29udGV4dC5fX05FWFRfREFUQV9fLnNjcmlwdExvYWRlciA9IHNjcmlwdExvYWRlckl0ZW1zO1xuICAgICAgICByZXR1cm4gZmlsdGVyZWRDaGlsZHJlbjtcbiAgICB9XG4gICAgbWFrZVN0eWxlc2hlZXRJbmVydChub2RlKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAobm9kZSwgKGMpPT57XG4gICAgICAgICAgICB2YXIgcmVmNSwgcmVmMztcbiAgICAgICAgICAgIGlmICgoYyA9PT0gbnVsbCB8fCBjID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjLnR5cGUpID09PSAnbGluaycgJiYgKGMgPT09IG51bGwgfHwgYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKHJlZjUgPSBjLnByb3BzKSA9PT0gbnVsbCB8fCByZWY1ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWY1LmhyZWYpICYmIF9jb25zdGFudHMuT1BUSU1JWkVEX0ZPTlRfUFJPVklERVJTLnNvbWUoKHsgdXJsICB9KT0+e1xuICAgICAgICAgICAgICAgIHZhciByZWYsIHJlZjQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMgPT09IG51bGwgfHwgYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKHJlZiA9IGMucHJvcHMpID09PSBudWxsIHx8IHJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKHJlZjQgPSByZWYuaHJlZikgPT09IG51bGwgfHwgcmVmNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVmNC5zdGFydHNXaXRoKHVybCk7XG4gICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Byb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5jLnByb3BzIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICAnZGF0YS1ocmVmJzogYy5wcm9wcy5ocmVmLFxuICAgICAgICAgICAgICAgICAgICBocmVmOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybigvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChjLCBuZXdQcm9wcykpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSBudWxsIHx8IGMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChyZWYzID0gYy5wcm9wcykgPT09IG51bGwgfHwgcmVmMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVmMy5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Byb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5jLnByb3BzIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5tYWtlU3R5bGVzaGVldEluZXJ0KGMucHJvcHMuY2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4oLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoYywgbmV3UHJvcHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICB9KS5maWx0ZXIoQm9vbGVhbik7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBzdHlsZXMgLCBhbXBQYXRoICwgaW5BbXBNb2RlICwgaHlicmlkQW1wICwgY2Fub25pY2FsQmFzZSAsIF9fTkVYVF9EQVRBX18gLCBkYW5nZXJvdXNBc1BhdGggLCBoZWFkVGFncyAsIHVuc3RhYmxlX3J1bnRpbWVKUyAsIHVuc3RhYmxlX0pzUHJlbG9hZCAsIGRpc2FibGVPcHRpbWl6ZWRMb2FkaW5nICwgb3B0aW1pemVDc3MgLCBvcHRpbWl6ZUZvbnRzICwgIH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGNvbnN0IGRpc2FibGVSdW50aW1lSlMgPSB1bnN0YWJsZV9ydW50aW1lSlMgPT09IGZhbHNlO1xuICAgICAgICBjb25zdCBkaXNhYmxlSnNQcmVsb2FkID0gdW5zdGFibGVfSnNQcmVsb2FkID09PSBmYWxzZSB8fCAhZGlzYWJsZU9wdGltaXplZExvYWRpbmc7XG4gICAgICAgIHRoaXMuY29udGV4dC5kb2NDb21wb25lbnRzUmVuZGVyZWQuSGVhZCA9IHRydWU7XG4gICAgICAgIGxldCB7IGhlYWQgIH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGxldCBjc3NQcmVsb2FkcyA9IFtdO1xuICAgICAgICBsZXQgb3RoZXJIZWFkRWxlbWVudHMgPSBbXTtcbiAgICAgICAgaWYgKGhlYWQpIHtcbiAgICAgICAgICAgIGhlYWQuZm9yRWFjaCgoYyk9PntcbiAgICAgICAgICAgICAgICBpZiAoYyAmJiBjLnR5cGUgPT09ICdsaW5rJyAmJiBjLnByb3BzWydyZWwnXSA9PT0gJ3ByZWxvYWQnICYmIGMucHJvcHNbJ2FzJ10gPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzUHJlbG9hZHMucHVzaChjKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjICYmIG90aGVySGVhZEVsZW1lbnRzLnB1c2goYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBoZWFkID0gY3NzUHJlbG9hZHMuY29uY2F0KG90aGVySGVhZEVsZW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY2hpbGRyZW4gPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi50b0FycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgLy8gc2hvdyBhIHdhcm5pbmcgaWYgSGVhZCBjb250YWlucyA8dGl0bGU+IChvbmx5IGluIGRldmVsb3BtZW50KVxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCk9PntcbiAgICAgICAgICAgICAgICB2YXIgcmVmO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzUmVhY3RIZWxtZXQgPSBjaGlsZCA9PT0gbnVsbCB8fCBjaGlsZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKHJlZiA9IGNoaWxkLnByb3BzKSA9PT0gbnVsbCB8fCByZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZlsnZGF0YS1yZWFjdC1oZWxtZXQnXTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzUmVhY3RIZWxtZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZjY7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoY2hpbGQgPT09IG51bGwgfHwgY2hpbGQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNoaWxkLnR5cGUpID09PSAndGl0bGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJXYXJuaW5nOiA8dGl0bGU+IHNob3VsZCBub3QgYmUgdXNlZCBpbiBfZG9jdW1lbnQuanMncyA8SGVhZD4uIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL25vLWRvY3VtZW50LXRpdGxlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChjaGlsZCA9PT0gbnVsbCB8fCBjaGlsZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2hpbGQudHlwZSkgPT09ICdtZXRhJyAmJiAoY2hpbGQgPT09IG51bGwgfHwgY2hpbGQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChyZWY2ID0gY2hpbGQucHJvcHMpID09PSBudWxsIHx8IHJlZjYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZjYubmFtZSkgPT09ICd2aWV3cG9ydCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIldhcm5pbmc6IHZpZXdwb3J0IG1ldGEgdGFncyBzaG91bGQgbm90IGJlIHVzZWQgaW4gX2RvY3VtZW50LmpzJ3MgPEhlYWQ+LiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9uby1kb2N1bWVudC12aWV3cG9ydC1tZXRhXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuY3Jvc3NPcmlnaW4pIGNvbnNvbGUud2FybignV2FybmluZzogYEhlYWRgIGF0dHJpYnV0ZSBgY3Jvc3NPcmlnaW5gIGlzIGRlcHJlY2F0ZWQuIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL2RvYy1jcm9zc29yaWdpbi1kZXByZWNhdGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnICYmIG9wdGltaXplRm9udHMgJiYgIWluQW1wTW9kZSkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSB0aGlzLm1ha2VTdHlsZXNoZWV0SW5lcnQoY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuID0gdGhpcy5oYW5kbGVEb2N1bWVudFNjcmlwdExvYWRlckl0ZW1zKGNoaWxkcmVuKTtcbiAgICAgICAgbGV0IGhhc0FtcGh0bWxSZWwgPSBmYWxzZTtcbiAgICAgICAgbGV0IGhhc0Nhbm9uaWNhbFJlbCA9IGZhbHNlO1xuICAgICAgICAvLyBzaG93IHdhcm5pbmcgYW5kIHJlbW92ZSBjb25mbGljdGluZyBhbXAgaGVhZCB0YWdzXG4gICAgICAgIGhlYWQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoaGVhZCB8fCBbXSwgKGNoaWxkKT0+e1xuICAgICAgICAgICAgaWYgKCFjaGlsZCkgcmV0dXJuIGNoaWxkO1xuICAgICAgICAgICAgY29uc3QgeyB0eXBlICwgcHJvcHMgIH0gPSBjaGlsZDtcbiAgICAgICAgICAgIGlmIChpbkFtcE1vZGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgYmFkUHJvcCA9ICcnO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnbWV0YScgJiYgcHJvcHMubmFtZSA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgICAgICAgICAgICAgICAgICBiYWRQcm9wID0gJ25hbWU9XCJ2aWV3cG9ydFwiJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdsaW5rJyAmJiBwcm9wcy5yZWwgPT09ICdjYW5vbmljYWwnKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc0Nhbm9uaWNhbFJlbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnc2NyaXB0Jykge1xuICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGJsb2NrIGlmXG4gICAgICAgICAgICAgICAgICAgIC8vIDEuIGl0IGhhcyBhIHNyYyBhbmQgaXNuJ3QgcG9pbnRpbmcgdG8gYW1wcHJvamVjdCdzIENETlxuICAgICAgICAgICAgICAgICAgICAvLyAyLiBpdCBpcyB1c2luZyBkYW5nZXJvdXNseVNldElubmVySFRNTCB3aXRob3V0IGEgdHlwZSBvclxuICAgICAgICAgICAgICAgICAgICAvLyBhIHR5cGUgb2YgdGV4dC9qYXZhc2NyaXB0XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5zcmMgJiYgcHJvcHMuc3JjLmluZGV4T2YoJ2FtcHByb2plY3QnKSA8IC0xIHx8IHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmICghcHJvcHMudHlwZSB8fCBwcm9wcy50eXBlID09PSAndGV4dC9qYXZhc2NyaXB0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhZFByb3AgPSAnPHNjcmlwdCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaCgocHJvcCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWRQcm9wICs9IGAgJHtwcm9wfT1cIiR7cHJvcHNbcHJvcF19XCJgO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWRQcm9wICs9ICcvPic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJhZFByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBGb3VuZCBjb25mbGljdGluZyBhbXAgdGFnIFwiJHtjaGlsZC50eXBlfVwiIHdpdGggY29uZmxpY3RpbmcgcHJvcCAke2JhZFByb3B9IGluICR7X19ORVhUX0RBVEFfXy5wYWdlfS4gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvY29uZmxpY3RpbmctYW1wLXRhZ2ApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vbi1hbXAgbW9kZVxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnbGluaycgJiYgcHJvcHMucmVsID09PSAnYW1waHRtbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzQW1waHRtbFJlbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZmlsZXMgPSBnZXREb2N1bWVudEZpbGVzKHRoaXMuY29udGV4dC5idWlsZE1hbmlmZXN0LCB0aGlzLmNvbnRleHQuX19ORVhUX0RBVEFfXy5wYWdlLCBpbkFtcE1vZGUpO1xuICAgICAgICB2YXIgX25vbmNlLCBfbm9uY2UxO1xuICAgICAgICByZXR1cm4oLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaGVhZFwiLCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByb3BzKSwgdGhpcy5jb250ZXh0LmlzRGV2ZWxvcG1lbnQgJiYgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLCB7XG4gICAgICAgICAgICBcImRhdGEtbmV4dC1oaWRlLWZvdWNcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZGF0YS1hbXBkZXZtb2RlXCI6IGluQW1wTW9kZSA/ICd0cnVlJyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICAgICAgICAgICAgX19odG1sOiBgYm9keXtkaXNwbGF5Om5vbmV9YFxuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibm9zY3JpcHRcIiwge1xuICAgICAgICAgICAgXCJkYXRhLW5leHQtaGlkZS1mb3VjXCI6IHRydWUsXG4gICAgICAgICAgICBcImRhdGEtYW1wZGV2bW9kZVwiOiBpbkFtcE1vZGUgPyAndHJ1ZScgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiwge1xuICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgICAgICAgICBfX2h0bWw6IGBib2R5e2Rpc3BsYXk6YmxvY2t9YFxuICAgICAgICAgICAgfVxuICAgICAgICB9KSkpLCBoZWFkLCAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJtZXRhXCIsIHtcbiAgICAgICAgICAgIG5hbWU6IFwibmV4dC1oZWFkLWNvdW50XCIsXG4gICAgICAgICAgICBjb250ZW50OiBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5jb3VudChoZWFkIHx8IFtdKS50b1N0cmluZygpXG4gICAgICAgIH0pLCBjaGlsZHJlbiwgb3B0aW1pemVGb250cyAmJiAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJtZXRhXCIsIHtcbiAgICAgICAgICAgIG5hbWU6IFwibmV4dC1mb250LXByZWNvbm5lY3RcIlxuICAgICAgICB9KSwgaW5BbXBNb2RlICYmIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibWV0YVwiLCB7XG4gICAgICAgICAgICBuYW1lOiBcInZpZXdwb3J0XCIsXG4gICAgICAgICAgICBjb250ZW50OiBcIndpZHRoPWRldmljZS13aWR0aCxtaW5pbXVtLXNjYWxlPTEsaW5pdGlhbC1zY2FsZT0xXCJcbiAgICAgICAgfSksICFoYXNDYW5vbmljYWxSZWwgJiYgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibGlua1wiLCB7XG4gICAgICAgICAgICByZWw6IFwiY2Fub25pY2FsXCIsXG4gICAgICAgICAgICBocmVmOiBjYW5vbmljYWxCYXNlICsgKDAsIF91dGlscykuY2xlYW5BbXBQYXRoKGRhbmdlcm91c0FzUGF0aClcbiAgICAgICAgfSksIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxpbmtcIiwge1xuICAgICAgICAgICAgcmVsOiBcInByZWxvYWRcIixcbiAgICAgICAgICAgIGFzOiBcInNjcmlwdFwiLFxuICAgICAgICAgICAgaHJlZjogXCJodHRwczovL2Nkbi5hbXBwcm9qZWN0Lm9yZy92MC5qc1wiXG4gICAgICAgIH0pLCAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQW1wU3R5bGVzLCB7XG4gICAgICAgICAgICBzdHlsZXM6IHN0eWxlc1xuICAgICAgICB9KSwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiwge1xuICAgICAgICAgICAgXCJhbXAtYm9pbGVycGxhdGVcIjogXCJcIixcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICAgICAgICAgICAgX19odG1sOiBgYm9keXstd2Via2l0LWFuaW1hdGlvbjotYW1wLXN0YXJ0IDhzIHN0ZXBzKDEsZW5kKSAwcyAxIG5vcm1hbCBib3RoOy1tb3otYW5pbWF0aW9uOi1hbXAtc3RhcnQgOHMgc3RlcHMoMSxlbmQpIDBzIDEgbm9ybWFsIGJvdGg7LW1zLWFuaW1hdGlvbjotYW1wLXN0YXJ0IDhzIHN0ZXBzKDEsZW5kKSAwcyAxIG5vcm1hbCBib3RoO2FuaW1hdGlvbjotYW1wLXN0YXJ0IDhzIHN0ZXBzKDEsZW5kKSAwcyAxIG5vcm1hbCBib3RofUAtd2Via2l0LWtleWZyYW1lcyAtYW1wLXN0YXJ0e2Zyb217dmlzaWJpbGl0eTpoaWRkZW59dG97dmlzaWJpbGl0eTp2aXNpYmxlfX1ALW1vei1rZXlmcmFtZXMgLWFtcC1zdGFydHtmcm9te3Zpc2liaWxpdHk6aGlkZGVufXRve3Zpc2liaWxpdHk6dmlzaWJsZX19QC1tcy1rZXlmcmFtZXMgLWFtcC1zdGFydHtmcm9te3Zpc2liaWxpdHk6aGlkZGVufXRve3Zpc2liaWxpdHk6dmlzaWJsZX19QC1vLWtleWZyYW1lcyAtYW1wLXN0YXJ0e2Zyb217dmlzaWJpbGl0eTpoaWRkZW59dG97dmlzaWJpbGl0eTp2aXNpYmxlfX1Aa2V5ZnJhbWVzIC1hbXAtc3RhcnR7ZnJvbXt2aXNpYmlsaXR5OmhpZGRlbn10b3t2aXNpYmlsaXR5OnZpc2libGV9fWBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcIm5vc2NyaXB0XCIsIG51bGwsIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIsIHtcbiAgICAgICAgICAgIFwiYW1wLWJvaWxlcnBsYXRlXCI6IFwiXCIsXG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgICAgICAgICAgIF9faHRtbDogYGJvZHl7LXdlYmtpdC1hbmltYXRpb246bm9uZTstbW96LWFuaW1hdGlvbjpub25lOy1tcy1hbmltYXRpb246bm9uZTthbmltYXRpb246bm9uZX1gXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKSwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIsIHtcbiAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgc3JjOiBcImh0dHBzOi8vY2RuLmFtcHByb2plY3Qub3JnL3YwLmpzXCJcbiAgICAgICAgfSkpLCAhaW5BbXBNb2RlICYmIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgIWhhc0FtcGh0bWxSZWwgJiYgaHlicmlkQW1wICYmIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxpbmtcIiwge1xuICAgICAgICAgICAgcmVsOiBcImFtcGh0bWxcIixcbiAgICAgICAgICAgIGhyZWY6IGNhbm9uaWNhbEJhc2UgKyBnZXRBbXBQYXRoKGFtcFBhdGgsIGRhbmdlcm91c0FzUGF0aClcbiAgICAgICAgfSksICFvcHRpbWl6ZUNzcyAmJiB0aGlzLmdldENzc0xpbmtzKGZpbGVzKSwgIW9wdGltaXplQ3NzICYmIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcIm5vc2NyaXB0XCIsIHtcbiAgICAgICAgICAgIFwiZGF0YS1uLWNzc1wiOiAoX25vbmNlID0gdGhpcy5wcm9wcy5ub25jZSkgIT09IG51bGwgJiYgX25vbmNlICE9PSB2b2lkIDAgPyBfbm9uY2UgOiAnJ1xuICAgICAgICB9KSwgIWRpc2FibGVSdW50aW1lSlMgJiYgIWRpc2FibGVKc1ByZWxvYWQgJiYgdGhpcy5nZXRQcmVsb2FkRHluYW1pY0NodW5rcygpLCAhZGlzYWJsZVJ1bnRpbWVKUyAmJiAhZGlzYWJsZUpzUHJlbG9hZCAmJiB0aGlzLmdldFByZWxvYWRNYWluTGlua3MoZmlsZXMpLCAhZGlzYWJsZU9wdGltaXplZExvYWRpbmcgJiYgIWRpc2FibGVSdW50aW1lSlMgJiYgdGhpcy5nZXRQb2x5ZmlsbFNjcmlwdHMoKSwgIWRpc2FibGVPcHRpbWl6ZWRMb2FkaW5nICYmICFkaXNhYmxlUnVudGltZUpTICYmIHRoaXMuZ2V0UHJlTmV4dFNjcmlwdHMoKSwgIWRpc2FibGVPcHRpbWl6ZWRMb2FkaW5nICYmICFkaXNhYmxlUnVudGltZUpTICYmIHRoaXMuZ2V0RHluYW1pY0NodW5rcyhmaWxlcyksICFkaXNhYmxlT3B0aW1pemVkTG9hZGluZyAmJiAhZGlzYWJsZVJ1bnRpbWVKUyAmJiB0aGlzLmdldFNjcmlwdHMoZmlsZXMpLCBvcHRpbWl6ZUNzcyAmJiB0aGlzLmdldENzc0xpbmtzKGZpbGVzKSwgb3B0aW1pemVDc3MgJiYgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibm9zY3JpcHRcIiwge1xuICAgICAgICAgICAgXCJkYXRhLW4tY3NzXCI6IChfbm9uY2UxID0gdGhpcy5wcm9wcy5ub25jZSkgIT09IG51bGwgJiYgX25vbmNlMSAhPT0gdm9pZCAwID8gX25vbmNlMSA6ICcnXG4gICAgICAgIH0pLCB0aGlzLmNvbnRleHQuaXNEZXZlbG9wbWVudCAmJiAvLyB0aGlzIGVsZW1lbnQgaXMgdXNlZCB0byBtb3VudCBkZXZlbG9wbWVudCBzdHlsZXMgc28gdGhlXG4gICAgICAgIC8vIG9yZGVyaW5nIG1hdGNoZXMgcHJvZHVjdGlvblxuICAgICAgICAvLyAoYnkgZGVmYXVsdCwgc3R5bGUtbG9hZGVyIGluamVjdHMgYXQgdGhlIGJvdHRvbSBvZiA8aGVhZCAvPilcbiAgICAgICAgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibm9zY3JpcHRcIiwge1xuICAgICAgICAgICAgaWQ6IFwiX19uZXh0X2Nzc19fRE9fTk9UX1VTRV9fXCJcbiAgICAgICAgfSksIHN0eWxlcyB8fCBudWxsKSwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCB7fSwgLi4uaGVhZFRhZ3MgfHwgW10pKSk7XG4gICAgfVxufVxuZXhwb3J0cy5IZWFkID0gSGVhZDtcbkhlYWQuY29udGV4dFR5cGUgPSBfaHRtbENvbnRleHQuSHRtbENvbnRleHQ7XG5mdW5jdGlvbiBNYWluKCkge1xuICAgIGNvbnN0IHsgZG9jQ29tcG9uZW50c1JlbmRlcmVkICB9ID0gKDAsIF9yZWFjdCkudXNlQ29udGV4dChfaHRtbENvbnRleHQuSHRtbENvbnRleHQpO1xuICAgIGRvY0NvbXBvbmVudHNSZW5kZXJlZC5NYWluID0gdHJ1ZTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuKC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcIm5leHQtanMtaW50ZXJuYWwtYm9keS1yZW5kZXItdGFyZ2V0XCIsIG51bGwpKTtcbn1cbmNsYXNzIE5leHRTY3JpcHQgZXh0ZW5kcyBfcmVhY3QuQ29tcG9uZW50IHtcbiAgICBnZXREeW5hbWljQ2h1bmtzKGZpbGVzKSB7XG4gICAgICAgIHJldHVybiBnZXREeW5hbWljQ2h1bmtzKHRoaXMuY29udGV4dCwgdGhpcy5wcm9wcywgZmlsZXMpO1xuICAgIH1cbiAgICBnZXRQcmVOZXh0U2NyaXB0cygpIHtcbiAgICAgICAgcmV0dXJuIGdldFByZU5leHRTY3JpcHRzKHRoaXMuY29udGV4dCwgdGhpcy5wcm9wcyk7XG4gICAgfVxuICAgIGdldFNjcmlwdHMoZmlsZXMpIHtcbiAgICAgICAgcmV0dXJuIGdldFNjcmlwdHModGhpcy5jb250ZXh0LCB0aGlzLnByb3BzLCBmaWxlcyk7XG4gICAgfVxuICAgIGdldFBvbHlmaWxsU2NyaXB0cygpIHtcbiAgICAgICAgcmV0dXJuIGdldFBvbHlmaWxsU2NyaXB0cyh0aGlzLmNvbnRleHQsIHRoaXMucHJvcHMpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0SW5saW5lU2NyaXB0U291cmNlKGNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgeyBfX05FWFRfREFUQV9fICB9ID0gY29udGV4dDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnN0cmluZ2lmeShfX05FWFRfREFUQV9fKTtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gQnVmZmVyLmZyb20oZGF0YSkuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV0dHlCeXRlcyA9IHJlcXVpcmUoJy4uL2xpYi9wcmV0dHktYnl0ZXMnKS5kZWZhdWx0O1xuICAgICAgICAgICAgICAgIGlmIChieXRlcyA+IDEyOCAqIDEwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBXYXJuaW5nOiBkYXRhIGZvciBwYWdlIFwiJHtfX05FWFRfREFUQV9fLnBhZ2V9XCIgaXMgJHtwcmV0dHlCeXRlcyhieXRlcyl9LCB0aGlzIGFtb3VudCBvZiBkYXRhIGNhbiByZWR1Y2UgcGVyZm9ybWFuY2UuXFxuU2VlIG1vcmUgaW5mbyBoZXJlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9sYXJnZS1wYWdlLWRhdGFgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKDAsIF9odG1sZXNjYXBlKS5odG1sRXNjYXBlSnNvblN0cmluZyhkYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoKDAsIF9pc0Vycm9yKS5kZWZhdWx0KGVycikgJiYgZXJyLm1lc3NhZ2UuaW5kZXhPZignY2lyY3VsYXIgc3RydWN0dXJlJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDaXJjdWxhciBzdHJ1Y3R1cmUgaW4gXCJnZXRJbml0aWFsUHJvcHNcIiByZXN1bHQgb2YgcGFnZSBcIiR7X19ORVhUX0RBVEFfXy5wYWdlfVwiLiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9jaXJjdWxhci1zdHJ1Y3R1cmVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgYXNzZXRQcmVmaXggLCBpbkFtcE1vZGUgLCBidWlsZE1hbmlmZXN0ICwgdW5zdGFibGVfcnVudGltZUpTICwgZG9jQ29tcG9uZW50c1JlbmRlcmVkICwgZGV2T25seUNhY2hlQnVzdGVyUXVlcnlTdHJpbmcgLCBkaXNhYmxlT3B0aW1pemVkTG9hZGluZyAsIGNyb3NzT3JpZ2luICwgIH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGNvbnN0IGRpc2FibGVSdW50aW1lSlMgPSB1bnN0YWJsZV9ydW50aW1lSlMgPT09IGZhbHNlO1xuICAgICAgICBkb2NDb21wb25lbnRzUmVuZGVyZWQuTmV4dFNjcmlwdCA9IHRydWU7XG4gICAgICAgIGlmIChpbkFtcE1vZGUpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhbXBEZXZGaWxlcyA9IFtcbiAgICAgICAgICAgICAgICAuLi5idWlsZE1hbmlmZXN0LmRldkZpbGVzLFxuICAgICAgICAgICAgICAgIC4uLmJ1aWxkTWFuaWZlc3QucG9seWZpbGxGaWxlcyxcbiAgICAgICAgICAgICAgICAuLi5idWlsZE1hbmlmZXN0LmFtcERldkZpbGVzLCBcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICByZXR1cm4oLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBkaXNhYmxlUnVudGltZUpTID8gbnVsbCA6IC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiLCB7XG4gICAgICAgICAgICAgICAgaWQ6IFwiX19ORVhUX0RBVEFfX1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgICAgIG5vbmNlOiB0aGlzLnByb3BzLm5vbmNlLFxuICAgICAgICAgICAgICAgIGNyb3NzT3JpZ2luOiB0aGlzLnByb3BzLmNyb3NzT3JpZ2luIHx8IGNyb3NzT3JpZ2luLFxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICAgICAgICAgICAgICAgIF9faHRtbDogTmV4dFNjcmlwdC5nZXRJbmxpbmVTY3JpcHRTb3VyY2UodGhpcy5jb250ZXh0KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJkYXRhLWFtcGRldm1vZGVcIjogdHJ1ZVxuICAgICAgICAgICAgfSksIGFtcERldkZpbGVzLm1hcCgoZmlsZSk9Pi8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgc3JjOiBgJHthc3NldFByZWZpeH0vX25leHQvJHtmaWxlfSR7ZGV2T25seUNhY2hlQnVzdGVyUXVlcnlTdHJpbmd9YCxcbiAgICAgICAgICAgICAgICAgICAgbm9uY2U6IHRoaXMucHJvcHMubm9uY2UsXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzT3JpZ2luOiB0aGlzLnByb3BzLmNyb3NzT3JpZ2luIHx8IGNyb3NzT3JpZ2luLFxuICAgICAgICAgICAgICAgICAgICBcImRhdGEtYW1wZGV2bW9kZVwiOiB0cnVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuY3Jvc3NPcmlnaW4pIGNvbnNvbGUud2FybignV2FybmluZzogYE5leHRTY3JpcHRgIGF0dHJpYnV0ZSBgY3Jvc3NPcmlnaW5gIGlzIGRlcHJlY2F0ZWQuIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL2RvYy1jcm9zc29yaWdpbi1kZXByZWNhdGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlsZXMgPSBnZXREb2N1bWVudEZpbGVzKHRoaXMuY29udGV4dC5idWlsZE1hbmlmZXN0LCB0aGlzLmNvbnRleHQuX19ORVhUX0RBVEFfXy5wYWdlLCBpbkFtcE1vZGUpO1xuICAgICAgICByZXR1cm4oLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCAhZGlzYWJsZVJ1bnRpbWVKUyAmJiBidWlsZE1hbmlmZXN0LmRldkZpbGVzID8gYnVpbGRNYW5pZmVzdC5kZXZGaWxlcy5tYXAoKGZpbGUpPT4vKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiwge1xuICAgICAgICAgICAgICAgIGtleTogZmlsZSxcbiAgICAgICAgICAgICAgICBzcmM6IGAke2Fzc2V0UHJlZml4fS9fbmV4dC8ke2VuY29kZVVSSShmaWxlKX0ke2Rldk9ubHlDYWNoZUJ1c3RlclF1ZXJ5U3RyaW5nfWAsXG4gICAgICAgICAgICAgICAgbm9uY2U6IHRoaXMucHJvcHMubm9uY2UsXG4gICAgICAgICAgICAgICAgY3Jvc3NPcmlnaW46IHRoaXMucHJvcHMuY3Jvc3NPcmlnaW4gfHwgY3Jvc3NPcmlnaW5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICkgOiBudWxsLCBkaXNhYmxlUnVudGltZUpTID8gbnVsbCA6IC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiLCB7XG4gICAgICAgICAgICBpZDogXCJfX05FWFRfREFUQV9fXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIG5vbmNlOiB0aGlzLnByb3BzLm5vbmNlLFxuICAgICAgICAgICAgY3Jvc3NPcmlnaW46IHRoaXMucHJvcHMuY3Jvc3NPcmlnaW4gfHwgY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgICAgICAgICAgIF9faHRtbDogTmV4dFNjcmlwdC5nZXRJbmxpbmVTY3JpcHRTb3VyY2UodGhpcy5jb250ZXh0KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgZGlzYWJsZU9wdGltaXplZExvYWRpbmcgJiYgIWRpc2FibGVSdW50aW1lSlMgJiYgdGhpcy5nZXRQb2x5ZmlsbFNjcmlwdHMoKSwgZGlzYWJsZU9wdGltaXplZExvYWRpbmcgJiYgIWRpc2FibGVSdW50aW1lSlMgJiYgdGhpcy5nZXRQcmVOZXh0U2NyaXB0cygpLCBkaXNhYmxlT3B0aW1pemVkTG9hZGluZyAmJiAhZGlzYWJsZVJ1bnRpbWVKUyAmJiB0aGlzLmdldER5bmFtaWNDaHVua3MoZmlsZXMpLCBkaXNhYmxlT3B0aW1pemVkTG9hZGluZyAmJiAhZGlzYWJsZVJ1bnRpbWVKUyAmJiB0aGlzLmdldFNjcmlwdHMoZmlsZXMpKSk7XG4gICAgfVxufVxuZXhwb3J0cy5OZXh0U2NyaXB0ID0gTmV4dFNjcmlwdDtcbk5leHRTY3JpcHQuY29udGV4dFR5cGUgPSBfaHRtbENvbnRleHQuSHRtbENvbnRleHQ7XG5OZXh0U2NyaXB0LnNhZmFyaU5vbW9kdWxlRml4ID0gJyFmdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LHQ9ZS5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2lmKCEoXCJub01vZHVsZVwiaW4gdCkmJlwib25iZWZvcmVsb2FkXCJpbiB0KXt2YXIgbj0hMTtlLmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmVsb2FkXCIsZnVuY3Rpb24oZSl7aWYoZS50YXJnZXQ9PT10KW49ITA7ZWxzZSBpZighZS50YXJnZXQuaGFzQXR0cmlidXRlKFwibm9tb2R1bGVcIil8fCFuKXJldHVybjtlLnByZXZlbnREZWZhdWx0KCl9LCEwKSx0LnR5cGU9XCJtb2R1bGVcIix0LnNyYz1cIi5cIixlLmhlYWQuYXBwZW5kQ2hpbGQodCksdC5yZW1vdmUoKX19KCk7JztcbmZ1bmN0aW9uIGdldEFtcFBhdGgoYW1wUGF0aCwgYXNQYXRoKSB7XG4gICAgcmV0dXJuIGFtcFBhdGggfHwgYCR7YXNQYXRofSR7YXNQYXRoLmluY2x1ZGVzKCc/JykgPyAnJicgOiAnPyd9YW1wPTFgO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1fZG9jdW1lbnQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiSHRtbCIsIk1haW4iLCJkZWZhdWx0IiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2NvbnN0YW50cyIsIl9nZXRQYWdlRmlsZXMiLCJfdXRpbHMiLCJfaHRtbGVzY2FwZSIsIl9zY3JpcHQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2lzRXJyb3IiLCJfaHRtbENvbnRleHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwibmV3T2JqIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldCIsInNldCIsImdldERvY3VtZW50RmlsZXMiLCJidWlsZE1hbmlmZXN0IiwicGF0aG5hbWUiLCJpbkFtcE1vZGUiLCJzaGFyZWRGaWxlcyIsImdldFBhZ2VGaWxlcyIsInBhZ2VGaWxlcyIsImFsbEZpbGVzIiwiU2V0IiwiZ2V0UG9seWZpbGxTY3JpcHRzIiwiY29udGV4dCIsInByb3BzIiwiYXNzZXRQcmVmaXgiLCJkZXZPbmx5Q2FjaGVCdXN0ZXJRdWVyeVN0cmluZyIsImRpc2FibGVPcHRpbWl6ZWRMb2FkaW5nIiwiY3Jvc3NPcmlnaW4iLCJwb2x5ZmlsbEZpbGVzIiwiZmlsdGVyIiwicG9seWZpbGwiLCJlbmRzV2l0aCIsIm1hcCIsImNyZWF0ZUVsZW1lbnQiLCJkZWZlciIsIm5vbmNlIiwibm9Nb2R1bGUiLCJzcmMiLCJoYXNDb21wb25lbnRQcm9wcyIsImNoaWxkIiwiZ2V0UHJlTmV4dFdvcmtlclNjcmlwdHMiLCJzY3JpcHRMb2FkZXIiLCJuZXh0U2NyaXB0V29ya2VycyIsInBhcnR5dG93blNuaXBwZXQiLCJfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyIsImNoaWxkcmVuIiwiQXJyYXkiLCJpc0FycmF5IiwidXNlckRlZmluZWRDb25maWciLCJmaW5kIiwicmVmIiwicmVmMSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwibGVuZ3RoIiwiRnJhZ21lbnQiLCJ3b3JrZXIiLCJmaWxlIiwiaW5kZXgiLCJzdHJhdGVneSIsInNjcmlwdFByb3BzIiwiYXNzaWduIiwidHlwZSIsImVyciIsImNvZGUiLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJnZXRQcmVOZXh0U2NyaXB0cyIsIndlYldvcmtlclNjcmlwdHMiLCJiZWZvcmVJbnRlcmFjdGl2ZVNjcmlwdHMiLCJiZWZvcmVJbnRlcmFjdGl2ZSIsIl9kZWZlciIsImdldER5bmFtaWNDaHVua3MiLCJmaWxlcyIsImR5bmFtaWNJbXBvcnRzIiwiaXNEZXZlbG9wbWVudCIsImluY2x1ZGVzIiwiYXN5bmMiLCJlbmNvZGVVUkkiLCJnZXRTY3JpcHRzIiwibm9ybWFsU2NyaXB0cyIsImxvd1ByaW9yaXR5U2NyaXB0cyIsImxvd1ByaW9yaXR5RmlsZXMiLCJEb2N1bWVudCIsIkNvbXBvbmVudCIsImdldEluaXRpYWxQcm9wcyIsImN0eCIsImRlZmF1bHRHZXRJbml0aWFsUHJvcHMiLCJyZW5kZXIiLCJIZWFkIiwiTmV4dFNjcmlwdCIsIl9fbmV4dF9pbnRlcm5hbF9kb2N1bWVudCIsIkludGVybmFsRnVuY3Rpb25Eb2N1bWVudCIsImRvY0NvbXBvbmVudHNSZW5kZXJlZCIsImxvY2FsZSIsInVzZUNvbnRleHQiLCJIdG1sQ29udGV4dCIsImxhbmciLCJ1bmRlZmluZWQiLCJhbXAiLCJBbXBTdHlsZXMiLCJzdHlsZXMiLCJjdXJTdHlsZXMiLCJoYXNTdHlsZXMiLCJlbCIsInJlZjIiLCJmb3JFYWNoIiwicHVzaCIsInN0eWxlIiwiam9pbiIsInJlcGxhY2UiLCJnZXRDc3NMaW5rcyIsIm9wdGltaXplQ3NzIiwib3B0aW1pemVGb250cyIsImNzc0ZpbGVzIiwiZiIsInVubWFuZ2VkRmlsZXMiLCJkeW5hbWljQ3NzRmlsZXMiLCJmcm9tIiwiZXhpc3RpbmciLCJoYXMiLCJjc3NMaW5rRWxlbWVudHMiLCJpc1NoYXJlZEZpbGUiLCJyZWwiLCJocmVmIiwiYXMiLCJpc1VubWFuYWdlZEZpbGUiLCJtYWtlU3R5bGVzaGVldEluZXJ0IiwiZ2V0UHJlbG9hZER5bmFtaWNDaHVua3MiLCJCb29sZWFuIiwiZ2V0UHJlbG9hZE1haW5MaW5rcyIsInByZWxvYWRGaWxlcyIsImhhbmRsZURvY3VtZW50U2NyaXB0TG9hZGVySXRlbXMiLCJzY3JpcHRMb2FkZXJJdGVtcyIsImZpbHRlcmVkQ2hpbGRyZW4iLCJDaGlsZHJlbiIsImNvbmNhdCIsIl9fTkVYVF9EQVRBX18iLCJub2RlIiwiYyIsInJlZjUiLCJyZWYzIiwiT1BUSU1JWkVEX0ZPTlRfUFJPVklERVJTIiwic29tZSIsInVybCIsInJlZjQiLCJzdGFydHNXaXRoIiwibmV3UHJvcHMiLCJjbG9uZUVsZW1lbnQiLCJhbXBQYXRoIiwiaHlicmlkQW1wIiwiY2Fub25pY2FsQmFzZSIsImRhbmdlcm91c0FzUGF0aCIsImhlYWRUYWdzIiwidW5zdGFibGVfcnVudGltZUpTIiwidW5zdGFibGVfSnNQcmVsb2FkIiwiZGlzYWJsZVJ1bnRpbWVKUyIsImRpc2FibGVKc1ByZWxvYWQiLCJoZWFkIiwiY3NzUHJlbG9hZHMiLCJvdGhlckhlYWRFbGVtZW50cyIsInRvQXJyYXkiLCJpc1JlYWN0SGVsbWV0IiwicmVmNiIsIm5hbWUiLCJoYXNBbXBodG1sUmVsIiwiaGFzQ2Fub25pY2FsUmVsIiwiYmFkUHJvcCIsImluZGV4T2YiLCJrZXlzIiwicHJvcCIsInBhZ2UiLCJfbm9uY2UiLCJfbm9uY2UxIiwiY29udGVudCIsImNvdW50IiwidG9TdHJpbmciLCJjbGVhbkFtcFBhdGgiLCJnZXRBbXBQYXRoIiwiaWQiLCJjb250ZXh0VHlwZSIsImdldElubGluZVNjcmlwdFNvdXJjZSIsImRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwiYnl0ZXMiLCJCdWZmZXIiLCJieXRlTGVuZ3RoIiwicHJldHR5Qnl0ZXMiLCJodG1sRXNjYXBlSnNvblN0cmluZyIsIkVycm9yIiwiYW1wRGV2RmlsZXMiLCJkZXZGaWxlcyIsInNhZmFyaU5vbW9kdWxlRml4IiwiYXNQYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/pages/_document.js\n");

/***/ }),

/***/ "./pages/_document.tsx":
/*!*****************************!*\
  !*** ./pages/_document.tsx ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_document__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/document */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/document.js\");\n/* harmony import */ var next_document__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_document__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-components */ \"styled-components\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_components__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__);\nvar _jsxFileName = \"/Users/jimmy/Projects/jimmyflix_v2.0/pages/_document.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nclass MyDocument extends (next_document__WEBPACK_IMPORTED_MODULE_0___default()) {\n  static async getInitialProps(ctx) {\n    const sheet = new styled_components__WEBPACK_IMPORTED_MODULE_1__.ServerStyleSheet();\n    const originalRenderPage = ctx.renderPage;\n\n    try {\n      ctx.renderPage = () => originalRenderPage({\n        enhanceApp: App => props => sheet.collectStyles( /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(App, _objectSpread({}, props), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 33\n        }, this))\n      });\n\n      const initialProps = await next_document__WEBPACK_IMPORTED_MODULE_0___default().getInitialProps(ctx);\n      return _objectSpread(_objectSpread({}, initialProps), {}, {\n        styles: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n          children: [initialProps.styles, sheet.getStyleElement()]\n        }, void 0, true)]\n      });\n    } finally {\n      sheet.seal();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(next_document__WEBPACK_IMPORTED_MODULE_0__.Html, {\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(next_document__WEBPACK_IMPORTED_MODULE_0__.Head, {\n        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"link\", {\n          rel: \"stylesheet\",\n          type: \"text/css\",\n          charSet: \"UTF-8\",\n          href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"link\", {\n          rel: \"stylesheet\",\n          type: \"text/css\",\n          href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"body\", {\n        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(next_document__WEBPACK_IMPORTED_MODULE_0__.Main, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(next_document__WEBPACK_IMPORTED_MODULE_0__.NextScript, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MyDocument);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fZG9jdW1lbnQudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBT0E7Ozs7QUFFQSxNQUFNTSxVQUFOLFNBQXlCTixzREFBekIsQ0FBa0M7QUFDSixlQUFmTyxlQUFlLENBQUNDLEdBQUQsRUFBdUI7QUFDakQsVUFBTUMsS0FBSyxHQUFHLElBQUlKLCtEQUFKLEVBQWQ7QUFDQSxVQUFNSyxrQkFBa0IsR0FBR0YsR0FBRyxDQUFDRyxVQUEvQjs7QUFDQSxRQUFJO0FBQ0ZILE1BQUFBLEdBQUcsQ0FBQ0csVUFBSixHQUFpQixNQUNmRCxrQkFBa0IsQ0FBQztBQUNqQkUsUUFBQUEsVUFBVSxFQUFHQyxHQUFELElBQVVDLEtBQUQsSUFDbkJMLEtBQUssQ0FBQ00sYUFBTixlQUFvQiw4REFBQyxHQUFELG9CQUFTRCxLQUFUO0FBQUE7QUFBQTtBQUFBO0FBQUEsZ0JBQXBCO0FBRmUsT0FBRCxDQURwQjs7QUFNQSxZQUFNRSxZQUFZLEdBQUcsTUFBTWhCLG9FQUFBLENBQXlCUSxHQUF6QixDQUEzQjtBQUNBLDZDQUNLUSxZQURMO0FBRUVDLFFBQUFBLE1BQU0sRUFBRSxjQUNOO0FBQUEscUJBQ0dELFlBQVksQ0FBQ0MsTUFEaEIsRUFFR1IsS0FBSyxDQUFDUyxlQUFOLEVBRkg7QUFBQSx3QkFETTtBQUZWO0FBU0QsS0FqQkQsU0FpQlU7QUFDUlQsTUFBQUEsS0FBSyxDQUFDVSxJQUFOO0FBQ0Q7QUFDRjs7QUFFREMsRUFBQUEsTUFBTSxHQUFHO0FBQ1Asd0JBQ0UsOERBQUMsK0NBQUQ7QUFBQSw4QkFDRSw4REFBQywrQ0FBRDtBQUFBLGdDQUNFO0FBQ0UsYUFBRyxFQUFDLFlBRE47QUFFRSxjQUFJLEVBQUMsVUFGUDtBQUdFLGlCQUFPLEVBQUMsT0FIVjtBQUlFLGNBQUksRUFBQztBQUpQO0FBQUE7QUFBQTtBQUFBO0FBQUEsZ0JBREYsZUFPRTtBQUNFLGFBQUcsRUFBQyxZQUROO0FBRUUsY0FBSSxFQUFDLFVBRlA7QUFHRSxjQUFJLEVBQUM7QUFIUDtBQUFBO0FBQUE7QUFBQTtBQUFBLGdCQVBGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxjQURGLGVBY0U7QUFBQSxnQ0FDRSw4REFBQywrQ0FBRDtBQUFBO0FBQUE7QUFBQTtBQUFBLGdCQURGLGVBRUUsOERBQUMscURBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxnQkFGRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsY0FkRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFERjtBQXFCRDs7QUFoRCtCOztBQW1EbEMsaUVBQWVkLFVBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qaW1teWZsaXgvLi9wYWdlcy9fZG9jdW1lbnQudHN4P2QzN2QiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERvY3VtZW50LCB7XG4gIEh0bWwsXG4gIEhlYWQsXG4gIE1haW4sXG4gIE5leHRTY3JpcHQsXG4gIERvY3VtZW50Q29udGV4dCxcbn0gZnJvbSAnbmV4dC9kb2N1bWVudCdcbmltcG9ydCB7IFNlcnZlclN0eWxlU2hlZXQgfSBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcblxuY2xhc3MgTXlEb2N1bWVudCBleHRlbmRzIERvY3VtZW50IHtcbiAgc3RhdGljIGFzeW5jIGdldEluaXRpYWxQcm9wcyhjdHg6IERvY3VtZW50Q29udGV4dCkge1xuICAgIGNvbnN0IHNoZWV0ID0gbmV3IFNlcnZlclN0eWxlU2hlZXQoKVxuICAgIGNvbnN0IG9yaWdpbmFsUmVuZGVyUGFnZSA9IGN0eC5yZW5kZXJQYWdlXG4gICAgdHJ5IHtcbiAgICAgIGN0eC5yZW5kZXJQYWdlID0gKCkgPT5cbiAgICAgICAgb3JpZ2luYWxSZW5kZXJQYWdlKHtcbiAgICAgICAgICBlbmhhbmNlQXBwOiAoQXBwKSA9PiAocHJvcHMpID0+XG4gICAgICAgICAgICBzaGVldC5jb2xsZWN0U3R5bGVzKDxBcHAgey4uLnByb3BzfSAvPiksXG4gICAgICAgIH0pXG5cbiAgICAgIGNvbnN0IGluaXRpYWxQcm9wcyA9IGF3YWl0IERvY3VtZW50LmdldEluaXRpYWxQcm9wcyhjdHgpXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5pbml0aWFsUHJvcHMsXG4gICAgICAgIHN0eWxlczogW1xuICAgICAgICAgIDw+XG4gICAgICAgICAgICB7aW5pdGlhbFByb3BzLnN0eWxlc31cbiAgICAgICAgICAgIHtzaGVldC5nZXRTdHlsZUVsZW1lbnQoKX1cbiAgICAgICAgICA8Lz4sXG4gICAgICAgIF0sXG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNoZWV0LnNlYWwoKVxuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEh0bWw+XG4gICAgICAgIDxIZWFkPlxuICAgICAgICAgIDxsaW5rXG4gICAgICAgICAgICByZWw9XCJzdHlsZXNoZWV0XCJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0L2Nzc1wiXG4gICAgICAgICAgICBjaGFyU2V0PVwiVVRGLThcIlxuICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3NsaWNrLWNhcm91c2VsLzEuNi4wL3NsaWNrLm1pbi5jc3NcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPGxpbmtcbiAgICAgICAgICAgIHJlbD1cInN0eWxlc2hlZXRcIlxuICAgICAgICAgICAgdHlwZT1cInRleHQvY3NzXCJcbiAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9zbGljay1jYXJvdXNlbC8xLjYuMC9zbGljay10aGVtZS5taW4uY3NzXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L0hlYWQ+XG4gICAgICAgIDxib2R5PlxuICAgICAgICAgIDxNYWluIC8+XG4gICAgICAgICAgPE5leHRTY3JpcHQgLz5cbiAgICAgICAgPC9ib2R5PlxuICAgICAgPC9IdG1sPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNeURvY3VtZW50XG4iXSwibmFtZXMiOlsiRG9jdW1lbnQiLCJIdG1sIiwiSGVhZCIsIk1haW4iLCJOZXh0U2NyaXB0IiwiU2VydmVyU3R5bGVTaGVldCIsIk15RG9jdW1lbnQiLCJnZXRJbml0aWFsUHJvcHMiLCJjdHgiLCJzaGVldCIsIm9yaWdpbmFsUmVuZGVyUGFnZSIsInJlbmRlclBhZ2UiLCJlbmhhbmNlQXBwIiwiQXBwIiwicHJvcHMiLCJjb2xsZWN0U3R5bGVzIiwiaW5pdGlhbFByb3BzIiwic3R5bGVzIiwiZ2V0U3R5bGVFbGVtZW50Iiwic2VhbCIsInJlbmRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/_document.tsx\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/is-error.js":
/*!********************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/is-error.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = isError;\nexports.getProperError = getProperError;\nvar _isPlainObject = __webpack_require__(/*! ../shared/lib/is-plain-object */ \"../shared/lib/is-plain-object\");\nfunction isError(err) {\n    return typeof err === 'object' && err !== null && 'name' in err && 'message' in err;\n}\nfunction getProperError(err) {\n    if (isError(err)) {\n        return err;\n    }\n    if (true) {\n        // provide better error for case where `throw undefined`\n        // is called in development\n        if (typeof err === 'undefined') {\n            return new Error('An undefined error was thrown, ' + 'see here for more info: https://nextjs.org/docs/messages/threw-undefined');\n        }\n        if (err === null) {\n            return new Error('A null error was thrown, ' + 'see here for more info: https://nextjs.org/docs/messages/threw-undefined');\n        }\n    }\n    return new Error((0, _isPlainObject).isPlainObject(err) ? JSON.stringify(err) : err + '');\n}\n\n//# sourceMappingURL=is-error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvbGliL2lzLWVycm9yLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixzQkFBc0I7QUFDdEIscUJBQXFCLG1CQUFPLENBQUMsb0VBQStCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxJQUFzQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamltbXlmbGl4Ly4vLnlhcm4vX192aXJ0dWFsX18vbmV4dC12aXJ0dWFsLThiNjBmNTQzYTYvMC9jYWNoZS9uZXh0LW5wbS0xMi4xLjUtYWQxMjI5MTMwMC1hNzBlNzBmNzg2LnppcC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9pcy1lcnJvci5qcz9jY2UxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNFcnJvcjtcbmV4cG9ydHMuZ2V0UHJvcGVyRXJyb3IgPSBnZXRQcm9wZXJFcnJvcjtcbnZhciBfaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL2lzLXBsYWluLW9iamVjdFwiKTtcbmZ1bmN0aW9uIGlzRXJyb3IoZXJyKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlcnIgPT09ICdvYmplY3QnICYmIGVyciAhPT0gbnVsbCAmJiAnbmFtZScgaW4gZXJyICYmICdtZXNzYWdlJyBpbiBlcnI7XG59XG5mdW5jdGlvbiBnZXRQcm9wZXJFcnJvcihlcnIpIHtcbiAgICBpZiAoaXNFcnJvcihlcnIpKSB7XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAvLyBwcm92aWRlIGJldHRlciBlcnJvciBmb3IgY2FzZSB3aGVyZSBgdGhyb3cgdW5kZWZpbmVkYFxuICAgICAgICAvLyBpcyBjYWxsZWQgaW4gZGV2ZWxvcG1lbnRcbiAgICAgICAgaWYgKHR5cGVvZiBlcnIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdBbiB1bmRlZmluZWQgZXJyb3Igd2FzIHRocm93biwgJyArICdzZWUgaGVyZSBmb3IgbW9yZSBpbmZvOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy90aHJldy11bmRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdBIG51bGwgZXJyb3Igd2FzIHRocm93biwgJyArICdzZWUgaGVyZSBmb3IgbW9yZSBpbmZvOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy90aHJldy11bmRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IEVycm9yKCgwLCBfaXNQbGFpbk9iamVjdCkuaXNQbGFpbk9iamVjdChlcnIpID8gSlNPTi5zdHJpbmdpZnkoZXJyKSA6IGVyciArICcnKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMtZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/is-error.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/pretty-bytes.js":
/*!************************************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/pretty-bytes.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = prettyBytes;\nfunction prettyBytes(number, options) {\n    if (!Number.isFinite(number)) {\n        throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);\n    }\n    options = Object.assign({}, options);\n    if (options.signed && number === 0) {\n        return ' 0 B';\n    }\n    const isNegative = number < 0;\n    const prefix = isNegative ? '-' : options.signed ? '+' : '';\n    if (isNegative) {\n        number = -number;\n    }\n    if (number < 1) {\n        const numberString = toLocaleString(number, options.locale);\n        return prefix + numberString + ' B';\n    }\n    const exponent = Math.min(Math.floor(Math.log10(number) / 3), UNITS.length - 1);\n    number = Number((number / Math.pow(1000, exponent)).toPrecision(3));\n    const numberString = toLocaleString(number, options.locale);\n    const unit = UNITS[exponent];\n    return prefix + numberString + ' ' + unit;\n}\n/*\nMIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/ const UNITS = [\n    'B',\n    'kB',\n    'MB',\n    'GB',\n    'TB',\n    'PB',\n    'EB',\n    'ZB',\n    'YB'\n];\n/*\nFormats the given number using `Number#toLocaleString`.\n- If locale is a string, the value is expected to be a locale-key (for example: `de`).\n- If locale is true, the system default locale is used for translation.\n- If no value for locale is specified, the number is returned unmodified.\n*/ const toLocaleString = (number, locale)=>{\n    let result = number;\n    if (typeof locale === 'string') {\n        result = number.toLocaleString(locale);\n    } else if (locale === true) {\n        result = number.toLocaleString();\n    }\n    return result;\n};\n\n//# sourceMappingURL=pretty-bytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvbGliL3ByZXR0eS1ieXRlcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlO0FBQ2Y7QUFDQTtBQUNBLDZEQUE2RCxjQUFjLElBQUksT0FBTztBQUN0RjtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ppbW15ZmxpeC8uLy55YXJuL19fdmlydHVhbF9fL25leHQtdmlydHVhbC04YjYwZjU0M2E2LzAvY2FjaGUvbmV4dC1ucG0tMTIuMS41LWFkMTIyOTEzMDAtYTcwZTcwZjc4Ni56aXAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9saWIvcHJldHR5LWJ5dGVzLmpzPzZiMjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwcmV0dHlCeXRlcztcbmZ1bmN0aW9uIHByZXR0eUJ5dGVzKG51bWJlciwgb3B0aW9ucykge1xuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgYSBmaW5pdGUgbnVtYmVyLCBnb3QgJHt0eXBlb2YgbnVtYmVyfTogJHtudW1iZXJ9YCk7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5zaWduZWQgJiYgbnVtYmVyID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnIDAgQic7XG4gICAgfVxuICAgIGNvbnN0IGlzTmVnYXRpdmUgPSBudW1iZXIgPCAwO1xuICAgIGNvbnN0IHByZWZpeCA9IGlzTmVnYXRpdmUgPyAnLScgOiBvcHRpb25zLnNpZ25lZCA/ICcrJyA6ICcnO1xuICAgIGlmIChpc05lZ2F0aXZlKSB7XG4gICAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAxKSB7XG4gICAgICAgIGNvbnN0IG51bWJlclN0cmluZyA9IHRvTG9jYWxlU3RyaW5nKG51bWJlciwgb3B0aW9ucy5sb2NhbGUpO1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgbnVtYmVyU3RyaW5nICsgJyBCJztcbiAgICB9XG4gICAgY29uc3QgZXhwb25lbnQgPSBNYXRoLm1pbihNYXRoLmZsb29yKE1hdGgubG9nMTAobnVtYmVyKSAvIDMpLCBVTklUUy5sZW5ndGggLSAxKTtcbiAgICBudW1iZXIgPSBOdW1iZXIoKG51bWJlciAvIE1hdGgucG93KDEwMDAsIGV4cG9uZW50KSkudG9QcmVjaXNpb24oMykpO1xuICAgIGNvbnN0IG51bWJlclN0cmluZyA9IHRvTG9jYWxlU3RyaW5nKG51bWJlciwgb3B0aW9ucy5sb2NhbGUpO1xuICAgIGNvbnN0IHVuaXQgPSBVTklUU1tleHBvbmVudF07XG4gICAgcmV0dXJuIHByZWZpeCArIG51bWJlclN0cmluZyArICcgJyArIHVuaXQ7XG59XG4vKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSBTaW5kcmUgU29yaHVzIDxzaW5kcmVzb3JodXNAZ21haWwuY29tPiAoc2luZHJlc29yaHVzLmNvbSlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuKi8gY29uc3QgVU5JVFMgPSBbXG4gICAgJ0InLFxuICAgICdrQicsXG4gICAgJ01CJyxcbiAgICAnR0InLFxuICAgICdUQicsXG4gICAgJ1BCJyxcbiAgICAnRUInLFxuICAgICdaQicsXG4gICAgJ1lCJ1xuXTtcbi8qXG5Gb3JtYXRzIHRoZSBnaXZlbiBudW1iZXIgdXNpbmcgYE51bWJlciN0b0xvY2FsZVN0cmluZ2AuXG4tIElmIGxvY2FsZSBpcyBhIHN0cmluZywgdGhlIHZhbHVlIGlzIGV4cGVjdGVkIHRvIGJlIGEgbG9jYWxlLWtleSAoZm9yIGV4YW1wbGU6IGBkZWApLlxuLSBJZiBsb2NhbGUgaXMgdHJ1ZSwgdGhlIHN5c3RlbSBkZWZhdWx0IGxvY2FsZSBpcyB1c2VkIGZvciB0cmFuc2xhdGlvbi5cbi0gSWYgbm8gdmFsdWUgZm9yIGxvY2FsZSBpcyBzcGVjaWZpZWQsIHRoZSBudW1iZXIgaXMgcmV0dXJuZWQgdW5tb2RpZmllZC5cbiovIGNvbnN0IHRvTG9jYWxlU3RyaW5nID0gKG51bWJlciwgbG9jYWxlKT0+e1xuICAgIGxldCByZXN1bHQgPSBudW1iZXI7XG4gICAgaWYgKHR5cGVvZiBsb2NhbGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlc3VsdCA9IG51bWJlci50b0xvY2FsZVN0cmluZyhsb2NhbGUpO1xuICAgIH0gZWxzZSBpZiAobG9jYWxlID09PSB0cnVlKSB7XG4gICAgICAgIHJlc3VsdCA9IG51bWJlci50b0xvY2FsZVN0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJldHR5LWJ5dGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/lib/pretty-bytes.js\n");

/***/ }),

/***/ "./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/document.js":
/*!***********************************************************************************************************************************!*\
  !*** ./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/document.js ***!
  \***********************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/pages/_document */ \"./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/dist/pages/_document.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi8ueWFybi9fX3ZpcnR1YWxfXy9uZXh0LXZpcnR1YWwtOGI2MGY1NDNhNi8wL2NhY2hlL25leHQtbnBtLTEyLjEuNS1hZDEyMjkxMzAwLWE3MGU3MGY3ODYuemlwL25vZGVfbW9kdWxlcy9uZXh0L2RvY3VtZW50LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDZNQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ppbW15ZmxpeC8uLy55YXJuL19fdmlydHVhbF9fL25leHQtdmlydHVhbC04YjYwZjU0M2E2LzAvY2FjaGUvbmV4dC1ucG0tMTIuMS41LWFkMTIyOTEzMDAtYTcwZTcwZjc4Ni56aXAvbm9kZV9tb2R1bGVzL25leHQvZG9jdW1lbnQuanM/MTljNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9wYWdlcy9fZG9jdW1lbnQnKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/next-virtual-8b60f543a6/0/cache/next-npm-12.1.5-ad12291300-a70e70f786.zip/node_modules/next/document.js\n");

/***/ }),

/***/ "../server/get-page-files":
/*!*****************************************************!*\
  !*** external "next/dist/server/get-page-files.js" ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/get-page-files.js");

/***/ }),

/***/ "../server/htmlescape":
/*!*************************************************!*\
  !*** external "next/dist/server/htmlescape.js" ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/htmlescape.js");

/***/ }),

/***/ "../server/utils":
/*!********************************************!*\
  !*** external "next/dist/server/utils.js" ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/utils.js");

/***/ }),

/***/ "../shared/lib/constants":
/*!****************************************************!*\
  !*** external "next/dist/shared/lib/constants.js" ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/constants.js");

/***/ }),

/***/ "../shared/lib/head-manager-context":
/*!***************************************************************!*\
  !*** external "next/dist/shared/lib/head-manager-context.js" ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/head-manager-context.js");

/***/ }),

/***/ "../shared/lib/html-context":
/*!*******************************************************!*\
  !*** external "next/dist/shared/lib/html-context.js" ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/html-context.js");

/***/ }),

/***/ "../shared/lib/is-plain-object":
/*!**********************************************************!*\
  !*** external "next/dist/shared/lib/is-plain-object.js" ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/is-plain-object.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "styled-components":
/*!************************************!*\
  !*** external "styled-components" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("styled-components");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/_document.tsx"));
module.exports = __webpack_exports__;

})();